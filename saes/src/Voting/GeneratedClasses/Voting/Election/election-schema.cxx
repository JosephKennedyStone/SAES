// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "election-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        // Ballot_form_area
        // 

        const Ballot_form_area::IdType& Ballot_form_area::
        getId () const
        {
          return this->id_.get ();
        }

        Ballot_form_area::IdType& Ballot_form_area::
        getId ()
        {
          return this->id_.get ();
        }

        void Ballot_form_area::
        setId (const IdType& x)
        {
          this->id_.set (x);
        }

        void Ballot_form_area::
        setId (::std::auto_ptr< IdType > x)
        {
          this->id_.set (x);
        }

        const Ballot_form_area::XType& Ballot_form_area::
        getX () const
        {
          return this->x_.get ();
        }

        Ballot_form_area::XType& Ballot_form_area::
        getX ()
        {
          return this->x_.get ();
        }

        void Ballot_form_area::
        setX (const XType& x)
        {
          this->x_.set (x);
        }

        const Ballot_form_area::YType& Ballot_form_area::
        getY () const
        {
          return this->y_.get ();
        }

        Ballot_form_area::YType& Ballot_form_area::
        getY ()
        {
          return this->y_.get ();
        }

        void Ballot_form_area::
        setY (const YType& x)
        {
          this->y_.set (x);
        }

        const Ballot_form_area::WidthType& Ballot_form_area::
        getWidth () const
        {
          return this->width_.get ();
        }

        Ballot_form_area::WidthType& Ballot_form_area::
        getWidth ()
        {
          return this->width_.get ();
        }

        void Ballot_form_area::
        setWidth (const WidthType& x)
        {
          this->width_.set (x);
        }

        const Ballot_form_area::HeightType& Ballot_form_area::
        getHeight () const
        {
          return this->height_.get ();
        }

        Ballot_form_area::HeightType& Ballot_form_area::
        getHeight ()
        {
          return this->height_.get ();
        }

        void Ballot_form_area::
        setHeight (const HeightType& x)
        {
          this->height_.set (x);
        }


        // Ballot_form_identification_area
        // 

        const Ballot_form_identification_area::PartSequence& Ballot_form_identification_area::
        getPart () const
        {
          return this->part_;
        }

        Ballot_form_identification_area::PartSequence& Ballot_form_identification_area::
        getPart ()
        {
          return this->part_;
        }

        void Ballot_form_identification_area::
        setPart (const PartSequence& s)
        {
          this->part_ = s;
        }

        const Ballot_form_identification_area::Parts_patternType& Ballot_form_identification_area::
        getParts_pattern () const
        {
          return this->parts_pattern_.get ();
        }

        Ballot_form_identification_area::Parts_patternType& Ballot_form_identification_area::
        getParts_pattern ()
        {
          return this->parts_pattern_.get ();
        }

        void Ballot_form_identification_area::
        setParts_pattern (const Parts_patternType& x)
        {
          this->parts_pattern_.set (x);
        }

        void Ballot_form_identification_area::
        setParts_pattern (::std::auto_ptr< Parts_patternType > x)
        {
          this->parts_pattern_.set (x);
        }


        // Election
        // 

        const Election::BallotsType& Election::
        getBallots () const
        {
          return this->ballots_.get ();
        }

        Election::BallotsType& Election::
        getBallots ()
        {
          return this->ballots_.get ();
        }

        void Election::
        setBallots (const BallotsType& x)
        {
          this->ballots_.set (x);
        }

        void Election::
        setBallots (::std::auto_ptr< BallotsType > x)
        {
          this->ballots_.set (x);
        }

        const Election::LanguagesOptional& Election::
        getLanguages () const
        {
          return this->languages_;
        }

        Election::LanguagesOptional& Election::
        getLanguages ()
        {
          return this->languages_;
        }

        void Election::
        setLanguages (const LanguagesType& x)
        {
          this->languages_.set (x);
        }

        void Election::
        setLanguages (const LanguagesOptional& x)
        {
          this->languages_ = x;
        }

        void Election::
        setLanguages (::std::auto_ptr< LanguagesType > x)
        {
          this->languages_.set (x);
        }

        const Election::Xml_schemas_necessaryType& Election::
        getXml_schemas_necessary () const
        {
          return this->xml_schemas_necessary_.get ();
        }

        Election::Xml_schemas_necessaryType& Election::
        getXml_schemas_necessary ()
        {
          return this->xml_schemas_necessary_.get ();
        }

        void Election::
        setXml_schemas_necessary (const Xml_schemas_necessaryType& x)
        {
          this->xml_schemas_necessary_.set (x);
        }

        void Election::
        setXml_schemas_necessary (::std::auto_ptr< Xml_schemas_necessaryType > x)
        {
          this->xml_schemas_necessary_.set (x);
        }

        const Election::Contest_classesType& Election::
        getContest_classes () const
        {
          return this->contest_classes_.get ();
        }

        Election::Contest_classesType& Election::
        getContest_classes ()
        {
          return this->contest_classes_.get ();
        }

        void Election::
        setContest_classes (const Contest_classesType& x)
        {
          this->contest_classes_.set (x);
        }

        void Election::
        setContest_classes (::std::auto_ptr< Contest_classesType > x)
        {
          this->contest_classes_.set (x);
        }

        const Election::Contest_groupsType& Election::
        getContest_groups () const
        {
          return this->contest_groups_.get ();
        }

        Election::Contest_groupsType& Election::
        getContest_groups ()
        {
          return this->contest_groups_.get ();
        }

        void Election::
        setContest_groups (const Contest_groupsType& x)
        {
          this->contest_groups_.set (x);
        }

        void Election::
        setContest_groups (::std::auto_ptr< Contest_groupsType > x)
        {
          this->contest_groups_.set (x);
        }

        const Election::Ballot_form_layoutsOptional& Election::
        getBallot_form_layouts () const
        {
          return this->ballot_form_layouts_;
        }

        Election::Ballot_form_layoutsOptional& Election::
        getBallot_form_layouts ()
        {
          return this->ballot_form_layouts_;
        }

        void Election::
        setBallot_form_layouts (const Ballot_form_layoutsType& x)
        {
          this->ballot_form_layouts_.set (x);
        }

        void Election::
        setBallot_form_layouts (const Ballot_form_layoutsOptional& x)
        {
          this->ballot_form_layouts_ = x;
        }

        void Election::
        setBallot_form_layouts (::std::auto_ptr< Ballot_form_layoutsType > x)
        {
          this->ballot_form_layouts_.set (x);
        }

        const Election::HashOptional& Election::
        getHash () const
        {
          return this->hash_;
        }

        Election::HashOptional& Election::
        getHash ()
        {
          return this->hash_;
        }

        void Election::
        setHash (const HashType& x)
        {
          this->hash_.set (x);
        }

        void Election::
        setHash (const HashOptional& x)
        {
          this->hash_ = x;
        }

        void Election::
        setHash (::std::auto_ptr< HashType > x)
        {
          this->hash_.set (x);
        }

        const Election::Name_keyType& Election::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Election::Name_keyType& Election::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Election::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Election::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Election::Electoral_organizationType& Election::
        getElectoral_organization () const
        {
          return this->electoral_organization_.get ();
        }

        Election::Electoral_organizationType& Election::
        getElectoral_organization ()
        {
          return this->electoral_organization_.get ();
        }

        void Election::
        setElectoral_organization (const Electoral_organizationType& x)
        {
          this->electoral_organization_.set (x);
        }

        void Election::
        setElectoral_organization (::std::auto_ptr< Electoral_organizationType > x)
        {
          this->electoral_organization_.set (x);
        }

        const Election::Voting_time_outType& Election::
        getVoting_time_out () const
        {
          return this->voting_time_out_.get ();
        }

        Election::Voting_time_outType& Election::
        getVoting_time_out ()
        {
          return this->voting_time_out_.get ();
        }

        void Election::
        setVoting_time_out (const Voting_time_outType& x)
        {
          this->voting_time_out_.set (x);
        }

        void Election::
        setVoting_time_out (::std::auto_ptr< Voting_time_outType > x)
        {
          this->voting_time_out_.set (x);
        }

        const Election::Audio_voting_time_outOptional& Election::
        getAudio_voting_time_out () const
        {
          return this->audio_voting_time_out_;
        }

        Election::Audio_voting_time_outOptional& Election::
        getAudio_voting_time_out ()
        {
          return this->audio_voting_time_out_;
        }

        void Election::
        setAudio_voting_time_out (const Audio_voting_time_outType& x)
        {
          this->audio_voting_time_out_.set (x);
        }

        void Election::
        setAudio_voting_time_out (const Audio_voting_time_outOptional& x)
        {
          this->audio_voting_time_out_ = x;
        }

        void Election::
        setAudio_voting_time_out (::std::auto_ptr< Audio_voting_time_outType > x)
        {
          this->audio_voting_time_out_.set (x);
        }

        const Election::CodeType& Election::
        getCode () const
        {
          return this->code_.get ();
        }

        Election::CodeType& Election::
        getCode ()
        {
          return this->code_.get ();
        }

        void Election::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Election::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Election::Custom_codeType& Election::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Election::Custom_codeType& Election::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Election::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Election::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }


        // Part
        // 

        Part::
        Part ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Part::
        Part (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Part_literals_[v])
        {
        }

        Part::
        Part (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Part::
        Part (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Part::
        Part (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Part::
        Part (const Part& v,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Part& Part::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Part_literals_[v]);

          return *this;
        }


        // Ballots
        // 

        const Ballots::BallotSequence& Ballots::
        getBallot () const
        {
          return this->ballot_;
        }

        Ballots::BallotSequence& Ballots::
        getBallot ()
        {
          return this->ballot_;
        }

        void Ballots::
        setBallot (const BallotSequence& s)
        {
          this->ballot_ = s;
        }


        // Xml_schemas_necessary
        // 

        const Xml_schemas_necessary::Transmission_packageType& Xml_schemas_necessary::
        getTransmission_package () const
        {
          return this->transmission_package_.get ();
        }

        Xml_schemas_necessary::Transmission_packageType& Xml_schemas_necessary::
        getTransmission_package ()
        {
          return this->transmission_package_.get ();
        }

        void Xml_schemas_necessary::
        setTransmission_package (const Transmission_packageType& x)
        {
          this->transmission_package_.set (x);
        }

        void Xml_schemas_necessary::
        setTransmission_package (::std::auto_ptr< Transmission_packageType > x)
        {
          this->transmission_package_.set (x);
        }


        // Contest_classes
        // 

        const Contest_classes::ComparatorOptional& Contest_classes::
        getComparator () const
        {
          return this->comparator_;
        }

        Contest_classes::ComparatorOptional& Contest_classes::
        getComparator ()
        {
          return this->comparator_;
        }

        void Contest_classes::
        setComparator (const ComparatorType& x)
        {
          this->comparator_.set (x);
        }

        void Contest_classes::
        setComparator (const ComparatorOptional& x)
        {
          this->comparator_ = x;
        }

        void Contest_classes::
        setComparator (::std::auto_ptr< ComparatorType > x)
        {
          this->comparator_.set (x);
        }

        const Contest_classes::Contest_classSequence& Contest_classes::
        getContest_class () const
        {
          return this->contest_class_;
        }

        Contest_classes::Contest_classSequence& Contest_classes::
        getContest_class ()
        {
          return this->contest_class_;
        }

        void Contest_classes::
        setContest_class (const Contest_classSequence& s)
        {
          this->contest_class_ = s;
        }

        const Contest_classes::ClassOptional& Contest_classes::
        getClass () const
        {
          return this->class__;
        }

        Contest_classes::ClassOptional& Contest_classes::
        getClass ()
        {
          return this->class__;
        }

        void Contest_classes::
        setClass (const ClassType& x)
        {
          this->class__.set (x);
        }

        void Contest_classes::
        setClass (const ClassOptional& x)
        {
          this->class__ = x;
        }

        void Contest_classes::
        setClass (::std::auto_ptr< ClassType > x)
        {
          this->class__.set (x);
        }


        // Contest_groups
        // 

        const Contest_groups::Contest_groupSequence& Contest_groups::
        getContest_group () const
        {
          return this->contest_group_;
        }

        Contest_groups::Contest_groupSequence& Contest_groups::
        getContest_group ()
        {
          return this->contest_group_;
        }

        void Contest_groups::
        setContest_group (const Contest_groupSequence& s)
        {
          this->contest_group_ = s;
        }


        // Ballot_form_layouts
        // 

        const Ballot_form_layouts::Ballot_form_layoutSequence& Ballot_form_layouts::
        getBallot_form_layout () const
        {
          return this->ballot_form_layout_;
        }

        Ballot_form_layouts::Ballot_form_layoutSequence& Ballot_form_layouts::
        getBallot_form_layout ()
        {
          return this->ballot_form_layout_;
        }

        void Ballot_form_layouts::
        setBallot_form_layout (const Ballot_form_layoutSequence& s)
        {
          this->ballot_form_layout_ = s;
        }

        const Ballot_form_layouts::Identification_areaOptional& Ballot_form_layouts::
        getIdentification_area () const
        {
          return this->identification_area_;
        }

        Ballot_form_layouts::Identification_areaOptional& Ballot_form_layouts::
        getIdentification_area ()
        {
          return this->identification_area_;
        }

        void Ballot_form_layouts::
        setIdentification_area (const Identification_areaType& x)
        {
          this->identification_area_.set (x);
        }

        void Ballot_form_layouts::
        setIdentification_area (const Identification_areaOptional& x)
        {
          this->identification_area_ = x;
        }

        void Ballot_form_layouts::
        setIdentification_area (::std::auto_ptr< Identification_areaType > x)
        {
          this->identification_area_.set (x);
        }


        // Voting_time_out
        // 


        // Audio_voting_time_out
        // 


        // Ballot
        // 

        const Ballot::Ballot_cardsType& Ballot::
        getBallot_cards () const
        {
          return this->ballot_cards_.get ();
        }

        Ballot::Ballot_cardsType& Ballot::
        getBallot_cards ()
        {
          return this->ballot_cards_.get ();
        }

        void Ballot::
        setBallot_cards (const Ballot_cardsType& x)
        {
          this->ballot_cards_.set (x);
        }

        void Ballot::
        setBallot_cards (::std::auto_ptr< Ballot_cardsType > x)
        {
          this->ballot_cards_.set (x);
        }

        const Ballot::CodeType& Ballot::
        getCode () const
        {
          return this->code_.get ();
        }

        Ballot::CodeType& Ballot::
        getCode ()
        {
          return this->code_.get ();
        }

        void Ballot::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Ballot::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Ballot::Custom_codeType& Ballot::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Ballot::Custom_codeType& Ballot::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Ballot::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Ballot::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Ballot::Title_keyType& Ballot::
        getTitle_key () const
        {
          return this->title_key_.get ();
        }

        Ballot::Title_keyType& Ballot::
        getTitle_key ()
        {
          return this->title_key_.get ();
        }

        void Ballot::
        setTitle_key (const Title_keyType& x)
        {
          this->title_key_.set (x);
        }

        void Ballot::
        setTitle_key (::std::auto_ptr< Title_keyType > x)
        {
          this->title_key_.set (x);
        }

        const Ballot::Abstract_keyType& Ballot::
        getAbstract_key () const
        {
          return this->abstract_key_.get ();
        }

        Ballot::Abstract_keyType& Ballot::
        getAbstract_key ()
        {
          return this->abstract_key_.get ();
        }

        void Ballot::
        setAbstract_key (const Abstract_keyType& x)
        {
          this->abstract_key_.set (x);
        }

        void Ballot::
        setAbstract_key (::std::auto_ptr< Abstract_keyType > x)
        {
          this->abstract_key_.set (x);
        }

        const Ballot::Help_keyType& Ballot::
        getHelp_key () const
        {
          return this->help_key_.get ();
        }

        Ballot::Help_keyType& Ballot::
        getHelp_key ()
        {
          return this->help_key_.get ();
        }

        void Ballot::
        setHelp_key (const Help_keyType& x)
        {
          this->help_key_.set (x);
        }

        void Ballot::
        setHelp_key (::std::auto_ptr< Help_keyType > x)
        {
          this->help_key_.set (x);
        }


        // Comparator
        // 

        const Comparator::ClassOptional& Comparator::
        getClass () const
        {
          return this->class__;
        }

        Comparator::ClassOptional& Comparator::
        getClass ()
        {
          return this->class__;
        }

        void Comparator::
        setClass (const ClassType& x)
        {
          this->class__.set (x);
        }

        void Comparator::
        setClass (const ClassOptional& x)
        {
          this->class__ = x;
        }

        void Comparator::
        setClass (::std::auto_ptr< ClassType > x)
        {
          this->class__.set (x);
        }


        // Contest_class
        // 

        const Contest_class::CodeType& Contest_class::
        getCode () const
        {
          return this->code_.get ();
        }

        Contest_class::CodeType& Contest_class::
        getCode ()
        {
          return this->code_.get ();
        }

        void Contest_class::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Contest_class::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Contest_class::Custom_codeOptional& Contest_class::
        getCustom_code () const
        {
          return this->custom_code_;
        }

        Contest_class::Custom_codeOptional& Contest_class::
        getCustom_code ()
        {
          return this->custom_code_;
        }

        void Contest_class::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Contest_class::
        setCustom_code (const Custom_codeOptional& x)
        {
          this->custom_code_ = x;
        }

        void Contest_class::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Contest_class::Name_keyType& Contest_class::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Contest_class::Name_keyType& Contest_class::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Contest_class::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Contest_class::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Contest_class::Description_keyType& Contest_class::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Contest_class::Description_keyType& Contest_class::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Contest_class::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Contest_class::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }

        const Contest_class::TypeType& Contest_class::
        getType () const
        {
          return this->type_.get ();
        }

        Contest_class::TypeType& Contest_class::
        getType ()
        {
          return this->type_.get ();
        }

        void Contest_class::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void Contest_class::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const Contest_class::Stand_count_chiefType& Contest_class::
        getStand_count_chief () const
        {
          return this->stand_count_chief_.get ();
        }

        Contest_class::Stand_count_chiefType& Contest_class::
        getStand_count_chief ()
        {
          return this->stand_count_chief_.get ();
        }

        void Contest_class::
        setStand_count_chief (const Stand_count_chiefType& x)
        {
          this->stand_count_chief_.set (x);
        }

        const Contest_class::PeriodType& Contest_class::
        getPeriod () const
        {
          return this->period_.get ();
        }

        Contest_class::PeriodType& Contest_class::
        getPeriod ()
        {
          return this->period_.get ();
        }

        void Contest_class::
        setPeriod (const PeriodType& x)
        {
          this->period_.set (x);
        }

        const Contest_class::UnitType& Contest_class::
        getUnit () const
        {
          return this->unit_.get ();
        }

        Contest_class::UnitType& Contest_class::
        getUnit ()
        {
          return this->unit_.get ();
        }

        void Contest_class::
        setUnit (const UnitType& x)
        {
          this->unit_.set (x);
        }

        void Contest_class::
        setUnit (::std::auto_ptr< UnitType > x)
        {
          this->unit_.set (x);
        }

        const Contest_class::Election_modeType& Contest_class::
        getElection_mode () const
        {
          return this->election_mode_.get ();
        }

        Contest_class::Election_modeType& Contest_class::
        getElection_mode ()
        {
          return this->election_mode_.get ();
        }

        void Contest_class::
        setElection_mode (const Election_modeType& x)
        {
          this->election_mode_.set (x);
        }

        void Contest_class::
        setElection_mode (::std::auto_ptr< Election_modeType > x)
        {
          this->election_mode_.set (x);
        }


        // Contest_group
        // 

        const Contest_group::Contest_codeSequence& Contest_group::
        getContest_code () const
        {
          return this->contest_code_;
        }

        Contest_group::Contest_codeSequence& Contest_group::
        getContest_code ()
        {
          return this->contest_code_;
        }

        void Contest_group::
        setContest_code (const Contest_codeSequence& s)
        {
          this->contest_code_ = s;
        }

        const Contest_group::CodeType& Contest_group::
        getCode () const
        {
          return this->code_.get ();
        }

        Contest_group::CodeType& Contest_group::
        getCode ()
        {
          return this->code_.get ();
        }

        void Contest_group::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Contest_group::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Contest_group::Custom_codeOptional& Contest_group::
        getCustom_code () const
        {
          return this->custom_code_;
        }

        Contest_group::Custom_codeOptional& Contest_group::
        getCustom_code ()
        {
          return this->custom_code_;
        }

        void Contest_group::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Contest_group::
        setCustom_code (const Custom_codeOptional& x)
        {
          this->custom_code_ = x;
        }

        void Contest_group::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Contest_group::Name_keyType& Contest_group::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Contest_group::Name_keyType& Contest_group::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Contest_group::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Contest_group::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Contest_group::Description_keyType& Contest_group::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Contest_group::Description_keyType& Contest_group::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Contest_group::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Contest_group::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }


        // Ballot_form_layout
        // 

        const Ballot_form_layout::Identification_areaOptional& Ballot_form_layout::
        getIdentification_area () const
        {
          return this->identification_area_;
        }

        Ballot_form_layout::Identification_areaOptional& Ballot_form_layout::
        getIdentification_area ()
        {
          return this->identification_area_;
        }

        void Ballot_form_layout::
        setIdentification_area (const Identification_areaType& x)
        {
          this->identification_area_.set (x);
        }

        void Ballot_form_layout::
        setIdentification_area (const Identification_areaOptional& x)
        {
          this->identification_area_ = x;
        }

        void Ballot_form_layout::
        setIdentification_area (::std::auto_ptr< Identification_areaType > x)
        {
          this->identification_area_.set (x);
        }

        const Ballot_form_layout::Ballot_option_areasSequence& Ballot_form_layout::
        getBallot_option_areas () const
        {
          return this->ballot_option_areas_;
        }

        Ballot_form_layout::Ballot_option_areasSequence& Ballot_form_layout::
        getBallot_option_areas ()
        {
          return this->ballot_option_areas_;
        }

        void Ballot_form_layout::
        setBallot_option_areas (const Ballot_option_areasSequence& s)
        {
          this->ballot_option_areas_ = s;
        }

        const Ballot_form_layout::Image_file_nameType& Ballot_form_layout::
        getImage_file_name () const
        {
          return this->image_file_name_.get ();
        }

        Ballot_form_layout::Image_file_nameType& Ballot_form_layout::
        getImage_file_name ()
        {
          return this->image_file_name_.get ();
        }

        void Ballot_form_layout::
        setImage_file_name (const Image_file_nameType& x)
        {
          this->image_file_name_.set (x);
        }

        void Ballot_form_layout::
        setImage_file_name (::std::auto_ptr< Image_file_nameType > x)
        {
          this->image_file_name_.set (x);
        }

        const Ballot_form_layout::CodeType& Ballot_form_layout::
        getCode () const
        {
          return this->code_.get ();
        }

        Ballot_form_layout::CodeType& Ballot_form_layout::
        getCode ()
        {
          return this->code_.get ();
        }

        void Ballot_form_layout::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Ballot_form_layout::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Ballot_form_layout::Custom_codeType& Ballot_form_layout::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Ballot_form_layout::Custom_codeType& Ballot_form_layout::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Ballot_form_layout::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Ballot_form_layout::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }


        // Ballot_cards
        // 

        const Ballot_cards::Ballot_cardSequence& Ballot_cards::
        getBallot_card () const
        {
          return this->ballot_card_;
        }

        Ballot_cards::Ballot_cardSequence& Ballot_cards::
        getBallot_card ()
        {
          return this->ballot_card_;
        }

        void Ballot_cards::
        setBallot_card (const Ballot_cardSequence& s)
        {
          this->ballot_card_ = s;
        }


        // Type
        // 

        Type::
        Type ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Type::
        Type (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type_literals_[v])
        {
        }

        Type::
        Type (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type::
        Type (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type::
        Type (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type::
        Type (const Type& v,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Type& Type::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type_literals_[v]);

          return *this;
        }


        // Unit
        // 

        Unit::
        Unit ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Unit::
        Unit (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Unit_literals_[v])
        {
        }

        Unit::
        Unit (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Unit::
        Unit (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Unit::
        Unit (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Unit::
        Unit (const Unit& v,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Unit& Unit::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Unit_literals_[v]);

          return *this;
        }


        // Election_mode
        // 

        Election_mode::
        Election_mode ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Election_mode::
        Election_mode (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Election_mode_literals_[v])
        {
        }

        Election_mode::
        Election_mode (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Election_mode::
        Election_mode (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Election_mode::
        Election_mode (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Election_mode::
        Election_mode (const Election_mode& v,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Election_mode& Election_mode::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Election_mode_literals_[v]);

          return *this;
        }


        // Ballot_card
        // 

        const Ballot_card::ContestsType& Ballot_card::
        getContests () const
        {
          return this->contests_.get ();
        }

        Ballot_card::ContestsType& Ballot_card::
        getContests ()
        {
          return this->contests_.get ();
        }

        void Ballot_card::
        setContests (const ContestsType& x)
        {
          this->contests_.set (x);
        }

        void Ballot_card::
        setContests (::std::auto_ptr< ContestsType > x)
        {
          this->contests_.set (x);
        }

        const Ballot_card::CodeType& Ballot_card::
        getCode () const
        {
          return this->code_.get ();
        }

        Ballot_card::CodeType& Ballot_card::
        getCode ()
        {
          return this->code_.get ();
        }

        void Ballot_card::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Ballot_card::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Ballot_card::Custom_codeType& Ballot_card::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Ballot_card::Custom_codeType& Ballot_card::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Ballot_card::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Ballot_card::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Ballot_card::Title_keyType& Ballot_card::
        getTitle_key () const
        {
          return this->title_key_.get ();
        }

        Ballot_card::Title_keyType& Ballot_card::
        getTitle_key ()
        {
          return this->title_key_.get ();
        }

        void Ballot_card::
        setTitle_key (const Title_keyType& x)
        {
          this->title_key_.set (x);
        }

        void Ballot_card::
        setTitle_key (::std::auto_ptr< Title_keyType > x)
        {
          this->title_key_.set (x);
        }

        const Ballot_card::Abstract_keyType& Ballot_card::
        getAbstract_key () const
        {
          return this->abstract_key_.get ();
        }

        Ballot_card::Abstract_keyType& Ballot_card::
        getAbstract_key ()
        {
          return this->abstract_key_.get ();
        }

        void Ballot_card::
        setAbstract_key (const Abstract_keyType& x)
        {
          this->abstract_key_.set (x);
        }

        void Ballot_card::
        setAbstract_key (::std::auto_ptr< Abstract_keyType > x)
        {
          this->abstract_key_.set (x);
        }

        const Ballot_card::Help_keyType& Ballot_card::
        getHelp_key () const
        {
          return this->help_key_.get ();
        }

        Ballot_card::Help_keyType& Ballot_card::
        getHelp_key ()
        {
          return this->help_key_.get ();
        }

        void Ballot_card::
        setHelp_key (const Help_keyType& x)
        {
          this->help_key_.set (x);
        }

        void Ballot_card::
        setHelp_key (::std::auto_ptr< Help_keyType > x)
        {
          this->help_key_.set (x);
        }


        // Contests
        // 

        const Contests::ContestSequence& Contests::
        getContest () const
        {
          return this->contest_;
        }

        Contests::ContestSequence& Contests::
        getContest ()
        {
          return this->contest_;
        }

        void Contests::
        setContest (const ContestSequence& s)
        {
          this->contest_ = s;
        }


        // Contest
        // 

        const Contest::DistrictType& Contest::
        getDistrict () const
        {
          return this->district_.get ();
        }

        Contest::DistrictType& Contest::
        getDistrict ()
        {
          return this->district_.get ();
        }

        void Contest::
        setDistrict (const DistrictType& x)
        {
          this->district_.set (x);
        }

        void Contest::
        setDistrict (::std::auto_ptr< DistrictType > x)
        {
          this->district_.set (x);
        }

        const Contest::Eligibles_optionsType& Contest::
        getEligibles_options () const
        {
          return this->eligibles_options_.get ();
        }

        Contest::Eligibles_optionsType& Contest::
        getEligibles_options ()
        {
          return this->eligibles_options_.get ();
        }

        void Contest::
        setEligibles_options (const Eligibles_optionsType& x)
        {
          this->eligibles_options_.set (x);
        }

        void Contest::
        setEligibles_options (::std::auto_ptr< Eligibles_optionsType > x)
        {
          this->eligibles_options_.set (x);
        }

        const Contest::Display_infoType& Contest::
        getDisplay_info () const
        {
          return this->display_info_.get ();
        }

        Contest::Display_infoType& Contest::
        getDisplay_info ()
        {
          return this->display_info_.get ();
        }

        void Contest::
        setDisplay_info (const Display_infoType& x)
        {
          this->display_info_.set (x);
        }

        void Contest::
        setDisplay_info (::std::auto_ptr< Display_infoType > x)
        {
          this->display_info_.set (x);
        }

        const Contest::CodeType& Contest::
        getCode () const
        {
          return this->code_.get ();
        }

        Contest::CodeType& Contest::
        getCode ()
        {
          return this->code_.get ();
        }

        void Contest::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Contest::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Contest::Custom_codeType& Contest::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Contest::Custom_codeType& Contest::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Contest::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Contest::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Contest::Title_keyType& Contest::
        getTitle_key () const
        {
          return this->title_key_.get ();
        }

        Contest::Title_keyType& Contest::
        getTitle_key ()
        {
          return this->title_key_.get ();
        }

        void Contest::
        setTitle_key (const Title_keyType& x)
        {
          this->title_key_.set (x);
        }

        void Contest::
        setTitle_key (::std::auto_ptr< Title_keyType > x)
        {
          this->title_key_.set (x);
        }

        const Contest::Abstract_keyType& Contest::
        getAbstract_key () const
        {
          return this->abstract_key_.get ();
        }

        Contest::Abstract_keyType& Contest::
        getAbstract_key ()
        {
          return this->abstract_key_.get ();
        }

        void Contest::
        setAbstract_key (const Abstract_keyType& x)
        {
          this->abstract_key_.set (x);
        }

        void Contest::
        setAbstract_key (::std::auto_ptr< Abstract_keyType > x)
        {
          this->abstract_key_.set (x);
        }

        const Contest::Help_keyType& Contest::
        getHelp_key () const
        {
          return this->help_key_.get ();
        }

        Contest::Help_keyType& Contest::
        getHelp_key ()
        {
          return this->help_key_.get ();
        }

        void Contest::
        setHelp_key (const Help_keyType& x)
        {
          this->help_key_.set (x);
        }

        void Contest::
        setHelp_key (::std::auto_ptr< Help_keyType > x)
        {
          this->help_key_.set (x);
        }

        const Contest::Min_votesType& Contest::
        getMin_votes () const
        {
          return this->min_votes_.get ();
        }

        Contest::Min_votesType& Contest::
        getMin_votes ()
        {
          return this->min_votes_.get ();
        }

        void Contest::
        setMin_votes (const Min_votesType& x)
        {
          this->min_votes_.set (x);
        }

        const Contest::Max_votesType& Contest::
        getMax_votes () const
        {
          return this->max_votes_.get ();
        }

        Contest::Max_votesType& Contest::
        getMax_votes ()
        {
          return this->max_votes_.get ();
        }

        void Contest::
        setMax_votes (const Max_votesType& x)
        {
          this->max_votes_.set (x);
        }

        const Contest::Is_questionType& Contest::
        getIs_question () const
        {
          return this->is_question_.get ();
        }

        Contest::Is_questionType& Contest::
        getIs_question ()
        {
          return this->is_question_.get ();
        }

        void Contest::
        setIs_question (const Is_questionType& x)
        {
          this->is_question_.set (x);
        }

        const Contest::Contest_class_codeType& Contest::
        getContest_class_code () const
        {
          return this->contest_class_code_.get ();
        }

        Contest::Contest_class_codeType& Contest::
        getContest_class_code ()
        {
          return this->contest_class_code_.get ();
        }

        void Contest::
        setContest_class_code (const Contest_class_codeType& x)
        {
          this->contest_class_code_.set (x);
        }

        void Contest::
        setContest_class_code (::std::auto_ptr< Contest_class_codeType > x)
        {
          this->contest_class_code_.set (x);
        }


        // District
        // 

        const District::RegionsType& District::
        getRegions () const
        {
          return this->regions_.get ();
        }

        District::RegionsType& District::
        getRegions ()
        {
          return this->regions_.get ();
        }

        void District::
        setRegions (const RegionsType& x)
        {
          this->regions_.set (x);
        }

        void District::
        setRegions (::std::auto_ptr< RegionsType > x)
        {
          this->regions_.set (x);
        }

        const District::Name_keyType& District::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        District::Name_keyType& District::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void District::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void District::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const District::NumberType& District::
        getNumber () const
        {
          return this->number_.get ();
        }

        District::NumberType& District::
        getNumber ()
        {
          return this->number_.get ();
        }

        void District::
        setNumber (const NumberType& x)
        {
          this->number_.set (x);
        }

        const District::Description_keyType& District::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        District::Description_keyType& District::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void District::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void District::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }

        const District::Region_hierarchy_codeType& District::
        getRegion_hierarchy_code () const
        {
          return this->region_hierarchy_code_.get ();
        }

        District::Region_hierarchy_codeType& District::
        getRegion_hierarchy_code ()
        {
          return this->region_hierarchy_code_.get ();
        }

        void District::
        setRegion_hierarchy_code (const Region_hierarchy_codeType& x)
        {
          this->region_hierarchy_code_.set (x);
        }

        void District::
        setRegion_hierarchy_code (::std::auto_ptr< Region_hierarchy_codeType > x)
        {
          this->region_hierarchy_code_.set (x);
        }

        const District::CodeType& District::
        getCode () const
        {
          return this->code_.get ();
        }

        District::CodeType& District::
        getCode ()
        {
          return this->code_.get ();
        }

        void District::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void District::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const District::Custom_codeType& District::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        District::Custom_codeType& District::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void District::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void District::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }


        // Eligibles_options
        // 

        const Eligibles_options::Eligible_optionSequence& Eligibles_options::
        getEligible_option () const
        {
          return this->eligible_option_;
        }

        Eligibles_options::Eligible_optionSequence& Eligibles_options::
        getEligible_option ()
        {
          return this->eligible_option_;
        }

        void Eligibles_options::
        setEligible_option (const Eligible_optionSequence& s)
        {
          this->eligible_option_ = s;
        }


        // Display_info
        // 

        const Display_info::Image_width_height_relationType& Display_info::
        getImage_width_height_relation () const
        {
          return this->image_width_height_relation_.get ();
        }

        Display_info::Image_width_height_relationType& Display_info::
        getImage_width_height_relation ()
        {
          return this->image_width_height_relation_.get ();
        }

        void Display_info::
        setImage_width_height_relation (const Image_width_height_relationType& x)
        {
          this->image_width_height_relation_.set (x);
        }

        const Display_info::Ballot_options_layout_kindType& Display_info::
        getBallot_options_layout_kind () const
        {
          return this->ballot_options_layout_kind_.get ();
        }

        Display_info::Ballot_options_layout_kindType& Display_info::
        getBallot_options_layout_kind ()
        {
          return this->ballot_options_layout_kind_.get ();
        }

        void Display_info::
        setBallot_options_layout_kind (const Ballot_options_layout_kindType& x)
        {
          this->ballot_options_layout_kind_.set (x);
        }

        void Display_info::
        setBallot_options_layout_kind (::std::auto_ptr< Ballot_options_layout_kindType > x)
        {
          this->ballot_options_layout_kind_.set (x);
        }

        const Display_info::Max_amount_of_ballot_options_columnsType& Display_info::
        getMax_amount_of_ballot_options_columns () const
        {
          return this->max_amount_of_ballot_options_columns_.get ();
        }

        Display_info::Max_amount_of_ballot_options_columnsType& Display_info::
        getMax_amount_of_ballot_options_columns ()
        {
          return this->max_amount_of_ballot_options_columns_.get ();
        }

        void Display_info::
        setMax_amount_of_ballot_options_columns (const Max_amount_of_ballot_options_columnsType& x)
        {
          this->max_amount_of_ballot_options_columns_.set (x);
        }

        Display_info::Max_amount_of_ballot_options_columnsType Display_info::
        getMax_amount_of_ballot_options_columnsDefaultValue ()
        {
          return Max_amount_of_ballot_options_columnsType (1LL);
        }

        const Display_info::Force_max_amount_of_ballot_options_columnsType& Display_info::
        getForce_max_amount_of_ballot_options_columns () const
        {
          return this->force_max_amount_of_ballot_options_columns_.get ();
        }

        Display_info::Force_max_amount_of_ballot_options_columnsType& Display_info::
        getForce_max_amount_of_ballot_options_columns ()
        {
          return this->force_max_amount_of_ballot_options_columns_.get ();
        }

        void Display_info::
        setForce_max_amount_of_ballot_options_columns (const Force_max_amount_of_ballot_options_columnsType& x)
        {
          this->force_max_amount_of_ballot_options_columns_.set (x);
        }

        Display_info::Force_max_amount_of_ballot_options_columnsType Display_info::
        getForce_max_amount_of_ballot_options_columnsDefaultValue ()
        {
          return Force_max_amount_of_ballot_options_columnsType (false);
        }

        const Display_info::Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& Display_info::
        getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode () const
        {
          return this->max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.get ();
        }

        Display_info::Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& Display_info::
        getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode ()
        {
          return this->max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.get ();
        }

        void Display_info::
        setMax_amount_of_ballot_options_columns_in_multi_level_selection_mode (const Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& x)
        {
          this->max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (x);
        }

        Display_info::Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType Display_info::
        getMax_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ()
        {
          return Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType (3LL);
        }

        const Display_info::Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& Display_info::
        getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode () const
        {
          return this->force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.get ();
        }

        Display_info::Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& Display_info::
        getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode ()
        {
          return this->force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.get ();
        }

        void Display_info::
        setForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode (const Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& x)
        {
          this->force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (x);
        }

        Display_info::Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType Display_info::
        getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ()
        {
          return Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType (true);
        }

        const Display_info::Multi_level_voting_experience_layout_kindOptional& Display_info::
        getMulti_level_voting_experience_layout_kind () const
        {
          return this->multi_level_voting_experience_layout_kind_;
        }

        Display_info::Multi_level_voting_experience_layout_kindOptional& Display_info::
        getMulti_level_voting_experience_layout_kind ()
        {
          return this->multi_level_voting_experience_layout_kind_;
        }

        void Display_info::
        setMulti_level_voting_experience_layout_kind (const Multi_level_voting_experience_layout_kindType& x)
        {
          this->multi_level_voting_experience_layout_kind_.set (x);
        }

        void Display_info::
        setMulti_level_voting_experience_layout_kind (const Multi_level_voting_experience_layout_kindOptional& x)
        {
          this->multi_level_voting_experience_layout_kind_ = x;
        }

        void Display_info::
        setMulti_level_voting_experience_layout_kind (::std::auto_ptr< Multi_level_voting_experience_layout_kindType > x)
        {
          this->multi_level_voting_experience_layout_kind_.set (x);
        }


        // Regions
        // 

        const Regions::RegionSequence& Regions::
        getRegion () const
        {
          return this->region_;
        }

        Regions::RegionSequence& Regions::
        getRegion ()
        {
          return this->region_;
        }

        void Regions::
        setRegion (const RegionSequence& s)
        {
          this->region_ = s;
        }


        // Eligible_option
        // 

        const Eligible_option::Ballot_optionsType& Eligible_option::
        getBallot_options () const
        {
          return this->ballot_options_.get ();
        }

        Eligible_option::Ballot_optionsType& Eligible_option::
        getBallot_options ()
        {
          return this->ballot_options_.get ();
        }

        void Eligible_option::
        setBallot_options (const Ballot_optionsType& x)
        {
          this->ballot_options_.set (x);
        }

        void Eligible_option::
        setBallot_options (::std::auto_ptr< Ballot_optionsType > x)
        {
          this->ballot_options_.set (x);
        }

        const Eligible_option::CodeType& Eligible_option::
        getCode () const
        {
          return this->code_.get ();
        }

        Eligible_option::CodeType& Eligible_option::
        getCode ()
        {
          return this->code_.get ();
        }

        void Eligible_option::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Eligible_option::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Eligible_option::Custom_codeType& Eligible_option::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Eligible_option::Custom_codeType& Eligible_option::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Eligible_option::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Eligible_option::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Eligible_option::Ballot_name_keyType& Eligible_option::
        getBallot_name_key () const
        {
          return this->ballot_name_key_.get ();
        }

        Eligible_option::Ballot_name_keyType& Eligible_option::
        getBallot_name_key ()
        {
          return this->ballot_name_key_.get ();
        }

        void Eligible_option::
        setBallot_name_key (const Ballot_name_keyType& x)
        {
          this->ballot_name_key_.set (x);
        }

        void Eligible_option::
        setBallot_name_key (::std::auto_ptr< Ballot_name_keyType > x)
        {
          this->ballot_name_key_.set (x);
        }

        const Eligible_option::Candidate_idType& Eligible_option::
        getCandidate_id () const
        {
          return this->candidate_id_.get ();
        }

        Eligible_option::Candidate_idType& Eligible_option::
        getCandidate_id ()
        {
          return this->candidate_id_.get ();
        }

        void Eligible_option::
        setCandidate_id (const Candidate_idType& x)
        {
          this->candidate_id_.set (x);
        }

        void Eligible_option::
        setCandidate_id (::std::auto_ptr< Candidate_idType > x)
        {
          this->candidate_id_.set (x);
        }

        const Eligible_option::Parent_codeType& Eligible_option::
        getParent_code () const
        {
          return this->parent_code_.get ();
        }

        Eligible_option::Parent_codeType& Eligible_option::
        getParent_code ()
        {
          return this->parent_code_.get ();
        }

        void Eligible_option::
        setParent_code (const Parent_codeType& x)
        {
          this->parent_code_.set (x);
        }

        void Eligible_option::
        setParent_code (::std::auto_ptr< Parent_codeType > x)
        {
          this->parent_code_.set (x);
        }

        const Eligible_option::Sub_level_eligible_amountOptional& Eligible_option::
        getSub_level_eligible_amount () const
        {
          return this->sub_level_eligible_amount_;
        }

        Eligible_option::Sub_level_eligible_amountOptional& Eligible_option::
        getSub_level_eligible_amount ()
        {
          return this->sub_level_eligible_amount_;
        }

        void Eligible_option::
        setSub_level_eligible_amount (const Sub_level_eligible_amountType& x)
        {
          this->sub_level_eligible_amount_.set (x);
        }

        void Eligible_option::
        setSub_level_eligible_amount (const Sub_level_eligible_amountOptional& x)
        {
          this->sub_level_eligible_amount_ = x;
        }

        const Eligible_option::Sub_level_order_indexOptional& Eligible_option::
        getSub_level_order_index () const
        {
          return this->sub_level_order_index_;
        }

        Eligible_option::Sub_level_order_indexOptional& Eligible_option::
        getSub_level_order_index ()
        {
          return this->sub_level_order_index_;
        }

        void Eligible_option::
        setSub_level_order_index (const Sub_level_order_indexType& x)
        {
          this->sub_level_order_index_.set (x);
        }

        void Eligible_option::
        setSub_level_order_index (const Sub_level_order_indexOptional& x)
        {
          this->sub_level_order_index_ = x;
        }


        // Ballot_options_layout_kind
        // 

        Ballot_options_layout_kind::
        Ballot_options_layout_kind ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Ballot_options_layout_kind_literals_[v])
        {
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const Ballot_options_layout_kind& v,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Ballot_options_layout_kind& Ballot_options_layout_kind::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Ballot_options_layout_kind_literals_[v]);

          return *this;
        }


        // RegionTag
        // 

        const RegionTag::CodeType& RegionTag::
        getCode () const
        {
          return this->code_.get ();
        }

        RegionTag::CodeType& RegionTag::
        getCode ()
        {
          return this->code_.get ();
        }

        void RegionTag::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void RegionTag::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }


        // Ballot_options
        // 

        const Ballot_options::Ballot_optionSequence& Ballot_options::
        getBallot_option () const
        {
          return this->ballot_option_;
        }

        Ballot_options::Ballot_optionSequence& Ballot_options::
        getBallot_option ()
        {
          return this->ballot_option_;
        }

        void Ballot_options::
        setBallot_option (const Ballot_optionSequence& s)
        {
          this->ballot_option_ = s;
        }


        // Ballot_option
        // 

        const Ballot_option::Pad_position_groupOptional& Ballot_option::
        getPad_position_group () const
        {
          return this->pad_position_group_;
        }

        Ballot_option::Pad_position_groupOptional& Ballot_option::
        getPad_position_group ()
        {
          return this->pad_position_group_;
        }

        void Ballot_option::
        setPad_position_group (const Pad_position_groupType& x)
        {
          this->pad_position_group_.set (x);
        }

        void Ballot_option::
        setPad_position_group (const Pad_position_groupOptional& x)
        {
          this->pad_position_group_ = x;
        }

        void Ballot_option::
        setPad_position_group (::std::auto_ptr< Pad_position_groupType > x)
        {
          this->pad_position_group_.set (x);
        }

        const Ballot_option::PartyType& Ballot_option::
        getParty () const
        {
          return this->party_.get ();
        }

        Ballot_option::PartyType& Ballot_option::
        getParty ()
        {
          return this->party_.get ();
        }

        void Ballot_option::
        setParty (const PartyType& x)
        {
          this->party_.set (x);
        }

        void Ballot_option::
        setParty (::std::auto_ptr< PartyType > x)
        {
          this->party_.set (x);
        }

        const Ballot_option::CodeType& Ballot_option::
        getCode () const
        {
          return this->code_.get ();
        }

        Ballot_option::CodeType& Ballot_option::
        getCode ()
        {
          return this->code_.get ();
        }

        void Ballot_option::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Ballot_option::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Ballot_option::Custom_codeType& Ballot_option::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Ballot_option::Custom_codeType& Ballot_option::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Ballot_option::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Ballot_option::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Ballot_option::TypeType& Ballot_option::
        getType () const
        {
          return this->type_.get ();
        }

        Ballot_option::TypeType& Ballot_option::
        getType ()
        {
          return this->type_.get ();
        }

        void Ballot_option::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void Ballot_option::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const Ballot_option::Image_file_nameOptional& Ballot_option::
        getImage_file_name () const
        {
          return this->image_file_name_;
        }

        Ballot_option::Image_file_nameOptional& Ballot_option::
        getImage_file_name ()
        {
          return this->image_file_name_;
        }

        void Ballot_option::
        setImage_file_name (const Image_file_nameType& x)
        {
          this->image_file_name_.set (x);
        }

        void Ballot_option::
        setImage_file_name (const Image_file_nameOptional& x)
        {
          this->image_file_name_ = x;
        }

        void Ballot_option::
        setImage_file_name (::std::auto_ptr< Image_file_nameType > x)
        {
          this->image_file_name_.set (x);
        }

        const Ballot_option::Image_for_vote_receipt_file_nameOptional& Ballot_option::
        getImage_for_vote_receipt_file_name () const
        {
          return this->image_for_vote_receipt_file_name_;
        }

        Ballot_option::Image_for_vote_receipt_file_nameOptional& Ballot_option::
        getImage_for_vote_receipt_file_name ()
        {
          return this->image_for_vote_receipt_file_name_;
        }

        void Ballot_option::
        setImage_for_vote_receipt_file_name (const Image_for_vote_receipt_file_nameType& x)
        {
          this->image_for_vote_receipt_file_name_.set (x);
        }

        void Ballot_option::
        setImage_for_vote_receipt_file_name (const Image_for_vote_receipt_file_nameOptional& x)
        {
          this->image_for_vote_receipt_file_name_ = x;
        }

        void Ballot_option::
        setImage_for_vote_receipt_file_name (::std::auto_ptr< Image_for_vote_receipt_file_nameType > x)
        {
          this->image_for_vote_receipt_file_name_.set (x);
        }

        const Ballot_option::Tally_positionType& Ballot_option::
        getTally_position () const
        {
          return this->tally_position_.get ();
        }

        Ballot_option::Tally_positionType& Ballot_option::
        getTally_position ()
        {
          return this->tally_position_.get ();
        }

        void Ballot_option::
        setTally_position (const Tally_positionType& x)
        {
          this->tally_position_.set (x);
        }

        const Ballot_option::Contest_code_refOptional& Ballot_option::
        getContest_code_ref () const
        {
          return this->contest_code_ref_;
        }

        Ballot_option::Contest_code_refOptional& Ballot_option::
        getContest_code_ref ()
        {
          return this->contest_code_ref_;
        }

        void Ballot_option::
        setContest_code_ref (const Contest_code_refType& x)
        {
          this->contest_code_ref_.set (x);
        }

        void Ballot_option::
        setContest_code_ref (const Contest_code_refOptional& x)
        {
          this->contest_code_ref_ = x;
        }

        void Ballot_option::
        setContest_code_ref (::std::auto_ptr< Contest_code_refType > x)
        {
          this->contest_code_ref_.set (x);
        }

        const Ballot_option::CategoryType& Ballot_option::
        getCategory () const
        {
          return this->category_.get ();
        }

        Ballot_option::CategoryType& Ballot_option::
        getCategory ()
        {
          return this->category_.get ();
        }

        void Ballot_option::
        setCategory (const CategoryType& x)
        {
          this->category_.set (x);
        }

        void Ballot_option::
        setCategory (::std::auto_ptr< CategoryType > x)
        {
          this->category_.set (x);
        }


        // Pad_position_group
        // 

        const Pad_position_group::Pad_positionSequence& Pad_position_group::
        getPad_position () const
        {
          return this->pad_position_;
        }

        Pad_position_group::Pad_positionSequence& Pad_position_group::
        getPad_position ()
        {
          return this->pad_position_;
        }

        void Pad_position_group::
        setPad_position (const Pad_positionSequence& s)
        {
          this->pad_position_ = s;
        }


        // Party
        // 

        const Party::NameOptional& Party::
        getName () const
        {
          return this->name_;
        }

        Party::NameOptional& Party::
        getName ()
        {
          return this->name_;
        }

        void Party::
        setName (const NameType& x)
        {
          this->name_.set (x);
        }

        void Party::
        setName (const NameOptional& x)
        {
          this->name_ = x;
        }

        void Party::
        setName (::std::auto_ptr< NameType > x)
        {
          this->name_.set (x);
        }

        const Party::AbbreviationOptional& Party::
        getAbbreviation () const
        {
          return this->abbreviation_;
        }

        Party::AbbreviationOptional& Party::
        getAbbreviation ()
        {
          return this->abbreviation_;
        }

        void Party::
        setAbbreviation (const AbbreviationType& x)
        {
          this->abbreviation_.set (x);
        }

        void Party::
        setAbbreviation (const AbbreviationOptional& x)
        {
          this->abbreviation_ = x;
        }

        void Party::
        setAbbreviation (::std::auto_ptr< AbbreviationType > x)
        {
          this->abbreviation_.set (x);
        }

        const Party::TypeOptional& Party::
        getType () const
        {
          return this->type_;
        }

        Party::TypeOptional& Party::
        getType ()
        {
          return this->type_;
        }

        void Party::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void Party::
        setType (const TypeOptional& x)
        {
          this->type_ = x;
        }

        void Party::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const Party::CodeType& Party::
        getCode () const
        {
          return this->code_.get ();
        }

        Party::CodeType& Party::
        getCode ()
        {
          return this->code_.get ();
        }

        void Party::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Party::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Party::Custom_codeType& Party::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Party::Custom_codeType& Party::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Party::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Party::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Party::Image_file_nameOptional& Party::
        getImage_file_name () const
        {
          return this->image_file_name_;
        }

        Party::Image_file_nameOptional& Party::
        getImage_file_name ()
        {
          return this->image_file_name_;
        }

        void Party::
        setImage_file_name (const Image_file_nameType& x)
        {
          this->image_file_name_.set (x);
        }

        void Party::
        setImage_file_name (const Image_file_nameOptional& x)
        {
          this->image_file_name_ = x;
        }

        void Party::
        setImage_file_name (::std::auto_ptr< Image_file_nameType > x)
        {
          this->image_file_name_.set (x);
        }


        // Type1
        // 

        Type1::
        Type1 ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Type1::
        Type1 (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type1_literals_[v])
        {
        }

        Type1::
        Type1 (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type1::
        Type1 (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type1::
        Type1 (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type1::
        Type1 (const Type1& v,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Type1& Type1::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type1_literals_[v]);

          return *this;
        }


        // Category
        // 

        Category::
        Category ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Category::
        Category (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Category_literals_[v])
        {
        }

        Category::
        Category (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Category::
        Category (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Category::
        Category (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Category::
        Category (const Category& v,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Category& Category::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Category_literals_[v]);

          return *this;
        }


        // Type2
        // 

        Type2::
        Type2 ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::String ()
        {
        }

        Type2::
        Type2 (Value v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type2_literals_[v])
        {
        }

        Type2::
        Type2 (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type2::
        Type2 (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type2::
        Type2 (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v)
        {
        }

        Type2::
        Type2 (const Type2& v,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (v, f, c)
        {
        }

        Type2& Type2::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionTypes::String (_xsd_Type2_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        // Ballot_form_area
        //

        Ballot_form_area::
        Ballot_form_area ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          id_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          x_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          y_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          width_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          height_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_area::
        Ballot_form_area (const IdType& id,
                          const XType& x,
                          const YType& y,
                          const WidthType& width,
                          const HeightType& height)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          id_ (id, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          x_ (x, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          y_ (y, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          width_ (width, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          height_ (height, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_area::
        Ballot_form_area (const Ballot_form_area& x,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          id_ (x.id_, f, this),
          x_ (x.x_, f, this),
          y_ (x.y_, f, this),
          width_ (x.width_, f, this),
          height_ (x.height_, f, this)
        {
        }

        Ballot_form_area::
        Ballot_form_area (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          id_ (f, this),
          x_ (f, this),
          y_ (f, this),
          width_ (f, this),
          height_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Ballot_form_area::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "id" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< IdType > r (
                IdTraits::create (i, f, this));

              this->id_.set (r);
              continue;
            }

            if (n.name () == "x" && n.namespace_ ().empty ())
            {
              this->x_.set (XTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "y" && n.namespace_ ().empty ())
            {
              this->y_.set (YTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "width" && n.namespace_ ().empty ())
            {
              this->width_.set (WidthTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "height" && n.namespace_ ().empty ())
            {
              this->height_.set (HeightTraits::create (i, f, this));
              continue;
            }
          }

          if (!id_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "id",
              "");
          }

          if (!x_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "x",
              "");
          }

          if (!y_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "y",
              "");
          }

          if (!width_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "width",
              "");
          }

          if (!height_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "height",
              "");
          }
        }

        Ballot_form_area* Ballot_form_area::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_form_area (*this, f, c);
        }

        Ballot_form_area::
        ~Ballot_form_area ()
        {
        }

        bool
        operator== (const Ballot_form_area& x, const Ballot_form_area& y)
        {
          if (!(x.getId () == y.getId ()))
            return false;

          if (!(x.getX () == y.getX ()))
            return false;

          if (!(x.getY () == y.getY ()))
            return false;

          if (!(x.getWidth () == y.getWidth ()))
            return false;

          if (!(x.getHeight () == y.getHeight ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_form_area& x, const Ballot_form_area& y)
        {
          return !(x == y);
        }

        // Ballot_form_identification_area
        //

        Ballot_form_identification_area::
        Ballot_form_identification_area ()
        : ::Smartmatic::SAES::Voting::Election::Ballot_form_area (),
          part_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          parts_pattern_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_identification_area::
        Ballot_form_identification_area (const IdType& id,
                                         const XType& x,
                                         const YType& y,
                                         const WidthType& width,
                                         const HeightType& height,
                                         const Parts_patternType& parts_pattern)
        : ::Smartmatic::SAES::Voting::Election::Ballot_form_area (id,
                                                                  x,
                                                                  y,
                                                                  width,
                                                                  height),
          part_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          parts_pattern_ (parts_pattern, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_identification_area::
        Ballot_form_identification_area (const Ballot_form_identification_area& x,
                                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::Election::Ballot_form_area (x, f, c),
          part_ (x.part_, f, this),
          parts_pattern_ (x.parts_pattern_, f, this)
        {
        }

        Ballot_form_identification_area::
        Ballot_form_identification_area (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::Election::Ballot_form_area (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          part_ (f, this),
          parts_pattern_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Ballot_form_identification_area::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Election::Ballot_form_area::parse (p, f);

          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // part
            //
            if (n.name () == "part" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< PartType > r (
                PartTraits::create (i, f, this));

              this->part_.push_back (r);
              continue;
            }

            break;
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "parts-pattern" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Parts_patternType > r (
                Parts_patternTraits::create (i, f, this));

              this->parts_pattern_.set (r);
              continue;
            }
          }

          if (!parts_pattern_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "parts-pattern",
              "");
          }
        }

        Ballot_form_identification_area* Ballot_form_identification_area::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_form_identification_area (*this, f, c);
        }

        Ballot_form_identification_area::
        ~Ballot_form_identification_area ()
        {
        }

        bool
        operator== (const Ballot_form_identification_area& x, const Ballot_form_identification_area& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Election::Ballot_form_area& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Election::Ballot_form_area& > (y)))
            return false;

          if (!(x.getPart () == y.getPart ()))
            return false;

          if (!(x.getParts_pattern () == y.getParts_pattern ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_form_identification_area& x, const Ballot_form_identification_area& y)
        {
          return !(x == y);
        }

        // Election
        //

        Election::
        Election ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballots_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          languages_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          xml_schemas_necessary_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_classes_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_groups_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_form_layouts_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          hash_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          electoral_organization_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          voting_time_out_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          audio_voting_time_out_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Election::
        Election (const BallotsType& ballots,
                  const Xml_schemas_necessaryType& xml_schemas_necessary,
                  const Contest_classesType& contest_classes,
                  const Contest_groupsType& contest_groups,
                  const Name_keyType& name_key,
                  const Electoral_organizationType& electoral_organization,
                  const Voting_time_outType& voting_time_out,
                  const CodeType& code,
                  const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballots_ (ballots, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          languages_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          xml_schemas_necessary_ (xml_schemas_necessary, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_classes_ (contest_classes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_groups_ (contest_groups, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_form_layouts_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          hash_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          electoral_organization_ (electoral_organization, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          voting_time_out_ (voting_time_out, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          audio_voting_time_out_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Election::
        Election (::std::auto_ptr< BallotsType >& ballots,
                  ::std::auto_ptr< Xml_schemas_necessaryType >& xml_schemas_necessary,
                  ::std::auto_ptr< Contest_classesType >& contest_classes,
                  ::std::auto_ptr< Contest_groupsType >& contest_groups,
                  const Name_keyType& name_key,
                  const Electoral_organizationType& electoral_organization,
                  const Voting_time_outType& voting_time_out,
                  const CodeType& code,
                  const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballots_ (ballots, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          languages_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          xml_schemas_necessary_ (xml_schemas_necessary, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_classes_ (contest_classes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_groups_ (contest_groups, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_form_layouts_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          hash_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          electoral_organization_ (electoral_organization, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          voting_time_out_ (voting_time_out, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          audio_voting_time_out_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Election::
        Election (const Election& x,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballots_ (x.ballots_, f, this),
          languages_ (x.languages_, f, this),
          xml_schemas_necessary_ (x.xml_schemas_necessary_, f, this),
          contest_classes_ (x.contest_classes_, f, this),
          contest_groups_ (x.contest_groups_, f, this),
          ballot_form_layouts_ (x.ballot_form_layouts_, f, this),
          hash_ (x.hash_, f, this),
          name_key_ (x.name_key_, f, this),
          electoral_organization_ (x.electoral_organization_, f, this),
          voting_time_out_ (x.voting_time_out_, f, this),
          audio_voting_time_out_ (x.audio_voting_time_out_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this)
        {
        }

        Election::
        Election (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballots_ (f, this),
          languages_ (f, this),
          xml_schemas_necessary_ (f, this),
          contest_classes_ (f, this),
          contest_groups_ (f, this),
          ballot_form_layouts_ (f, this),
          hash_ (f, this),
          name_key_ (f, this),
          electoral_organization_ (f, this),
          voting_time_out_ (f, this),
          audio_voting_time_out_ (f, this),
          code_ (f, this),
          custom_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Election::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballots
            //
            if (n.name () == "ballots" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< BallotsType > r (
                BallotsTraits::create (i, f, this));

              if (!ballots_.present ())
              {
                this->ballots_.set (r);
                continue;
              }
            }

            // languages
            //
            if (n.name () == "languages" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< LanguagesType > r (
                LanguagesTraits::create (i, f, this));

              if (!this->languages_)
              {
                this->languages_.set (r);
                continue;
              }
            }

            // xml-schemas-necessary
            //
            if (n.name () == "xml-schemas-necessary" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Xml_schemas_necessaryType > r (
                Xml_schemas_necessaryTraits::create (i, f, this));

              if (!xml_schemas_necessary_.present ())
              {
                this->xml_schemas_necessary_.set (r);
                continue;
              }
            }

            // contest-classes
            //
            if (n.name () == "contest-classes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Contest_classesType > r (
                Contest_classesTraits::create (i, f, this));

              if (!contest_classes_.present ())
              {
                this->contest_classes_.set (r);
                continue;
              }
            }

            // contest-groups
            //
            if (n.name () == "contest-groups" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Contest_groupsType > r (
                Contest_groupsTraits::create (i, f, this));

              if (!contest_groups_.present ())
              {
                this->contest_groups_.set (r);
                continue;
              }
            }

            // ballot-form-layouts
            //
            if (n.name () == "ballot-form-layouts" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_form_layoutsType > r (
                Ballot_form_layoutsTraits::create (i, f, this));

              if (!this->ballot_form_layouts_)
              {
                this->ballot_form_layouts_.set (r);
                continue;
              }
            }

            break;
          }

          if (!ballots_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ballots",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          if (!xml_schemas_necessary_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "xml-schemas-necessary",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          if (!contest_classes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "contest-classes",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          if (!contest_groups_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "contest-groups",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "hash" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< HashType > r (
                HashTraits::create (i, f, this));

              this->hash_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "electoral-organization" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Electoral_organizationType > r (
                Electoral_organizationTraits::create (i, f, this));

              this->electoral_organization_.set (r);
              continue;
            }

            if (n.name () == "voting-time-out" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_time_outType > r (
                Voting_time_outTraits::create (i, f, this));

              this->voting_time_out_.set (r);
              continue;
            }

            if (n.name () == "audio-voting-time-out" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Audio_voting_time_outType > r (
                Audio_voting_time_outTraits::create (i, f, this));

              this->audio_voting_time_out_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!electoral_organization_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "electoral-organization",
              "");
          }

          if (!voting_time_out_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-time-out",
              "");
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }
        }

        Election* Election::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Election (*this, f, c);
        }

        Election::
        ~Election ()
        {
        }

        bool
        operator== (const Election& x, const Election& y)
        {
          if (!(x.getBallots () == y.getBallots ()))
            return false;

          if (!(x.getLanguages () == y.getLanguages ()))
            return false;

          if (!(x.getXml_schemas_necessary () == y.getXml_schemas_necessary ()))
            return false;

          if (!(x.getContest_classes () == y.getContest_classes ()))
            return false;

          if (!(x.getContest_groups () == y.getContest_groups ()))
            return false;

          if (!(x.getBallot_form_layouts () == y.getBallot_form_layouts ()))
            return false;

          if (!(x.getHash () == y.getHash ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getElectoral_organization () == y.getElectoral_organization ()))
            return false;

          if (!(x.getVoting_time_out () == y.getVoting_time_out ()))
            return false;

          if (!(x.getAudio_voting_time_out () == y.getAudio_voting_time_out ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Election& x, const Election& y)
        {
          return !(x == y);
        }

        // Part
        //

        Part::
        Part (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Part_convert ();
        }

        Part::
        Part (const ::xercesc::DOMAttr& a,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Part_convert ();
        }

        Part::
        Part (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Part_convert ();
        }

        Part* Part::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Part (*this, f, c);
        }

        Part::Value Part::
        _xsd_Part_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Part_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Part_indexes_,
                            _xsd_Part_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_Part_indexes_ + 5 || _xsd_Part_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Part::
        _xsd_Part_literals_[5] =
        {
          "BALLOT_ID",
          "INDEX",
          "COUNT",
          "LOGICAL_VOTER_GROUP",
          "LAYOUT_CODE"
        };

        const Part::Value Part::
        _xsd_Part_indexes_[5] =
        {
          ::Smartmatic::SAES::Voting::Election::Part::ELECTION_BALLOT_ID,
          ::Smartmatic::SAES::Voting::Election::Part::ELECTION_COUNT,
          ::Smartmatic::SAES::Voting::Election::Part::ELECTION_INDEX,
          ::Smartmatic::SAES::Voting::Election::Part::ELECTION_LAYOUT_CODE,
          ::Smartmatic::SAES::Voting::Election::Part::ELECTION_LOGICAL_VOTER_GROUP
        };

        // Ballots
        //

        Ballots::
        Ballots ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballots::
        Ballots (const Ballots& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_ (x.ballot_, f, this)
        {
        }

        Ballots::
        Ballots (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Ballots::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot
            //
            if (n.name () == "ballot" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< BallotType > r (
                BallotTraits::create (i, f, this));

              this->ballot_.push_back (r);
              continue;
            }

            break;
          }
        }

        Ballots* Ballots::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballots (*this, f, c);
        }

        Ballots::
        ~Ballots ()
        {
        }

        bool
        operator== (const Ballots& x, const Ballots& y)
        {
          if (!(x.getBallot () == y.getBallot ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballots& x, const Ballots& y)
        {
          return !(x == y);
        }

        // Xml_schemas_necessary
        //

        Xml_schemas_necessary::
        Xml_schemas_necessary ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          transmission_package_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Xml_schemas_necessary::
        Xml_schemas_necessary (const Transmission_packageType& transmission_package)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          transmission_package_ (transmission_package, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Xml_schemas_necessary::
        Xml_schemas_necessary (const Xml_schemas_necessary& x,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          transmission_package_ (x.transmission_package_, f, this)
        {
        }

        Xml_schemas_necessary::
        Xml_schemas_necessary (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          transmission_package_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Xml_schemas_necessary::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // transmission-package
            //
            if (n.name () == "transmission-package" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Transmission_packageType > r (
                Transmission_packageTraits::create (i, f, this));

              if (!transmission_package_.present ())
              {
                this->transmission_package_.set (r);
                continue;
              }
            }

            break;
          }

          if (!transmission_package_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "transmission-package",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }
        }

        Xml_schemas_necessary* Xml_schemas_necessary::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Xml_schemas_necessary (*this, f, c);
        }

        Xml_schemas_necessary::
        ~Xml_schemas_necessary ()
        {
        }

        bool
        operator== (const Xml_schemas_necessary& x, const Xml_schemas_necessary& y)
        {
          if (!(x.getTransmission_package () == y.getTransmission_package ()))
            return false;

          return true;
        }

        bool
        operator!= (const Xml_schemas_necessary& x, const Xml_schemas_necessary& y)
        {
          return !(x == y);
        }

        // Contest_classes
        //

        Contest_classes::
        Contest_classes ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          comparator_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_class_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          class__ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_classes::
        Contest_classes (const Contest_classes& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          comparator_ (x.comparator_, f, this),
          contest_class_ (x.contest_class_, f, this),
          class__ (x.class__, f, this)
        {
        }

        Contest_classes::
        Contest_classes (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          comparator_ (f, this),
          contest_class_ (f, this),
          class__ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Contest_classes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // comparator
            //
            if (n.name () == "comparator" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< ComparatorType > r (
                ComparatorTraits::create (i, f, this));

              if (!this->comparator_)
              {
                this->comparator_.set (r);
                continue;
              }
            }

            // contest-class
            //
            if (n.name () == "contest-class" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Contest_classType > r (
                Contest_classTraits::create (i, f, this));

              this->contest_class_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "class" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ClassType > r (
                ClassTraits::create (i, f, this));

              this->class__.set (r);
              continue;
            }
          }
        }

        Contest_classes* Contest_classes::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contest_classes (*this, f, c);
        }

        Contest_classes::
        ~Contest_classes ()
        {
        }

        bool
        operator== (const Contest_classes& x, const Contest_classes& y)
        {
          if (!(x.getComparator () == y.getComparator ()))
            return false;

          if (!(x.getContest_class () == y.getContest_class ()))
            return false;

          if (!(x.getClass () == y.getClass ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contest_classes& x, const Contest_classes& y)
        {
          return !(x == y);
        }

        // Contest_groups
        //

        Contest_groups::
        Contest_groups ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contest_group_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_groups::
        Contest_groups (const Contest_groups& x,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          contest_group_ (x.contest_group_, f, this)
        {
        }

        Contest_groups::
        Contest_groups (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          contest_group_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Contest_groups::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // contest-group
            //
            if (n.name () == "contest-group" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Contest_groupType > r (
                Contest_groupTraits::create (i, f, this));

              this->contest_group_.push_back (r);
              continue;
            }

            break;
          }
        }

        Contest_groups* Contest_groups::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contest_groups (*this, f, c);
        }

        Contest_groups::
        ~Contest_groups ()
        {
        }

        bool
        operator== (const Contest_groups& x, const Contest_groups& y)
        {
          if (!(x.getContest_group () == y.getContest_group ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contest_groups& x, const Contest_groups& y)
        {
          return !(x == y);
        }

        // Ballot_form_layouts
        //

        Ballot_form_layouts::
        Ballot_form_layouts ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_form_layout_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          identification_area_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_layouts::
        Ballot_form_layouts (const Ballot_form_layouts& x,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_form_layout_ (x.ballot_form_layout_, f, this),
          identification_area_ (x.identification_area_, f, this)
        {
        }

        Ballot_form_layouts::
        Ballot_form_layouts (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_form_layout_ (f, this),
          identification_area_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Ballot_form_layouts::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot-form-layout
            //
            if (n.name () == "ballot-form-layout" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_form_layoutType > r (
                Ballot_form_layoutTraits::create (i, f, this));

              this->ballot_form_layout_.push_back (r);
              continue;
            }

            // identification-area
            //
            if (n.name () == "identification-area" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Identification_areaType > r (
                Identification_areaTraits::create (i, f, this));

              if (!this->identification_area_)
              {
                this->identification_area_.set (r);
                continue;
              }
            }

            break;
          }
        }

        Ballot_form_layouts* Ballot_form_layouts::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_form_layouts (*this, f, c);
        }

        Ballot_form_layouts::
        ~Ballot_form_layouts ()
        {
        }

        bool
        operator== (const Ballot_form_layouts& x, const Ballot_form_layouts& y)
        {
          if (!(x.getBallot_form_layout () == y.getBallot_form_layout ()))
            return false;

          if (!(x.getIdentification_area () == y.getIdentification_area ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_form_layouts& x, const Ballot_form_layouts& y)
        {
          return !(x == y);
        }

        // Voting_time_out
        //

        Voting_time_out::
        Voting_time_out ()
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > ()
        {
        }

        Voting_time_out::
        Voting_time_out (const ::Smartmatic::SAES::Voting::ElectionTypes::Integer& _xsd_Integer_base)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (_xsd_Integer_base)
        {
        }

        Voting_time_out::
        Voting_time_out (const Voting_time_out& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (x, f, c)
        {
        }

        Voting_time_out::
        Voting_time_out (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (e, f, c)
        {
        }

        Voting_time_out::
        Voting_time_out (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (a, f, c)
        {
        }

        Voting_time_out::
        Voting_time_out (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (s, e, f, c)
        {
        }

        Voting_time_out* Voting_time_out::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Voting_time_out (*this, f, c);
        }

        Voting_time_out::
        ~Voting_time_out ()
        {
        }

        // Audio_voting_time_out
        //

        Audio_voting_time_out::
        Audio_voting_time_out ()
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > ()
        {
        }

        Audio_voting_time_out::
        Audio_voting_time_out (const ::Smartmatic::SAES::Voting::ElectionTypes::Integer& _xsd_Integer_base)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (_xsd_Integer_base)
        {
        }

        Audio_voting_time_out::
        Audio_voting_time_out (const Audio_voting_time_out& x,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (x, f, c)
        {
        }

        Audio_voting_time_out::
        Audio_voting_time_out (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (e, f, c)
        {
        }

        Audio_voting_time_out::
        Audio_voting_time_out (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (a, f, c)
        {
        }

        Audio_voting_time_out::
        Audio_voting_time_out (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType > (s, e, f, c)
        {
        }

        Audio_voting_time_out* Audio_voting_time_out::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Audio_voting_time_out (*this, f, c);
        }

        Audio_voting_time_out::
        ~Audio_voting_time_out ()
        {
        }

        // Ballot
        //

        Ballot::
        Ballot ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_cards_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot::
        Ballot (const Ballot_cardsType& ballot_cards,
                const CodeType& code,
                const Custom_codeType& custom_code,
                const Title_keyType& title_key,
                const Abstract_keyType& abstract_key,
                const Help_keyType& help_key)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_cards_ (ballot_cards, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot::
        Ballot (::std::auto_ptr< Ballot_cardsType >& ballot_cards,
                const CodeType& code,
                const Custom_codeType& custom_code,
                const Title_keyType& title_key,
                const Abstract_keyType& abstract_key,
                const Help_keyType& help_key)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_cards_ (ballot_cards, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot::
        Ballot (const Ballot& x,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_cards_ (x.ballot_cards_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          title_key_ (x.title_key_, f, this),
          abstract_key_ (x.abstract_key_, f, this),
          help_key_ (x.help_key_, f, this)
        {
        }

        Ballot::
        Ballot (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_cards_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          title_key_ (f, this),
          abstract_key_ (f, this),
          help_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Ballot::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot-cards
            //
            if (n.name () == "ballot-cards" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_cardsType > r (
                Ballot_cardsTraits::create (i, f, this));

              if (!ballot_cards_.present ())
              {
                this->ballot_cards_.set (r);
                continue;
              }
            }

            break;
          }

          if (!ballot_cards_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ballot-cards",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "title-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Title_keyType > r (
                Title_keyTraits::create (i, f, this));

              this->title_key_.set (r);
              continue;
            }

            if (n.name () == "abstract-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Abstract_keyType > r (
                Abstract_keyTraits::create (i, f, this));

              this->abstract_key_.set (r);
              continue;
            }

            if (n.name () == "help-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Help_keyType > r (
                Help_keyTraits::create (i, f, this));

              this->help_key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!title_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "title-key",
              "");
          }

          if (!abstract_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "abstract-key",
              "");
          }

          if (!help_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "help-key",
              "");
          }
        }

        Ballot* Ballot::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot (*this, f, c);
        }

        Ballot::
        ~Ballot ()
        {
        }

        bool
        operator== (const Ballot& x, const Ballot& y)
        {
          if (!(x.getBallot_cards () == y.getBallot_cards ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getTitle_key () == y.getTitle_key ()))
            return false;

          if (!(x.getAbstract_key () == y.getAbstract_key ()))
            return false;

          if (!(x.getHelp_key () == y.getHelp_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot& x, const Ballot& y)
        {
          return !(x == y);
        }

        // Comparator
        //

        Comparator::
        Comparator ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          class__ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Comparator::
        Comparator (const Comparator& x,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          class__ (x.class__, f, this)
        {
        }

        Comparator::
        Comparator (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          class__ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Comparator::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "class" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ClassType > r (
                ClassTraits::create (i, f, this));

              this->class__.set (r);
              continue;
            }
          }
        }

        Comparator* Comparator::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Comparator (*this, f, c);
        }

        Comparator::
        ~Comparator ()
        {
        }

        bool
        operator== (const Comparator& x, const Comparator& y)
        {
          if (!(x.getClass () == y.getClass ()))
            return false;

          return true;
        }

        bool
        operator!= (const Comparator& x, const Comparator& y)
        {
          return !(x == y);
        }

        // Contest_class
        //

        Contest_class::
        Contest_class ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          stand_count_chief_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          period_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          unit_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          election_mode_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_class::
        Contest_class (const CodeType& code,
                       const Name_keyType& name_key,
                       const Description_keyType& description_key,
                       const TypeType& type,
                       const Stand_count_chiefType& stand_count_chief,
                       const PeriodType& period,
                       const UnitType& unit,
                       const Election_modeType& election_mode)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          stand_count_chief_ (stand_count_chief, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          period_ (period, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          unit_ (unit, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          election_mode_ (election_mode, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_class::
        Contest_class (const Contest_class& x,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          name_key_ (x.name_key_, f, this),
          description_key_ (x.description_key_, f, this),
          type_ (x.type_, f, this),
          stand_count_chief_ (x.stand_count_chief_, f, this),
          period_ (x.period_, f, this),
          unit_ (x.unit_, f, this),
          election_mode_ (x.election_mode_, f, this)
        {
        }

        Contest_class::
        Contest_class (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          code_ (f, this),
          custom_code_ (f, this),
          name_key_ (f, this),
          description_key_ (f, this),
          type_ (f, this),
          stand_count_chief_ (f, this),
          period_ (f, this),
          unit_ (f, this),
          election_mode_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Contest_class::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }

            if (n.name () == "stand-count-chief" && n.namespace_ ().empty ())
            {
              this->stand_count_chief_.set (Stand_count_chiefTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "period" && n.namespace_ ().empty ())
            {
              this->period_.set (PeriodTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "unit" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< UnitType > r (
                UnitTraits::create (i, f, this));

              this->unit_.set (r);
              continue;
            }

            if (n.name () == "election-mode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Election_modeType > r (
                Election_modeTraits::create (i, f, this));

              this->election_mode_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }

          if (!stand_count_chief_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "stand-count-chief",
              "");
          }

          if (!period_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "period",
              "");
          }

          if (!unit_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "unit",
              "");
          }

          if (!election_mode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "election-mode",
              "");
          }
        }

        Contest_class* Contest_class::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contest_class (*this, f, c);
        }

        Contest_class::
        ~Contest_class ()
        {
        }

        bool
        operator== (const Contest_class& x, const Contest_class& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getStand_count_chief () == y.getStand_count_chief ()))
            return false;

          if (!(x.getPeriod () == y.getPeriod ()))
            return false;

          if (!(x.getUnit () == y.getUnit ()))
            return false;

          if (!(x.getElection_mode () == y.getElection_mode ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contest_class& x, const Contest_class& y)
        {
          return !(x == y);
        }

        // Contest_group
        //

        Contest_group::
        Contest_group ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contest_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_group::
        Contest_group (const CodeType& code,
                       const Name_keyType& name_key,
                       const Description_keyType& description_key)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contest_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest_group::
        Contest_group (const Contest_group& x,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          contest_code_ (x.contest_code_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          name_key_ (x.name_key_, f, this),
          description_key_ (x.description_key_, f, this)
        {
        }

        Contest_group::
        Contest_group (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          contest_code_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          name_key_ (f, this),
          description_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Contest_group::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // contest-code
            //
            if (n.name () == "contest-code" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Contest_codeType > r (
                Contest_codeTraits::create (i, f, this));

              this->contest_code_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }
        }

        Contest_group* Contest_group::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contest_group (*this, f, c);
        }

        Contest_group::
        ~Contest_group ()
        {
        }

        bool
        operator== (const Contest_group& x, const Contest_group& y)
        {
          if (!(x.getContest_code () == y.getContest_code ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contest_group& x, const Contest_group& y)
        {
          return !(x == y);
        }

        // Ballot_form_layout
        //

        Ballot_form_layout::
        Ballot_form_layout ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          identification_area_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_option_areas_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_layout::
        Ballot_form_layout (const Image_file_nameType& image_file_name,
                            const CodeType& code,
                            const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          identification_area_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_option_areas_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (image_file_name, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_form_layout::
        Ballot_form_layout (const Ballot_form_layout& x,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          identification_area_ (x.identification_area_, f, this),
          ballot_option_areas_ (x.ballot_option_areas_, f, this),
          image_file_name_ (x.image_file_name_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this)
        {
        }

        Ballot_form_layout::
        Ballot_form_layout (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          identification_area_ (f, this),
          ballot_option_areas_ (f, this),
          image_file_name_ (f, this),
          code_ (f, this),
          custom_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Ballot_form_layout::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // identification-area
            //
            if (n.name () == "identification-area" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Identification_areaType > r (
                Identification_areaTraits::create (i, f, this));

              if (!this->identification_area_)
              {
                this->identification_area_.set (r);
                continue;
              }
            }

            // ballot-option-areas
            //
            if (n.name () == "ballot-option-areas" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_option_areasType > r (
                Ballot_option_areasTraits::create (i, f, this));

              this->ballot_option_areas_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "image-file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Image_file_nameType > r (
                Image_file_nameTraits::create (i, f, this));

              this->image_file_name_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }
          }

          if (!image_file_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "image-file-name",
              "");
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }
        }

        Ballot_form_layout* Ballot_form_layout::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_form_layout (*this, f, c);
        }

        Ballot_form_layout::
        ~Ballot_form_layout ()
        {
        }

        bool
        operator== (const Ballot_form_layout& x, const Ballot_form_layout& y)
        {
          if (!(x.getIdentification_area () == y.getIdentification_area ()))
            return false;

          if (!(x.getBallot_option_areas () == y.getBallot_option_areas ()))
            return false;

          if (!(x.getImage_file_name () == y.getImage_file_name ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_form_layout& x, const Ballot_form_layout& y)
        {
          return !(x == y);
        }

        // Ballot_cards
        //

        Ballot_cards::
        Ballot_cards ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_card_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_cards::
        Ballot_cards (const Ballot_cards& x,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_card_ (x.ballot_card_, f, this)
        {
        }

        Ballot_cards::
        Ballot_cards (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_card_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Ballot_cards::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot-card
            //
            if (n.name () == "ballot-card" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_cardType > r (
                Ballot_cardTraits::create (i, f, this));

              this->ballot_card_.push_back (r);
              continue;
            }

            break;
          }
        }

        Ballot_cards* Ballot_cards::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_cards (*this, f, c);
        }

        Ballot_cards::
        ~Ballot_cards ()
        {
        }

        bool
        operator== (const Ballot_cards& x, const Ballot_cards& y)
        {
          if (!(x.getBallot_card () == y.getBallot_card ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_cards& x, const Ballot_cards& y)
        {
          return !(x == y);
        }

        // Type
        //

        Type::
        Type (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Type_convert ();
        }

        Type::
        Type (const ::xercesc::DOMAttr& a,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Type_convert ();
        }

        Type::
        Type (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Type_convert ();
        }

        Type* Type::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Type (*this, f, c);
        }

        Type::Value Type::
        _xsd_Type_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Type_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Type_indexes_,
                            _xsd_Type_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_Type_indexes_ + 5 || _xsd_Type_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Type::
        _xsd_Type_literals_[5] =
        {
          "SINGLE",
          "LIST",
          "MINORITY_SINGLE",
          "ISSUE",
          "NON_CANDIDATE"
        };

        const Type::Value Type::
        _xsd_Type_indexes_[5] =
        {
          ::Smartmatic::SAES::Voting::Election::Type::ELECTION_ISSUE,
          ::Smartmatic::SAES::Voting::Election::Type::ELECTION_LIST,
          ::Smartmatic::SAES::Voting::Election::Type::ELECTION_MINORITY_SINGLE,
          ::Smartmatic::SAES::Voting::Election::Type::ELECTION_NON_CANDIDATE,
          ::Smartmatic::SAES::Voting::Election::Type::ELECTION_SINGLE
        };

        // Unit
        //

        Unit::
        Unit (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Unit_convert ();
        }

        Unit::
        Unit (const ::xercesc::DOMAttr& a,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Unit_convert ();
        }

        Unit::
        Unit (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Unit_convert ();
        }

        Unit* Unit::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Unit (*this, f, c);
        }

        Unit::Value Unit::
        _xsd_Unit_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Unit_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Unit_indexes_,
                            _xsd_Unit_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_Unit_indexes_ + 4 || _xsd_Unit_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Unit::
        _xsd_Unit_literals_[4] =
        {
          "DAY",
          "WEEK",
          "MONTH",
          "YEAR"
        };

        const Unit::Value Unit::
        _xsd_Unit_indexes_[4] =
        {
          ::Smartmatic::SAES::Voting::Election::Unit::ELECTION_DAY,
          ::Smartmatic::SAES::Voting::Election::Unit::ELECTION_MONTH,
          ::Smartmatic::SAES::Voting::Election::Unit::ELECTION_WEEK,
          ::Smartmatic::SAES::Voting::Election::Unit::ELECTION_YEAR
        };

        // Election_mode
        //

        Election_mode::
        Election_mode (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Election_mode_convert ();
        }

        Election_mode::
        Election_mode (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Election_mode_convert ();
        }

        Election_mode::
        Election_mode (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Election_mode_convert ();
        }

        Election_mode* Election_mode::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Election_mode (*this, f, c);
        }

        Election_mode::Value Election_mode::
        _xsd_Election_mode_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Election_mode_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Election_mode_indexes_,
                            _xsd_Election_mode_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_Election_mode_indexes_ + 2 || _xsd_Election_mode_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Election_mode::
        _xsd_Election_mode_literals_[2] =
        {
          "REGULAR",
          "OPENLIST"
        };

        const Election_mode::Value Election_mode::
        _xsd_Election_mode_indexes_[2] =
        {
          ::Smartmatic::SAES::Voting::Election::Election_mode::ELECTION_OPENLIST,
          ::Smartmatic::SAES::Voting::Election::Election_mode::ELECTION_REGULAR
        };

        // Ballot_card
        //

        Ballot_card::
        Ballot_card ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contests_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_card::
        Ballot_card (const ContestsType& contests,
                     const CodeType& code,
                     const Custom_codeType& custom_code,
                     const Title_keyType& title_key,
                     const Abstract_keyType& abstract_key,
                     const Help_keyType& help_key)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contests_ (contests, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_card::
        Ballot_card (::std::auto_ptr< ContestsType >& contests,
                     const CodeType& code,
                     const Custom_codeType& custom_code,
                     const Title_keyType& title_key,
                     const Abstract_keyType& abstract_key,
                     const Help_keyType& help_key)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contests_ (contests, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_card::
        Ballot_card (const Ballot_card& x,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          contests_ (x.contests_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          title_key_ (x.title_key_, f, this),
          abstract_key_ (x.abstract_key_, f, this),
          help_key_ (x.help_key_, f, this)
        {
        }

        Ballot_card::
        Ballot_card (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          contests_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          title_key_ (f, this),
          abstract_key_ (f, this),
          help_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Ballot_card::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // contests
            //
            if (n.name () == "contests" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< ContestsType > r (
                ContestsTraits::create (i, f, this));

              if (!contests_.present ())
              {
                this->contests_.set (r);
                continue;
              }
            }

            break;
          }

          if (!contests_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "contests",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "title-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Title_keyType > r (
                Title_keyTraits::create (i, f, this));

              this->title_key_.set (r);
              continue;
            }

            if (n.name () == "abstract-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Abstract_keyType > r (
                Abstract_keyTraits::create (i, f, this));

              this->abstract_key_.set (r);
              continue;
            }

            if (n.name () == "help-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Help_keyType > r (
                Help_keyTraits::create (i, f, this));

              this->help_key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!title_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "title-key",
              "");
          }

          if (!abstract_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "abstract-key",
              "");
          }

          if (!help_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "help-key",
              "");
          }
        }

        Ballot_card* Ballot_card::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_card (*this, f, c);
        }

        Ballot_card::
        ~Ballot_card ()
        {
        }

        bool
        operator== (const Ballot_card& x, const Ballot_card& y)
        {
          if (!(x.getContests () == y.getContests ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getTitle_key () == y.getTitle_key ()))
            return false;

          if (!(x.getAbstract_key () == y.getAbstract_key ()))
            return false;

          if (!(x.getHelp_key () == y.getHelp_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_card& x, const Ballot_card& y)
        {
          return !(x == y);
        }

        // Contests
        //

        Contests::
        Contests ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          contest_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contests::
        Contests (const Contests& x,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          contest_ (x.contest_, f, this)
        {
        }

        Contests::
        Contests (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          contest_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Contests::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // contest
            //
            if (n.name () == "contest" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< ContestType > r (
                ContestTraits::create (i, f, this));

              this->contest_.push_back (r);
              continue;
            }

            break;
          }
        }

        Contests* Contests::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contests (*this, f, c);
        }

        Contests::
        ~Contests ()
        {
        }

        bool
        operator== (const Contests& x, const Contests& y)
        {
          if (!(x.getContest () == y.getContest ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contests& x, const Contests& y)
        {
          return !(x == y);
        }

        // Contest
        //

        Contest::
        Contest ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          district_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          eligibles_options_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          display_info_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          min_votes_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_votes_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          is_question_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_class_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest::
        Contest (const DistrictType& district,
                 const Eligibles_optionsType& eligibles_options,
                 const Display_infoType& display_info,
                 const CodeType& code,
                 const Custom_codeType& custom_code,
                 const Title_keyType& title_key,
                 const Abstract_keyType& abstract_key,
                 const Help_keyType& help_key,
                 const Min_votesType& min_votes,
                 const Max_votesType& max_votes,
                 const Is_questionType& is_question,
                 const Contest_class_codeType& contest_class_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          district_ (district, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          eligibles_options_ (eligibles_options, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          display_info_ (display_info, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          min_votes_ (min_votes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_votes_ (max_votes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          is_question_ (is_question, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_class_code_ (contest_class_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest::
        Contest (::std::auto_ptr< DistrictType >& district,
                 ::std::auto_ptr< Eligibles_optionsType >& eligibles_options,
                 ::std::auto_ptr< Display_infoType >& display_info,
                 const CodeType& code,
                 const Custom_codeType& custom_code,
                 const Title_keyType& title_key,
                 const Abstract_keyType& abstract_key,
                 const Help_keyType& help_key,
                 const Min_votesType& min_votes,
                 const Max_votesType& max_votes,
                 const Is_questionType& is_question,
                 const Contest_class_codeType& contest_class_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          district_ (district, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          eligibles_options_ (eligibles_options, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          display_info_ (display_info, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          title_key_ (title_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abstract_key_ (abstract_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          help_key_ (help_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          min_votes_ (min_votes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_votes_ (max_votes, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          is_question_ (is_question, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_class_code_ (contest_class_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Contest::
        Contest (const Contest& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          district_ (x.district_, f, this),
          eligibles_options_ (x.eligibles_options_, f, this),
          display_info_ (x.display_info_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          title_key_ (x.title_key_, f, this),
          abstract_key_ (x.abstract_key_, f, this),
          help_key_ (x.help_key_, f, this),
          min_votes_ (x.min_votes_, f, this),
          max_votes_ (x.max_votes_, f, this),
          is_question_ (x.is_question_, f, this),
          contest_class_code_ (x.contest_class_code_, f, this)
        {
        }

        Contest::
        Contest (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          district_ (f, this),
          eligibles_options_ (f, this),
          display_info_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          title_key_ (f, this),
          abstract_key_ (f, this),
          help_key_ (f, this),
          min_votes_ (f, this),
          max_votes_ (f, this),
          is_question_ (f, this),
          contest_class_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Contest::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // district
            //
            if (n.name () == "district" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< DistrictType > r (
                DistrictTraits::create (i, f, this));

              if (!district_.present ())
              {
                this->district_.set (r);
                continue;
              }
            }

            // eligibles-options
            //
            if (n.name () == "eligibles-options" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Eligibles_optionsType > r (
                Eligibles_optionsTraits::create (i, f, this));

              if (!eligibles_options_.present ())
              {
                this->eligibles_options_.set (r);
                continue;
              }
            }

            // display-info
            //
            if (n.name () == "display-info" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Display_infoType > r (
                Display_infoTraits::create (i, f, this));

              if (!display_info_.present ())
              {
                this->display_info_.set (r);
                continue;
              }
            }

            break;
          }

          if (!district_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "district",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          if (!eligibles_options_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "eligibles-options",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          if (!display_info_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "display-info",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "title-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Title_keyType > r (
                Title_keyTraits::create (i, f, this));

              this->title_key_.set (r);
              continue;
            }

            if (n.name () == "abstract-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Abstract_keyType > r (
                Abstract_keyTraits::create (i, f, this));

              this->abstract_key_.set (r);
              continue;
            }

            if (n.name () == "help-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Help_keyType > r (
                Help_keyTraits::create (i, f, this));

              this->help_key_.set (r);
              continue;
            }

            if (n.name () == "min-votes" && n.namespace_ ().empty ())
            {
              this->min_votes_.set (Min_votesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "max-votes" && n.namespace_ ().empty ())
            {
              this->max_votes_.set (Max_votesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "is-question" && n.namespace_ ().empty ())
            {
              this->is_question_.set (Is_questionTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "contest-class-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_class_codeType > r (
                Contest_class_codeTraits::create (i, f, this));

              this->contest_class_code_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!title_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "title-key",
              "");
          }

          if (!abstract_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "abstract-key",
              "");
          }

          if (!help_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "help-key",
              "");
          }

          if (!min_votes_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "min-votes",
              "");
          }

          if (!max_votes_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "max-votes",
              "");
          }

          if (!is_question_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "is-question",
              "");
          }

          if (!contest_class_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-class-code",
              "");
          }
        }

        Contest* Contest::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Contest (*this, f, c);
        }

        Contest::
        ~Contest ()
        {
        }

        bool
        operator== (const Contest& x, const Contest& y)
        {
          if (!(x.getDistrict () == y.getDistrict ()))
            return false;

          if (!(x.getEligibles_options () == y.getEligibles_options ()))
            return false;

          if (!(x.getDisplay_info () == y.getDisplay_info ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getTitle_key () == y.getTitle_key ()))
            return false;

          if (!(x.getAbstract_key () == y.getAbstract_key ()))
            return false;

          if (!(x.getHelp_key () == y.getHelp_key ()))
            return false;

          if (!(x.getMin_votes () == y.getMin_votes ()))
            return false;

          if (!(x.getMax_votes () == y.getMax_votes ()))
            return false;

          if (!(x.getIs_question () == y.getIs_question ()))
            return false;

          if (!(x.getContest_class_code () == y.getContest_class_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Contest& x, const Contest& y)
        {
          return !(x == y);
        }

        // District
        //

        District::
        District ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          regions_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          number_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          region_hierarchy_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        District::
        District (const RegionsType& regions,
                  const Name_keyType& name_key,
                  const NumberType& number,
                  const Description_keyType& description_key,
                  const Region_hierarchy_codeType& region_hierarchy_code,
                  const CodeType& code,
                  const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          regions_ (regions, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          number_ (number, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          region_hierarchy_code_ (region_hierarchy_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        District::
        District (::std::auto_ptr< RegionsType >& regions,
                  const Name_keyType& name_key,
                  const NumberType& number,
                  const Description_keyType& description_key,
                  const Region_hierarchy_codeType& region_hierarchy_code,
                  const CodeType& code,
                  const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          regions_ (regions, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          number_ (number, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          region_hierarchy_code_ (region_hierarchy_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        District::
        District (const District& x,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          regions_ (x.regions_, f, this),
          name_key_ (x.name_key_, f, this),
          number_ (x.number_, f, this),
          description_key_ (x.description_key_, f, this),
          region_hierarchy_code_ (x.region_hierarchy_code_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this)
        {
        }

        District::
        District (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          regions_ (f, this),
          name_key_ (f, this),
          number_ (f, this),
          description_key_ (f, this),
          region_hierarchy_code_ (f, this),
          code_ (f, this),
          custom_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void District::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // regions
            //
            if (n.name () == "regions" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< RegionsType > r (
                RegionsTraits::create (i, f, this));

              if (!regions_.present ())
              {
                this->regions_.set (r);
                continue;
              }
            }

            break;
          }

          if (!regions_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "regions",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "number" && n.namespace_ ().empty ())
            {
              this->number_.set (NumberTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }

            if (n.name () == "region-hierarchy-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Region_hierarchy_codeType > r (
                Region_hierarchy_codeTraits::create (i, f, this));

              this->region_hierarchy_code_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!number_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "number",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }

          if (!region_hierarchy_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "region-hierarchy-code",
              "");
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }
        }

        District* District::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class District (*this, f, c);
        }

        District::
        ~District ()
        {
        }

        bool
        operator== (const District& x, const District& y)
        {
          if (!(x.getRegions () == y.getRegions ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getNumber () == y.getNumber ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          if (!(x.getRegion_hierarchy_code () == y.getRegion_hierarchy_code ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const District& x, const District& y)
        {
          return !(x == y);
        }

        // Eligibles_options
        //

        Eligibles_options::
        Eligibles_options ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          eligible_option_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Eligibles_options::
        Eligibles_options (const Eligibles_options& x,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          eligible_option_ (x.eligible_option_, f, this)
        {
        }

        Eligibles_options::
        Eligibles_options (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          eligible_option_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Eligibles_options::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // eligible-option
            //
            if (n.name () == "eligible-option" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Eligible_optionType > r (
                Eligible_optionTraits::create (i, f, this));

              this->eligible_option_.push_back (r);
              continue;
            }

            break;
          }
        }

        Eligibles_options* Eligibles_options::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Eligibles_options (*this, f, c);
        }

        Eligibles_options::
        ~Eligibles_options ()
        {
        }

        bool
        operator== (const Eligibles_options& x, const Eligibles_options& y)
        {
          if (!(x.getEligible_option () == y.getEligible_option ()))
            return false;

          return true;
        }

        bool
        operator!= (const Eligibles_options& x, const Eligibles_options& y)
        {
          return !(x == y);
        }

        // Display_info
        //

        Display_info::
        Display_info ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          image_width_height_relation_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_options_layout_kind_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_amount_of_ballot_options_columns_ (getMax_amount_of_ballot_options_columnsDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          force_max_amount_of_ballot_options_columns_ (getForce_max_amount_of_ballot_options_columnsDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (getMax_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          multi_level_voting_experience_layout_kind_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Display_info::
        Display_info (const Image_width_height_relationType& image_width_height_relation,
                      const Ballot_options_layout_kindType& ballot_options_layout_kind)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          image_width_height_relation_ (image_width_height_relation, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_options_layout_kind_ (ballot_options_layout_kind, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_amount_of_ballot_options_columns_ (getMax_amount_of_ballot_options_columnsDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          force_max_amount_of_ballot_options_columns_ (getForce_max_amount_of_ballot_options_columnsDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (getMax_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue (), ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          multi_level_voting_experience_layout_kind_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Display_info::
        Display_info (const Display_info& x,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          image_width_height_relation_ (x.image_width_height_relation_, f, this),
          ballot_options_layout_kind_ (x.ballot_options_layout_kind_, f, this),
          max_amount_of_ballot_options_columns_ (x.max_amount_of_ballot_options_columns_, f, this),
          force_max_amount_of_ballot_options_columns_ (x.force_max_amount_of_ballot_options_columns_, f, this),
          max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (x.max_amount_of_ballot_options_columns_in_multi_level_selection_mode_, f, this),
          force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (x.force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_, f, this),
          multi_level_voting_experience_layout_kind_ (x.multi_level_voting_experience_layout_kind_, f, this)
        {
        }

        Display_info::
        Display_info (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          image_width_height_relation_ (f, this),
          ballot_options_layout_kind_ (f, this),
          max_amount_of_ballot_options_columns_ (f, this),
          force_max_amount_of_ballot_options_columns_ (f, this),
          max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (f, this),
          force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_ (f, this),
          multi_level_voting_experience_layout_kind_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Display_info::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "image-width-height-relation" && n.namespace_ ().empty ())
            {
              this->image_width_height_relation_.set (Image_width_height_relationTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "ballot-options-layout-kind" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Ballot_options_layout_kindType > r (
                Ballot_options_layout_kindTraits::create (i, f, this));

              this->ballot_options_layout_kind_.set (r);
              continue;
            }

            if (n.name () == "max-amount-of-ballot-options-columns" && n.namespace_ ().empty ())
            {
              this->max_amount_of_ballot_options_columns_.set (Max_amount_of_ballot_options_columnsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "force-max-amount-of-ballot-options-columns" && n.namespace_ ().empty ())
            {
              this->force_max_amount_of_ballot_options_columns_.set (Force_max_amount_of_ballot_options_columnsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "max-amount-of-ballot-options-columns-in-multi-level-selection-mode" && n.namespace_ ().empty ())
            {
              this->max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (Max_amount_of_ballot_options_columns_in_multi_level_selection_modeTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "force-max-amount-of-ballot-options-columns-in-multi-level-selection-mode" && n.namespace_ ().empty ())
            {
              this->force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "multi-level-voting-experience-layout-kind" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Multi_level_voting_experience_layout_kindType > r (
                Multi_level_voting_experience_layout_kindTraits::create (i, f, this));

              this->multi_level_voting_experience_layout_kind_.set (r);
              continue;
            }
          }

          if (!image_width_height_relation_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "image-width-height-relation",
              "");
          }

          if (!ballot_options_layout_kind_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ballot-options-layout-kind",
              "");
          }

          if (!max_amount_of_ballot_options_columns_.present ())
          {
            this->max_amount_of_ballot_options_columns_.set (getMax_amount_of_ballot_options_columnsDefaultValue ());
          }

          if (!force_max_amount_of_ballot_options_columns_.present ())
          {
            this->force_max_amount_of_ballot_options_columns_.set (getForce_max_amount_of_ballot_options_columnsDefaultValue ());
          }

          if (!max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.present ())
          {
            this->max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (getMax_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ());
          }

          if (!force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.present ())
          {
            this->force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_.set (getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ());
          }
        }

        Display_info* Display_info::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Display_info (*this, f, c);
        }

        Display_info::
        ~Display_info ()
        {
        }

        bool
        operator== (const Display_info& x, const Display_info& y)
        {
          if (!(x.getImage_width_height_relation () == y.getImage_width_height_relation ()))
            return false;

          if (!(x.getBallot_options_layout_kind () == y.getBallot_options_layout_kind ()))
            return false;

          if (!(x.getMax_amount_of_ballot_options_columns () == y.getMax_amount_of_ballot_options_columns ()))
            return false;

          if (!(x.getForce_max_amount_of_ballot_options_columns () == y.getForce_max_amount_of_ballot_options_columns ()))
            return false;

          if (!(x.getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode () == y.getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode ()))
            return false;

          if (!(x.getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode () == y.getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode ()))
            return false;

          if (!(x.getMulti_level_voting_experience_layout_kind () == y.getMulti_level_voting_experience_layout_kind ()))
            return false;

          return true;
        }

        bool
        operator!= (const Display_info& x, const Display_info& y)
        {
          return !(x == y);
        }

        // Regions
        //

        Regions::
        Regions ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          region_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Regions::
        Regions (const Regions& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          region_ (x.region_, f, this)
        {
        }

        Regions::
        Regions (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          region_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Regions::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // region
            //
            if (n.name () == "region" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< RegionType > r (
                RegionTraits::create (i, f, this));

              this->region_.push_back (r);
              continue;
            }

            break;
          }
        }

        Regions* Regions::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Regions (*this, f, c);
        }

        Regions::
        ~Regions ()
        {
        }

        bool
        operator== (const Regions& x, const Regions& y)
        {
          if (!(x.getRegion () == y.getRegion ()))
            return false;

          return true;
        }

        bool
        operator!= (const Regions& x, const Regions& y)
        {
          return !(x == y);
        }

        // Eligible_option
        //

        Eligible_option::
        Eligible_option ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_options_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_name_key_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          candidate_id_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          parent_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_eligible_amount_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_order_index_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Eligible_option::
        Eligible_option (const Ballot_optionsType& ballot_options,
                         const CodeType& code,
                         const Custom_codeType& custom_code,
                         const Ballot_name_keyType& ballot_name_key,
                         const Candidate_idType& candidate_id,
                         const Parent_codeType& parent_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_options_ (ballot_options, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_name_key_ (ballot_name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          candidate_id_ (candidate_id, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          parent_code_ (parent_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_eligible_amount_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_order_index_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Eligible_option::
        Eligible_option (::std::auto_ptr< Ballot_optionsType >& ballot_options,
                         const CodeType& code,
                         const Custom_codeType& custom_code,
                         const Ballot_name_keyType& ballot_name_key,
                         const Candidate_idType& candidate_id,
                         const Parent_codeType& parent_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_options_ (ballot_options, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          ballot_name_key_ (ballot_name_key, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          candidate_id_ (candidate_id, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          parent_code_ (parent_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_eligible_amount_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          sub_level_order_index_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Eligible_option::
        Eligible_option (const Eligible_option& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_options_ (x.ballot_options_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          ballot_name_key_ (x.ballot_name_key_, f, this),
          candidate_id_ (x.candidate_id_, f, this),
          parent_code_ (x.parent_code_, f, this),
          sub_level_eligible_amount_ (x.sub_level_eligible_amount_, f, this),
          sub_level_order_index_ (x.sub_level_order_index_, f, this)
        {
        }

        Eligible_option::
        Eligible_option (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_options_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          ballot_name_key_ (f, this),
          candidate_id_ (f, this),
          parent_code_ (f, this),
          sub_level_eligible_amount_ (f, this),
          sub_level_order_index_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Eligible_option::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot-options
            //
            if (n.name () == "ballot-options" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_optionsType > r (
                Ballot_optionsTraits::create (i, f, this));

              if (!ballot_options_.present ())
              {
                this->ballot_options_.set (r);
                continue;
              }
            }

            break;
          }

          if (!ballot_options_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ballot-options",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "ballot-name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Ballot_name_keyType > r (
                Ballot_name_keyTraits::create (i, f, this));

              this->ballot_name_key_.set (r);
              continue;
            }

            if (n.name () == "candidate-id" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Candidate_idType > r (
                Candidate_idTraits::create (i, f, this));

              this->candidate_id_.set (r);
              continue;
            }

            if (n.name () == "parent-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Parent_codeType > r (
                Parent_codeTraits::create (i, f, this));

              this->parent_code_.set (r);
              continue;
            }

            if (n.name () == "sub-level-eligible-amount" && n.namespace_ ().empty ())
            {
              this->sub_level_eligible_amount_.set (Sub_level_eligible_amountTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "sub-level-order-index" && n.namespace_ ().empty ())
            {
              this->sub_level_order_index_.set (Sub_level_order_indexTraits::create (i, f, this));
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!ballot_name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ballot-name-key",
              "");
          }

          if (!candidate_id_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "candidate-id",
              "");
          }

          if (!parent_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "parent-code",
              "");
          }
        }

        Eligible_option* Eligible_option::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Eligible_option (*this, f, c);
        }

        Eligible_option::
        ~Eligible_option ()
        {
        }

        bool
        operator== (const Eligible_option& x, const Eligible_option& y)
        {
          if (!(x.getBallot_options () == y.getBallot_options ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getBallot_name_key () == y.getBallot_name_key ()))
            return false;

          if (!(x.getCandidate_id () == y.getCandidate_id ()))
            return false;

          if (!(x.getParent_code () == y.getParent_code ()))
            return false;

          if (!(x.getSub_level_eligible_amount () == y.getSub_level_eligible_amount ()))
            return false;

          if (!(x.getSub_level_order_index () == y.getSub_level_order_index ()))
            return false;

          return true;
        }

        bool
        operator!= (const Eligible_option& x, const Eligible_option& y)
        {
          return !(x == y);
        }

        // Ballot_options_layout_kind
        //

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Ballot_options_layout_kind_convert ();
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const ::xercesc::DOMAttr& a,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Ballot_options_layout_kind_convert ();
        }

        Ballot_options_layout_kind::
        Ballot_options_layout_kind (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Ballot_options_layout_kind_convert ();
        }

        Ballot_options_layout_kind* Ballot_options_layout_kind::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_options_layout_kind (*this, f, c);
        }

        Ballot_options_layout_kind::Value Ballot_options_layout_kind::
        _xsd_Ballot_options_layout_kind_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Ballot_options_layout_kind_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Ballot_options_layout_kind_indexes_,
                            _xsd_Ballot_options_layout_kind_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_Ballot_options_layout_kind_indexes_ + 2 || _xsd_Ballot_options_layout_kind_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Ballot_options_layout_kind::
        _xsd_Ballot_options_layout_kind_literals_[2] =
        {
          "HORIZONTAL",
          "VERTICAL"
        };

        const Ballot_options_layout_kind::Value Ballot_options_layout_kind::
        _xsd_Ballot_options_layout_kind_indexes_[2] =
        {
          ::Smartmatic::SAES::Voting::Election::Ballot_options_layout_kind::ELECTION_HORIZONTAL,
          ::Smartmatic::SAES::Voting::Election::Ballot_options_layout_kind::ELECTION_VERTICAL
        };

        // RegionTag
        //

        RegionTag::
        RegionTag ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        RegionTag::
        RegionTag (const CodeType& code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        RegionTag::
        RegionTag (const RegionTag& x,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          code_ (x.code_, f, this)
        {
        }

        RegionTag::
        RegionTag (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void RegionTag::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }
        }

        RegionTag* RegionTag::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class RegionTag (*this, f, c);
        }

        RegionTag::
        ~RegionTag ()
        {
        }

        bool
        operator== (const RegionTag& x, const RegionTag& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          return true;
        }

        bool
        operator!= (const RegionTag& x, const RegionTag& y)
        {
          return !(x == y);
        }

        // Ballot_options
        //

        Ballot_options::
        Ballot_options ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          ballot_option_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_options::
        Ballot_options (const Ballot_options& x,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          ballot_option_ (x.ballot_option_, f, this)
        {
        }

        Ballot_options::
        Ballot_options (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          ballot_option_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Ballot_options::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ballot-option
            //
            if (n.name () == "ballot-option" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Ballot_optionType > r (
                Ballot_optionTraits::create (i, f, this));

              this->ballot_option_.push_back (r);
              continue;
            }

            break;
          }
        }

        Ballot_options* Ballot_options::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_options (*this, f, c);
        }

        Ballot_options::
        ~Ballot_options ()
        {
        }

        bool
        operator== (const Ballot_options& x, const Ballot_options& y)
        {
          if (!(x.getBallot_option () == y.getBallot_option ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_options& x, const Ballot_options& y)
        {
          return !(x == y);
        }

        // Ballot_option
        //

        Ballot_option::
        Ballot_option ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          pad_position_group_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          party_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_for_vote_receipt_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          tally_position_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_code_ref_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          category_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_option::
        Ballot_option (const PartyType& party,
                       const CodeType& code,
                       const Custom_codeType& custom_code,
                       const TypeType& type,
                       const Tally_positionType& tally_position,
                       const CategoryType& category)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          pad_position_group_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          party_ (party, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_for_vote_receipt_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          tally_position_ (tally_position, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_code_ref_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          category_ (category, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_option::
        Ballot_option (::std::auto_ptr< PartyType >& party,
                       const CodeType& code,
                       const Custom_codeType& custom_code,
                       const TypeType& type,
                       const Tally_positionType& tally_position,
                       const CategoryType& category)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          pad_position_group_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          party_ (party, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_for_vote_receipt_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          tally_position_ (tally_position, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          contest_code_ref_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          category_ (category, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Ballot_option::
        Ballot_option (const Ballot_option& x,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          pad_position_group_ (x.pad_position_group_, f, this),
          party_ (x.party_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          type_ (x.type_, f, this),
          image_file_name_ (x.image_file_name_, f, this),
          image_for_vote_receipt_file_name_ (x.image_for_vote_receipt_file_name_, f, this),
          tally_position_ (x.tally_position_, f, this),
          contest_code_ref_ (x.contest_code_ref_, f, this),
          category_ (x.category_, f, this)
        {
        }

        Ballot_option::
        Ballot_option (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          pad_position_group_ (f, this),
          party_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          type_ (f, this),
          image_file_name_ (f, this),
          image_for_vote_receipt_file_name_ (f, this),
          tally_position_ (f, this),
          contest_code_ref_ (f, this),
          category_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Ballot_option::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // pad-position-group
            //
            if (n.name () == "pad-position-group" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< Pad_position_groupType > r (
                Pad_position_groupTraits::create (i, f, this));

              if (!this->pad_position_group_)
              {
                this->pad_position_group_.set (r);
                continue;
              }
            }

            // party
            //
            if (n.name () == "party" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< PartyType > r (
                PartyTraits::create (i, f, this));

              if (!party_.present ())
              {
                this->party_.set (r);
                continue;
              }
            }

            break;
          }

          if (!party_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "party",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }

            if (n.name () == "image-file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Image_file_nameType > r (
                Image_file_nameTraits::create (i, f, this));

              this->image_file_name_.set (r);
              continue;
            }

            if (n.name () == "image-for-vote-receipt-file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Image_for_vote_receipt_file_nameType > r (
                Image_for_vote_receipt_file_nameTraits::create (i, f, this));

              this->image_for_vote_receipt_file_name_.set (r);
              continue;
            }

            if (n.name () == "tally-position" && n.namespace_ ().empty ())
            {
              this->tally_position_.set (Tally_positionTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "contest-code-ref" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_code_refType > r (
                Contest_code_refTraits::create (i, f, this));

              this->contest_code_ref_.set (r);
              continue;
            }

            if (n.name () == "category" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CategoryType > r (
                CategoryTraits::create (i, f, this));

              this->category_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }

          if (!tally_position_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "tally-position",
              "");
          }

          if (!category_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "category",
              "");
          }
        }

        Ballot_option* Ballot_option::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Ballot_option (*this, f, c);
        }

        Ballot_option::
        ~Ballot_option ()
        {
        }

        bool
        operator== (const Ballot_option& x, const Ballot_option& y)
        {
          if (!(x.getPad_position_group () == y.getPad_position_group ()))
            return false;

          if (!(x.getParty () == y.getParty ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getImage_file_name () == y.getImage_file_name ()))
            return false;

          if (!(x.getImage_for_vote_receipt_file_name () == y.getImage_for_vote_receipt_file_name ()))
            return false;

          if (!(x.getTally_position () == y.getTally_position ()))
            return false;

          if (!(x.getContest_code_ref () == y.getContest_code_ref ()))
            return false;

          if (!(x.getCategory () == y.getCategory ()))
            return false;

          return true;
        }

        bool
        operator!= (const Ballot_option& x, const Ballot_option& y)
        {
          return !(x == y);
        }

        // Pad_position_group
        //

        Pad_position_group::
        Pad_position_group ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          pad_position_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Pad_position_group::
        Pad_position_group (const Pad_position_group& x,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          pad_position_ (x.pad_position_, f, this)
        {
        }

        Pad_position_group::
        Pad_position_group (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          pad_position_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Pad_position_group::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // pad-position
            //
            if (n.name () == "pad-position" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              this->pad_position_.push_back (Pad_positionTraits::create (i, f, this));
              continue;
            }

            break;
          }
        }

        Pad_position_group* Pad_position_group::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Pad_position_group (*this, f, c);
        }

        Pad_position_group::
        ~Pad_position_group ()
        {
        }

        bool
        operator== (const Pad_position_group& x, const Pad_position_group& y)
        {
          if (!(x.getPad_position () == y.getPad_position ()))
            return false;

          return true;
        }

        bool
        operator!= (const Pad_position_group& x, const Pad_position_group& y)
        {
          return !(x == y);
        }

        // Party
        //

        Party::
        Party ()
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abbreviation_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Party::
        Party (const CodeType& code,
               const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (),
          name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          abbreviation_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::ElectionTypes::Flags (), this)
        {
        }

        Party::
        Party (const Party& x,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (x, f, c),
          name_ (x.name_, f, this),
          abbreviation_ (x.abbreviation_, f, this),
          type_ (x.type_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          image_file_name_ (x.image_file_name_, f, this)
        {
        }

        Party::
        Party (const ::xercesc::DOMElement& e,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base, c),
          name_ (f, this),
          abbreviation_ (f, this),
          type_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          image_file_name_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Party::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NameType > r (
                NameTraits::create (i, f, this));

              this->name_.set (r);
              continue;
            }

            if (n.name () == "abbreviation" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< AbbreviationType > r (
                AbbreviationTraits::create (i, f, this));

              this->abbreviation_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "image-file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Image_file_nameType > r (
                Image_file_nameTraits::create (i, f, this));

              this->image_file_name_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }
        }

        Party* Party::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Party (*this, f, c);
        }

        Party::
        ~Party ()
        {
        }

        bool
        operator== (const Party& x, const Party& y)
        {
          if (!(x.getName () == y.getName ()))
            return false;

          if (!(x.getAbbreviation () == y.getAbbreviation ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getImage_file_name () == y.getImage_file_name ()))
            return false;

          return true;
        }

        bool
        operator!= (const Party& x, const Party& y)
        {
          return !(x == y);
        }

        // Type1
        //

        Type1::
        Type1 (const ::xercesc::DOMElement& e,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Type1_convert ();
        }

        Type1::
        Type1 (const ::xercesc::DOMAttr& a,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Type1_convert ();
        }

        Type1::
        Type1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Type1_convert ();
        }

        Type1* Type1::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Type1 (*this, f, c);
        }

        Type1::Value Type1::
        _xsd_Type1_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Type1_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Type1_indexes_,
                            _xsd_Type1_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_Type1_indexes_ + 4 || _xsd_Type1_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Type1::
        _xsd_Type1_literals_[4] =
        {
          "SCREEN",
          "PAD",
          "VTV",
          "PAD_WITH_SCREEN_STATUS"
        };

        const Type1::Value Type1::
        _xsd_Type1_indexes_[4] =
        {
          ::Smartmatic::SAES::Voting::Election::Type1::ELECTION_PAD,
          ::Smartmatic::SAES::Voting::Election::Type1::ELECTION_PAD_WITH_SCREEN_STATUS,
          ::Smartmatic::SAES::Voting::Election::Type1::ELECTION_SCREEN,
          ::Smartmatic::SAES::Voting::Election::Type1::ELECTION_VTV
        };

        // Category
        //

        Category::
        Category (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Category_convert ();
        }

        Category::
        Category (const ::xercesc::DOMAttr& a,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Category_convert ();
        }

        Category::
        Category (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Category_convert ();
        }

        Category* Category::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Category (*this, f, c);
        }

        Category::Value Category::
        _xsd_Category_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Category_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Category_indexes_,
                            _xsd_Category_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_Category_indexes_ + 3 || _xsd_Category_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Category::
        _xsd_Category_literals_[3] =
        {
          "PRINCIPAL",
          "STAND_IN",
          "LIST"
        };

        const Category::Value Category::
        _xsd_Category_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::Election::Category::ELECTION_LIST,
          ::Smartmatic::SAES::Voting::Election::Category::ELECTION_PRINCIPAL,
          ::Smartmatic::SAES::Voting::Election::Category::ELECTION_STAND_IN
        };

        // Type2
        //

        Type2::
        Type2 (const ::xercesc::DOMElement& e,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (e, f, c)
        {
          _xsd_Type2_convert ();
        }

        Type2::
        Type2 (const ::xercesc::DOMAttr& a,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (a, f, c)
        {
          _xsd_Type2_convert ();
        }

        Type2::
        Type2 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionTypes::String (s, e, f, c)
        {
          _xsd_Type2_convert ();
        }

        Type2* Type2::
        _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c) const
        {
          return new class Type2 (*this, f, c);
        }

        Type2::Value Type2::
        _xsd_Type2_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Type2_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Type2_indexes_,
                            _xsd_Type2_indexes_ + 6,
                            *this,
                            c));

          if (i == _xsd_Type2_indexes_ + 6 || _xsd_Type2_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Type2::
        _xsd_Type2_literals_[6] =
        {
          "PARTY",
          "I",
          "GROUP",
          "CFO",
          "CITIZEN",
          "DUMMY"
        };

        const Type2::Value Type2::
        _xsd_Type2_indexes_[6] =
        {
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_CFO,
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_CITIZEN,
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_DUMMY,
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_GROUP,
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_I,
          ::Smartmatic::SAES::Voting::Election::Type2::ELECTION_PARTY
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& u,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& u,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& sid,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& sid,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseElection (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& i,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& i,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
            ::Smartmatic::SAES::Voting::Election::parseElection (
              d, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::xercesc::DOMDocument& d,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
              ::Smartmatic::SAES::Voting::Election::parseElection (
                c, f | ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "election" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Election::Election, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "election",
            "http://www.smartmatic.com/Saes/Voting/Election");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::ElectionTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "election" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Election::Election, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "election",
            "http://www.smartmatic.com/Saes/Voting/Election");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        void
        serializeElection (::std::ostream& o,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeElection (::std::ostream& o,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElection (::std::ostream& o,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElection (::xercesc::XMLFormatTarget& t,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeElection (::xercesc::XMLFormatTarget& t,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& h,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElection (::xercesc::XMLFormatTarget& t,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeElection (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElection (::xercesc::DOMDocument& d,
                           const ::Smartmatic::SAES::Voting::Election::Election& s,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "election" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "election",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }
        }

        ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeElection (const ::Smartmatic::SAES::Voting::Election::Election& s,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "election",
              "http://www.smartmatic.com/Saes/Voting/Election",
              m, f));

          ::Smartmatic::SAES::Voting::Election::serializeElection (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_form_area& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // id
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "id",
                e));

            a << i.getId ();
          }

          // x
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "x",
                e));

            a << i.getX ();
          }

          // y
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "y",
                e));

            a << i.getY ();
          }

          // width
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "width",
                e));

            a << i.getWidth ();
          }

          // height
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "height",
                e));

            a << i.getHeight ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_form_identification_area& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Election::Ballot_form_area& > (i);

          // part
          //
          for (Ballot_form_identification_area::PartConstIterator
               b (i.getPart ().begin ()), n (i.getPart ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "part",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }

          // parts-pattern
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "parts-pattern",
                e));

            a << i.getParts_pattern ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Election& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballots
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballots",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getBallots ();
          }

          // languages
          //
          if (i.getLanguages ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "languages",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getLanguages ();
          }

          // xml-schemas-necessary
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "xml-schemas-necessary",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getXml_schemas_necessary ();
          }

          // contest-classes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest-classes",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getContest_classes ();
          }

          // contest-groups
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest-groups",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getContest_groups ();
          }

          // ballot-form-layouts
          //
          if (i.getBallot_form_layouts ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-form-layouts",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getBallot_form_layouts ();
          }

          // hash
          //
          if (i.getHash ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "hash",
                e));

            a << *i.getHash ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // electoral-organization
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "electoral-organization",
                e));

            a << i.getElectoral_organization ();
          }

          // voting-time-out
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-time-out",
                e));

            a << i.getVoting_time_out ();
          }

          // audio-voting-time-out
          //
          if (i.getAudio_voting_time_out ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "audio-voting-time-out",
                e));

            a << *i.getAudio_voting_time_out ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Part& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Part& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Part& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballots& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot
          //
          for (Ballots::BallotConstIterator
               b (i.getBallot ().begin ()), n (i.getBallot ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Xml_schemas_necessary& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // transmission-package
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "transmission-package",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getTransmission_package ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contest_classes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // comparator
          //
          if (i.getComparator ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "comparator",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getComparator ();
          }

          // contest-class
          //
          for (Contest_classes::Contest_classConstIterator
               b (i.getContest_class ().begin ()), n (i.getContest_class ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest-class",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }

          // class
          //
          if (i.getClass ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "class",
                e));

            a << *i.getClass ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contest_groups& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // contest-group
          //
          for (Contest_groups::Contest_groupConstIterator
               b (i.getContest_group ().begin ()), n (i.getContest_group ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest-group",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_form_layouts& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot-form-layout
          //
          for (Ballot_form_layouts::Ballot_form_layoutConstIterator
               b (i.getBallot_form_layout ().begin ()), n (i.getBallot_form_layout ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-form-layout",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }

          // identification-area
          //
          if (i.getIdentification_area ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "identification-area",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getIdentification_area ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Voting_time_out& i)
        {
          e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Voting_time_out& i)
        {
          a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Voting_time_out& i)
        {
          l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Audio_voting_time_out& i)
        {
          e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Audio_voting_time_out& i)
        {
          a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Audio_voting_time_out& i)
        {
          l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot-cards
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-cards",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getBallot_cards ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // title-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "title-key",
                e));

            a << i.getTitle_key ();
          }

          // abstract-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "abstract-key",
                e));

            a << i.getAbstract_key ();
          }

          // help-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "help-key",
                e));

            a << i.getHelp_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Comparator& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // class
          //
          if (i.getClass ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "class",
                e));

            a << *i.getClass ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contest_class& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          if (i.getCustom_code ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << *i.getCustom_code ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }

          // stand-count-chief
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "stand-count-chief",
                e));

            a << i.getStand_count_chief ();
          }

          // period
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "period",
                e));

            a << i.getPeriod ();
          }

          // unit
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "unit",
                e));

            a << i.getUnit ();
          }

          // election-mode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "election-mode",
                e));

            a << i.getElection_mode ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contest_group& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // contest-code
          //
          for (Contest_group::Contest_codeConstIterator
               b (i.getContest_code ().begin ()), n (i.getContest_code ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest-code",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          if (i.getCustom_code ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << *i.getCustom_code ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_form_layout& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // identification-area
          //
          if (i.getIdentification_area ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "identification-area",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getIdentification_area ();
          }

          // ballot-option-areas
          //
          for (Ballot_form_layout::Ballot_option_areasConstIterator
               b (i.getBallot_option_areas ().begin ()), n (i.getBallot_option_areas ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-option-areas",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }

          // image-file-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-file-name",
                e));

            a << i.getImage_file_name ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_cards& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot-card
          //
          for (Ballot_cards::Ballot_cardConstIterator
               b (i.getBallot_card ().begin ()), n (i.getBallot_card ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-card",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Type& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Type& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Type& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Unit& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Unit& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Unit& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Election_mode& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Election_mode& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Election_mode& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_card& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // contests
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contests",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getContests ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // title-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "title-key",
                e));

            a << i.getTitle_key ();
          }

          // abstract-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "abstract-key",
                e));

            a << i.getAbstract_key ();
          }

          // help-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "help-key",
                e));

            a << i.getHelp_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contests& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // contest
          //
          for (Contests::ContestConstIterator
               b (i.getContest ().begin ()), n (i.getContest ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "contest",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Contest& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // district
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "district",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getDistrict ();
          }

          // eligibles-options
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "eligibles-options",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getEligibles_options ();
          }

          // display-info
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "display-info",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getDisplay_info ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // title-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "title-key",
                e));

            a << i.getTitle_key ();
          }

          // abstract-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "abstract-key",
                e));

            a << i.getAbstract_key ();
          }

          // help-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "help-key",
                e));

            a << i.getHelp_key ();
          }

          // min-votes
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "min-votes",
                e));

            a << i.getMin_votes ();
          }

          // max-votes
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "max-votes",
                e));

            a << i.getMax_votes ();
          }

          // is-question
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "is-question",
                e));

            a << i.getIs_question ();
          }

          // contest-class-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-class-code",
                e));

            a << i.getContest_class_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const District& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // regions
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "regions",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getRegions ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // number
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "number",
                e));

            a << i.getNumber ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }

          // region-hierarchy-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "region-hierarchy-code",
                e));

            a << i.getRegion_hierarchy_code ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Eligibles_options& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // eligible-option
          //
          for (Eligibles_options::Eligible_optionConstIterator
               b (i.getEligible_option ().begin ()), n (i.getEligible_option ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "eligible-option",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Display_info& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // image-width-height-relation
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-width-height-relation",
                e));

            a << i.getImage_width_height_relation ();
          }

          // ballot-options-layout-kind
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ballot-options-layout-kind",
                e));

            a << i.getBallot_options_layout_kind ();
          }

          // max-amount-of-ballot-options-columns
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "max-amount-of-ballot-options-columns",
                e));

            a << i.getMax_amount_of_ballot_options_columns ();
          }

          // force-max-amount-of-ballot-options-columns
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "force-max-amount-of-ballot-options-columns",
                e));

            a << i.getForce_max_amount_of_ballot_options_columns ();
          }

          // max-amount-of-ballot-options-columns-in-multi-level-selection-mode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "max-amount-of-ballot-options-columns-in-multi-level-selection-mode",
                e));

            a << i.getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode ();
          }

          // force-max-amount-of-ballot-options-columns-in-multi-level-selection-mode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "force-max-amount-of-ballot-options-columns-in-multi-level-selection-mode",
                e));

            a << i.getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode ();
          }

          // multi-level-voting-experience-layout-kind
          //
          if (i.getMulti_level_voting_experience_layout_kind ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "multi-level-voting-experience-layout-kind",
                e));

            a << *i.getMulti_level_voting_experience_layout_kind ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Regions& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // region
          //
          for (Regions::RegionConstIterator
               b (i.getRegion ().begin ()), n (i.getRegion ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "region",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Eligible_option& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot-options
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-options",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getBallot_options ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // ballot-name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ballot-name-key",
                e));

            a << i.getBallot_name_key ();
          }

          // candidate-id
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "candidate-id",
                e));

            a << i.getCandidate_id ();
          }

          // parent-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "parent-code",
                e));

            a << i.getParent_code ();
          }

          // sub-level-eligible-amount
          //
          if (i.getSub_level_eligible_amount ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "sub-level-eligible-amount",
                e));

            a << *i.getSub_level_eligible_amount ();
          }

          // sub-level-order-index
          //
          if (i.getSub_level_order_index ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "sub-level-order-index",
                e));

            a << *i.getSub_level_order_index ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_options_layout_kind& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Ballot_options_layout_kind& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Ballot_options_layout_kind& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const RegionTag& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_options& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // ballot-option
          //
          for (Ballot_options::Ballot_optionConstIterator
               b (i.getBallot_option ().begin ()), n (i.getBallot_option ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ballot-option",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Ballot_option& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // pad-position-group
          //
          if (i.getPad_position_group ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "pad-position-group",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getPad_position_group ();
          }

          // party
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "party",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << i.getParty ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }

          // image-file-name
          //
          if (i.getImage_file_name ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-file-name",
                e));

            a << *i.getImage_file_name ();
          }

          // image-for-vote-receipt-file-name
          //
          if (i.getImage_for_vote_receipt_file_name ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-for-vote-receipt-file-name",
                e));

            a << *i.getImage_for_vote_receipt_file_name ();
          }

          // tally-position
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "tally-position",
                e));

            a << i.getTally_position ();
          }

          // contest-code-ref
          //
          if (i.getContest_code_ref ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-code-ref",
                e));

            a << *i.getContest_code_ref ();
          }

          // category
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "category",
                e));

            a << i.getCategory ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Pad_position_group& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // pad-position
          //
          for (Pad_position_group::Pad_positionConstIterator
               b (i.getPad_position ().begin ()), n (i.getPad_position ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "pad-position",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Party& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::Type& > (i);

          // name
          //
          if (i.getName ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name",
                e));

            a << *i.getName ();
          }

          // abbreviation
          //
          if (i.getAbbreviation ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "abbreviation",
                e));

            a << *i.getAbbreviation ();
          }

          // type
          //
          if (i.getType ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << *i.getType ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // image-file-name
          //
          if (i.getImage_file_name ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-file-name",
                e));

            a << *i.getImage_file_name ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Type1& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Type1& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Type1& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Category& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Category& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Category& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Type2& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Type2& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream& l,
                    const Type2& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionTypes::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

