// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "election-status-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        // ProcessStatus
        // 

        ProcessStatus::
        ProcessStatus ()
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String ()
        {
        }

        ProcessStatus::
        ProcessStatus (Value v)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (_xsd_ProcessStatus_literals_[v])
        {
        }

        ProcessStatus::
        ProcessStatus (const char* v)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (v)
        {
        }

        ProcessStatus::
        ProcessStatus (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (v)
        {
        }

        ProcessStatus::
        ProcessStatus (const ::Smartmatic::SAES::Voting::ElectionStatusTypes::String& v)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (v)
        {
        }

        ProcessStatus::
        ProcessStatus (const ProcessStatus& v,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (v, f, c)
        {
        }

        ProcessStatus& ProcessStatus::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::ElectionStatusTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (_xsd_ProcessStatus_literals_[v]);

          return *this;
        }


        // ElectionStatus
        // 

        const ElectionStatus::StateType& ElectionStatus::
        getState () const
        {
          return this->State_.get ();
        }

        ElectionStatus::StateType& ElectionStatus::
        getState ()
        {
          return this->State_.get ();
        }

        void ElectionStatus::
        setState (const StateType& x)
        {
          this->State_.set (x);
        }

        void ElectionStatus::
        setState (::std::auto_ptr< StateType > x)
        {
          this->State_.set (x);
        }

        const ElectionStatus::OpeningCodeType& ElectionStatus::
        getOpeningCode () const
        {
          return this->OpeningCode_.get ();
        }

        ElectionStatus::OpeningCodeType& ElectionStatus::
        getOpeningCode ()
        {
          return this->OpeningCode_.get ();
        }

        void ElectionStatus::
        setOpeningCode (const OpeningCodeType& x)
        {
          this->OpeningCode_.set (x);
        }

        void ElectionStatus::
        setOpeningCode (::std::auto_ptr< OpeningCodeType > x)
        {
          this->OpeningCode_.set (x);
        }

        const ElectionStatus::VotersRegisteredInBookType& ElectionStatus::
        getVotersRegisteredInBook () const
        {
          return this->VotersRegisteredInBook_.get ();
        }

        ElectionStatus::VotersRegisteredInBookType& ElectionStatus::
        getVotersRegisteredInBook ()
        {
          return this->VotersRegisteredInBook_.get ();
        }

        void ElectionStatus::
        setVotersRegisteredInBook (const VotersRegisteredInBookType& x)
        {
          this->VotersRegisteredInBook_.set (x);
        }

        const ElectionStatus::OperationModeCodeType& ElectionStatus::
        getOperationModeCode () const
        {
          return this->OperationModeCode_.get ();
        }

        ElectionStatus::OperationModeCodeType& ElectionStatus::
        getOperationModeCode ()
        {
          return this->OperationModeCode_.get ();
        }

        void ElectionStatus::
        setOperationModeCode (const OperationModeCodeType& x)
        {
          this->OperationModeCode_.set (x);
        }

        void ElectionStatus::
        setOperationModeCode (::std::auto_ptr< OperationModeCodeType > x)
        {
          this->OperationModeCode_.set (x);
        }

        const ElectionStatus::ElectionConfigurationReportPrintedType& ElectionStatus::
        getElectionConfigurationReportPrinted () const
        {
          return this->ElectionConfigurationReportPrinted_.get ();
        }

        ElectionStatus::ElectionConfigurationReportPrintedType& ElectionStatus::
        getElectionConfigurationReportPrinted ()
        {
          return this->ElectionConfigurationReportPrinted_.get ();
        }

        void ElectionStatus::
        setElectionConfigurationReportPrinted (const ElectionConfigurationReportPrintedType& x)
        {
          this->ElectionConfigurationReportPrinted_.set (x);
        }

        const ElectionStatus::OpenElectionDateType& ElectionStatus::
        getOpenElectionDate () const
        {
          return this->OpenElectionDate_.get ();
        }

        ElectionStatus::OpenElectionDateType& ElectionStatus::
        getOpenElectionDate ()
        {
          return this->OpenElectionDate_.get ();
        }

        void ElectionStatus::
        setOpenElectionDate (const OpenElectionDateType& x)
        {
          this->OpenElectionDate_.set (x);
        }

        void ElectionStatus::
        setOpenElectionDate (::std::auto_ptr< OpenElectionDateType > x)
        {
          this->OpenElectionDate_.set (x);
        }

        const ElectionStatus::CloseVotingDateType& ElectionStatus::
        getCloseVotingDate () const
        {
          return this->CloseVotingDate_.get ();
        }

        ElectionStatus::CloseVotingDateType& ElectionStatus::
        getCloseVotingDate ()
        {
          return this->CloseVotingDate_.get ();
        }

        void ElectionStatus::
        setCloseVotingDate (const CloseVotingDateType& x)
        {
          this->CloseVotingDate_.set (x);
        }

        void ElectionStatus::
        setCloseVotingDate (::std::auto_ptr< CloseVotingDateType > x)
        {
          this->CloseVotingDate_.set (x);
        }

        const ElectionStatus::CloseElectionDateType& ElectionStatus::
        getCloseElectionDate () const
        {
          return this->CloseElectionDate_.get ();
        }

        ElectionStatus::CloseElectionDateType& ElectionStatus::
        getCloseElectionDate ()
        {
          return this->CloseElectionDate_.get ();
        }

        void ElectionStatus::
        setCloseElectionDate (const CloseElectionDateType& x)
        {
          this->CloseElectionDate_.set (x);
        }

        void ElectionStatus::
        setCloseElectionDate (::std::auto_ptr< CloseElectionDateType > x)
        {
          this->CloseElectionDate_.set (x);
        }

        const ElectionStatus::SynchronizeVotesOptional& ElectionStatus::
        getSynchronizeVotes () const
        {
          return this->SynchronizeVotes_;
        }

        ElectionStatus::SynchronizeVotesOptional& ElectionStatus::
        getSynchronizeVotes ()
        {
          return this->SynchronizeVotes_;
        }

        void ElectionStatus::
        setSynchronizeVotes (const SynchronizeVotesType& x)
        {
          this->SynchronizeVotes_.set (x);
        }

        void ElectionStatus::
        setSynchronizeVotes (const SynchronizeVotesOptional& x)
        {
          this->SynchronizeVotes_ = x;
        }

        const ElectionStatus::ContingencyCardCreatedOptional& ElectionStatus::
        getContingencyCardCreated () const
        {
          return this->ContingencyCardCreated_;
        }

        ElectionStatus::ContingencyCardCreatedOptional& ElectionStatus::
        getContingencyCardCreated ()
        {
          return this->ContingencyCardCreated_;
        }

        void ElectionStatus::
        setContingencyCardCreated (const ContingencyCardCreatedType& x)
        {
          this->ContingencyCardCreated_.set (x);
        }

        void ElectionStatus::
        setContingencyCardCreated (const ContingencyCardCreatedOptional& x)
        {
          this->ContingencyCardCreated_ = x;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        // ProcessStatus
        //

        ProcessStatus::
        ProcessStatus (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (e, f, c)
        {
          _xsd_ProcessStatus_convert ();
        }

        ProcessStatus::
        ProcessStatus (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (a, f, c)
        {
          _xsd_ProcessStatus_convert ();
        }

        ProcessStatus::
        ProcessStatus (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::String (s, e, f, c)
        {
          _xsd_ProcessStatus_convert ();
        }

        ProcessStatus* ProcessStatus::
        _clone (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c) const
        {
          return new class ProcessStatus (*this, f, c);
        }

        ProcessStatus::Value ProcessStatus::
        _xsd_ProcessStatus_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ProcessStatus_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_ProcessStatus_indexes_,
                            _xsd_ProcessStatus_indexes_ + 7,
                            *this,
                            c));

          if (i == _xsd_ProcessStatus_indexes_ + 7 || _xsd_ProcessStatus_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const ProcessStatus::
        _xsd_ProcessStatus_literals_[7] =
        {
          "NotInstalled",
          "NotPollworkerRegistered",
          "NotDemostrationVote",
          "NotInitiated",
          "Initiated",
          "Closed",
          "ResultsTransmitted"
        };

        const ProcessStatus::Value ProcessStatus::
        _xsd_ProcessStatus_indexes_[7] =
        {
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_CLOSED,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_INITIATED,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_NOTDEMOSTRATIONVOTE,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_NOTINITIATED,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_NOTINSTALLED,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_NOTPOLLWORKERREGISTERED,
          ::Smartmatic::SAES::Voting::Status::ProcessStatus::ELECTION_STATUS_RESULTSTRANSMITTED
        };

        // ElectionStatus
        //

        ElectionStatus::
        ElectionStatus ()
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::Type (),
          State_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OpeningCode_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          VotersRegisteredInBook_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OperationModeCode_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          ElectionConfigurationReportPrinted_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OpenElectionDate_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          CloseVotingDate_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          CloseElectionDate_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          SynchronizeVotes_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          ContingencyCardCreated_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this)
        {
        }

        ElectionStatus::
        ElectionStatus (const StateType& State,
                        const OpeningCodeType& OpeningCode,
                        const VotersRegisteredInBookType& VotersRegisteredInBook,
                        const OperationModeCodeType& OperationModeCode,
                        const ElectionConfigurationReportPrintedType& ElectionConfigurationReportPrinted,
                        const OpenElectionDateType& OpenElectionDate,
                        const CloseVotingDateType& CloseVotingDate,
                        const CloseElectionDateType& CloseElectionDate)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::Type (),
          State_ (State, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OpeningCode_ (OpeningCode, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          VotersRegisteredInBook_ (VotersRegisteredInBook, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OperationModeCode_ (OperationModeCode, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          ElectionConfigurationReportPrinted_ (ElectionConfigurationReportPrinted, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          OpenElectionDate_ (OpenElectionDate, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          CloseVotingDate_ (CloseVotingDate, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          CloseElectionDate_ (CloseElectionDate, ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          SynchronizeVotes_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this),
          ContingencyCardCreated_ (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags (), this)
        {
        }

        ElectionStatus::
        ElectionStatus (const ElectionStatus& x,
                        ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::Type (x, f, c),
          State_ (x.State_, f, this),
          OpeningCode_ (x.OpeningCode_, f, this),
          VotersRegisteredInBook_ (x.VotersRegisteredInBook_, f, this),
          OperationModeCode_ (x.OperationModeCode_, f, this),
          ElectionConfigurationReportPrinted_ (x.ElectionConfigurationReportPrinted_, f, this),
          OpenElectionDate_ (x.OpenElectionDate_, f, this),
          CloseVotingDate_ (x.CloseVotingDate_, f, this),
          CloseElectionDate_ (x.CloseElectionDate_, f, this),
          SynchronizeVotes_ (x.SynchronizeVotes_, f, this),
          ContingencyCardCreated_ (x.ContingencyCardCreated_, f, this)
        {
        }

        ElectionStatus::
        ElectionStatus (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                        ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionStatusTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::base, c),
          State_ (f, this),
          OpeningCode_ (f, this),
          VotersRegisteredInBook_ (f, this),
          OperationModeCode_ (f, this),
          ElectionConfigurationReportPrinted_ (f, this),
          OpenElectionDate_ (f, this),
          CloseVotingDate_ (f, this),
          CloseElectionDate_ (f, this),
          SynchronizeVotes_ (f, this),
          ContingencyCardCreated_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void ElectionStatus::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< StateType > r (
                StateTraits::create (i, f, this));

              this->State_.set (r);
              continue;
            }

            if (n.name () == "OpeningCode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< OpeningCodeType > r (
                OpeningCodeTraits::create (i, f, this));

              this->OpeningCode_.set (r);
              continue;
            }

            if (n.name () == "VotersRegisteredInBook" && n.namespace_ ().empty ())
            {
              this->VotersRegisteredInBook_.set (VotersRegisteredInBookTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "OperationModeCode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< OperationModeCodeType > r (
                OperationModeCodeTraits::create (i, f, this));

              this->OperationModeCode_.set (r);
              continue;
            }

            if (n.name () == "ElectionConfigurationReportPrinted" && n.namespace_ ().empty ())
            {
              this->ElectionConfigurationReportPrinted_.set (ElectionConfigurationReportPrintedTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "OpenElectionDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< OpenElectionDateType > r (
                OpenElectionDateTraits::create (i, f, this));

              this->OpenElectionDate_.set (r);
              continue;
            }

            if (n.name () == "CloseVotingDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CloseVotingDateType > r (
                CloseVotingDateTraits::create (i, f, this));

              this->CloseVotingDate_.set (r);
              continue;
            }

            if (n.name () == "CloseElectionDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CloseElectionDateType > r (
                CloseElectionDateTraits::create (i, f, this));

              this->CloseElectionDate_.set (r);
              continue;
            }

            if (n.name () == "SynchronizeVotes" && n.namespace_ ().empty ())
            {
              this->SynchronizeVotes_.set (SynchronizeVotesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "ContingencyCardCreated" && n.namespace_ ().empty ())
            {
              this->ContingencyCardCreated_.set (ContingencyCardCreatedTraits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }

          if (!OpeningCode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "OpeningCode",
              "");
          }

          if (!VotersRegisteredInBook_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VotersRegisteredInBook",
              "");
          }

          if (!OperationModeCode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "OperationModeCode",
              "");
          }

          if (!ElectionConfigurationReportPrinted_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ElectionConfigurationReportPrinted",
              "");
          }

          if (!OpenElectionDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "OpenElectionDate",
              "");
          }

          if (!CloseVotingDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CloseVotingDate",
              "");
          }

          if (!CloseElectionDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CloseElectionDate",
              "");
          }
        }

        ElectionStatus* ElectionStatus::
        _clone (::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionStatusTypes::Container* c) const
        {
          return new class ElectionStatus (*this, f, c);
        }

        ElectionStatus::
        ~ElectionStatus ()
        {
        }

        bool
        operator== (const ElectionStatus& x, const ElectionStatus& y)
        {
          if (!(x.getState () == y.getState ()))
            return false;

          if (!(x.getOpeningCode () == y.getOpeningCode ()))
            return false;

          if (!(x.getVotersRegisteredInBook () == y.getVotersRegisteredInBook ()))
            return false;

          if (!(x.getOperationModeCode () == y.getOperationModeCode ()))
            return false;

          if (!(x.getElectionConfigurationReportPrinted () == y.getElectionConfigurationReportPrinted ()))
            return false;

          if (!(x.getOpenElectionDate () == y.getOpenElectionDate ()))
            return false;

          if (!(x.getCloseVotingDate () == y.getCloseVotingDate ()))
            return false;

          if (!(x.getCloseElectionDate () == y.getCloseElectionDate ()))
            return false;

          if (!(x.getSynchronizeVotes () == y.getSynchronizeVotes ()))
            return false;

          if (!(x.getContingencyCardCreated () == y.getContingencyCardCreated ()))
            return false;

          return true;
        }

        bool
        operator!= (const ElectionStatus& x, const ElectionStatus& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseElectionStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
              d, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (const ::xercesc::DOMDocument& d,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
              ::Smartmatic::SAES::Voting::Status::parseElectionStatus (
                c, f | ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ElectionStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Status::ElectionStatus, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectionStatus",
            "http://www.smartmatic.com/Saes/Voting/Status");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus >
        parseElectionStatus (::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "ElectionStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::ElectionStatus > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Status::ElectionStatus, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ElectionStatus",
            "http://www.smartmatic.com/Saes/Voting/Status");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        void
        serializeElectionStatus (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeElectionStatus (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElectionStatus (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElectionStatus (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeElectionStatus (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElectionStatus (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeElectionStatus (::xercesc::DOMDocument& d,
                                 const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ElectionStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "ElectionStatus",
              "http://www.smartmatic.com/Saes/Voting/Status");
          }
        }

        ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeElectionStatus (const ::Smartmatic::SAES::Voting::Status::ElectionStatus& s,
                                 const ::Smartmatic::SAES::Voting::ElectionStatusTypes::NamespaceInfomap& m,
                                 ::Smartmatic::SAES::Voting::ElectionStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "ElectionStatus",
              "http://www.smartmatic.com/Saes/Voting/Status",
              m, f));

          ::Smartmatic::SAES::Voting::Status::serializeElectionStatus (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ProcessStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const ProcessStatus& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::ElectionStatusTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionStatusTypes::ListStream& l,
                    const ProcessStatus& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::ElectionStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const ElectionStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionStatusTypes::Type& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.getState ();
          }

          // OpeningCode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "OpeningCode",
                e));

            a << i.getOpeningCode ();
          }

          // VotersRegisteredInBook
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VotersRegisteredInBook",
                e));

            a << i.getVotersRegisteredInBook ();
          }

          // OperationModeCode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "OperationModeCode",
                e));

            a << i.getOperationModeCode ();
          }

          // ElectionConfigurationReportPrinted
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ElectionConfigurationReportPrinted",
                e));

            a << i.getElectionConfigurationReportPrinted ();
          }

          // OpenElectionDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "OpenElectionDate",
                e));

            a << i.getOpenElectionDate ();
          }

          // CloseVotingDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CloseVotingDate",
                e));

            a << i.getCloseVotingDate ();
          }

          // CloseElectionDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CloseElectionDate",
                e));

            a << i.getCloseElectionDate ();
          }

          // SynchronizeVotes
          //
          if (i.getSynchronizeVotes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "SynchronizeVotes",
                e));

            a << *i.getSynchronizeVotes ();
          }

          // ContingencyCardCreated
          //
          if (i.getContingencyCardCreated ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ContingencyCardCreated",
                e));

            a << *i.getContingencyCardCreated ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

