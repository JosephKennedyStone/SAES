// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "voting-machine-status-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        // VotingMachineStatus
        // 

        const VotingMachineStatus::DevicesStatusType& VotingMachineStatus::
        getDevicesStatus () const
        {
          return this->DevicesStatus_.get ();
        }

        VotingMachineStatus::DevicesStatusType& VotingMachineStatus::
        getDevicesStatus ()
        {
          return this->DevicesStatus_.get ();
        }

        void VotingMachineStatus::
        setDevicesStatus (const DevicesStatusType& x)
        {
          this->DevicesStatus_.set (x);
        }

        void VotingMachineStatus::
        setDevicesStatus (::std::auto_ptr< DevicesStatusType > x)
        {
          this->DevicesStatus_.set (x);
        }

        const VotingMachineStatus::VMFlagsType& VotingMachineStatus::
        getVMFlags () const
        {
          return this->VMFlags_.get ();
        }

        VotingMachineStatus::VMFlagsType& VotingMachineStatus::
        getVMFlags ()
        {
          return this->VMFlags_.get ();
        }

        void VotingMachineStatus::
        setVMFlags (const VMFlagsType& x)
        {
          this->VMFlags_.set (x);
        }

        void VotingMachineStatus::
        setVMFlags (::std::auto_ptr< VMFlagsType > x)
        {
          this->VMFlags_.set (x);
        }

        const VotingMachineStatus::FactoryDiagnoseCompletedType& VotingMachineStatus::
        getFactoryDiagnoseCompleted () const
        {
          return this->FactoryDiagnoseCompleted_.get ();
        }

        VotingMachineStatus::FactoryDiagnoseCompletedType& VotingMachineStatus::
        getFactoryDiagnoseCompleted ()
        {
          return this->FactoryDiagnoseCompleted_.get ();
        }

        void VotingMachineStatus::
        setFactoryDiagnoseCompleted (const FactoryDiagnoseCompletedType& x)
        {
          this->FactoryDiagnoseCompleted_.set (x);
        }

        const VotingMachineStatus::TransmissionAttemptsType& VotingMachineStatus::
        getTransmissionAttempts () const
        {
          return this->TransmissionAttempts_.get ();
        }

        VotingMachineStatus::TransmissionAttemptsType& VotingMachineStatus::
        getTransmissionAttempts ()
        {
          return this->TransmissionAttempts_.get ();
        }

        void VotingMachineStatus::
        setTransmissionAttempts (const TransmissionAttemptsType& x)
        {
          this->TransmissionAttempts_.set (x);
        }


        // DevicesStatus
        // 

        const DevicesStatus::DeviceStatusSequence& DevicesStatus::
        getDeviceStatus () const
        {
          return this->DeviceStatus_;
        }

        DevicesStatus::DeviceStatusSequence& DevicesStatus::
        getDeviceStatus ()
        {
          return this->DeviceStatus_;
        }

        void DevicesStatus::
        setDeviceStatus (const DeviceStatusSequence& s)
        {
          this->DeviceStatus_ = s;
        }


        // VMFlags
        // 

        VMFlags::
        VMFlags ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String ()
        {
        }

        VMFlags::
        VMFlags (Value v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMFlags_literals_[v])
        {
        }

        VMFlags::
        VMFlags (const char* v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMFlags::
        VMFlags (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMFlags::
        VMFlags (const ::Smartmatic::SAES::Voting::VMStatusTypes::String& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMFlags::
        VMFlags (const VMFlags& v,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v, f, c)
        {
        }

        VMFlags& VMFlags::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMFlags_literals_[v]);

          return *this;
        }


        // DeviceStatus
        // 

        const DeviceStatus::VMTypeType& DeviceStatus::
        getVMType () const
        {
          return this->VMType_.get ();
        }

        DeviceStatus::VMTypeType& DeviceStatus::
        getVMType ()
        {
          return this->VMType_.get ();
        }

        void DeviceStatus::
        setVMType (const VMTypeType& x)
        {
          this->VMType_.set (x);
        }

        void DeviceStatus::
        setVMType (::std::auto_ptr< VMTypeType > x)
        {
          this->VMType_.set (x);
        }

        const DeviceStatus::VMDateTimeType& DeviceStatus::
        getVMDateTime () const
        {
          return this->VMDateTime_.get ();
        }

        DeviceStatus::VMDateTimeType& DeviceStatus::
        getVMDateTime ()
        {
          return this->VMDateTime_.get ();
        }

        void DeviceStatus::
        setVMDateTime (const VMDateTimeType& x)
        {
          this->VMDateTime_.set (x);
        }

        void DeviceStatus::
        setVMDateTime (::std::auto_ptr< VMDateTimeType > x)
        {
          this->VMDateTime_.set (x);
        }

        const DeviceStatus::VMStatusType& DeviceStatus::
        getVMStatus () const
        {
          return this->VMStatus_.get ();
        }

        DeviceStatus::VMStatusType& DeviceStatus::
        getVMStatus ()
        {
          return this->VMStatus_.get ();
        }

        void DeviceStatus::
        setVMStatus (const VMStatusType& x)
        {
          this->VMStatus_.set (x);
        }

        void DeviceStatus::
        setVMStatus (::std::auto_ptr< VMStatusType > x)
        {
          this->VMStatus_.set (x);
        }

        const DeviceStatus::DiagnoseDescriptionType& DeviceStatus::
        getDiagnoseDescription () const
        {
          return this->DiagnoseDescription_.get ();
        }

        DeviceStatus::DiagnoseDescriptionType& DeviceStatus::
        getDiagnoseDescription ()
        {
          return this->DiagnoseDescription_.get ();
        }

        void DeviceStatus::
        setDiagnoseDescription (const DiagnoseDescriptionType& x)
        {
          this->DiagnoseDescription_.set (x);
        }

        void DeviceStatus::
        setDiagnoseDescription (::std::auto_ptr< DiagnoseDescriptionType > x)
        {
          this->DiagnoseDescription_.set (x);
        }


        // VMType
        // 

        VMType::
        VMType ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String ()
        {
        }

        VMType::
        VMType (Value v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMType_literals_[v])
        {
        }

        VMType::
        VMType (const char* v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMType::
        VMType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMType::
        VMType (const ::Smartmatic::SAES::Voting::VMStatusTypes::String& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMType::
        VMType (const VMType& v,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v, f, c)
        {
        }

        VMType& VMType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMType_literals_[v]);

          return *this;
        }


        // VMDateTime
        // 


        // VMStatus
        // 

        VMStatus::
        VMStatus ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String ()
        {
        }

        VMStatus::
        VMStatus (Value v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMStatus_literals_[v])
        {
        }

        VMStatus::
        VMStatus (const char* v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMStatus::
        VMStatus (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMStatus::
        VMStatus (const ::Smartmatic::SAES::Voting::VMStatusTypes::String& v)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v)
        {
        }

        VMStatus::
        VMStatus (const VMStatus& v,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (v, f, c)
        {
        }

        VMStatus& VMStatus::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_VMStatus_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        // VotingMachineStatus
        //

        VotingMachineStatus::
        VotingMachineStatus ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          DevicesStatus_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMFlags_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          FactoryDiagnoseCompleted_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          TransmissionAttempts_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        VotingMachineStatus::
        VotingMachineStatus (const DevicesStatusType& DevicesStatus,
                             const VMFlagsType& VMFlags,
                             const FactoryDiagnoseCompletedType& FactoryDiagnoseCompleted,
                             const TransmissionAttemptsType& TransmissionAttempts)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          DevicesStatus_ (DevicesStatus, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMFlags_ (VMFlags, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          FactoryDiagnoseCompleted_ (FactoryDiagnoseCompleted, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          TransmissionAttempts_ (TransmissionAttempts, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        VotingMachineStatus::
        VotingMachineStatus (::std::auto_ptr< DevicesStatusType >& DevicesStatus,
                             const VMFlagsType& VMFlags,
                             const FactoryDiagnoseCompletedType& FactoryDiagnoseCompleted,
                             const TransmissionAttemptsType& TransmissionAttempts)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          DevicesStatus_ (DevicesStatus, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMFlags_ (VMFlags, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          FactoryDiagnoseCompleted_ (FactoryDiagnoseCompleted, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          TransmissionAttempts_ (TransmissionAttempts, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        VotingMachineStatus::
        VotingMachineStatus (const VotingMachineStatus& x,
                             ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                             ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (x, f, c),
          DevicesStatus_ (x.DevicesStatus_, f, this),
          VMFlags_ (x.VMFlags_, f, this),
          FactoryDiagnoseCompleted_ (x.FactoryDiagnoseCompleted_, f, this),
          TransmissionAttempts_ (x.TransmissionAttempts_, f, this)
        {
        }

        VotingMachineStatus::
        VotingMachineStatus (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                             ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (e, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base, c),
          DevicesStatus_ (f, this),
          VMFlags_ (f, this),
          FactoryDiagnoseCompleted_ (f, this),
          TransmissionAttempts_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void VotingMachineStatus::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // DevicesStatus
            //
            if (n.name () == "DevicesStatus" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
            {
              ::std::auto_ptr< DevicesStatusType > r (
                DevicesStatusTraits::create (i, f, this));

              if (!DevicesStatus_.present ())
              {
                this->DevicesStatus_.set (r);
                continue;
              }
            }

            break;
          }

          if (!DevicesStatus_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DevicesStatus",
              "http://www.smartmatic.com/Saes/Voting/Status");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "VMFlags" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VMFlagsType > r (
                VMFlagsTraits::create (i, f, this));

              this->VMFlags_.set (r);
              continue;
            }

            if (n.name () == "FactoryDiagnoseCompleted" && n.namespace_ ().empty ())
            {
              this->FactoryDiagnoseCompleted_.set (FactoryDiagnoseCompletedTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "TransmissionAttempts" && n.namespace_ ().empty ())
            {
              this->TransmissionAttempts_.set (TransmissionAttemptsTraits::create (i, f, this));
              continue;
            }
          }

          if (!VMFlags_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VMFlags",
              "");
          }

          if (!FactoryDiagnoseCompleted_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "FactoryDiagnoseCompleted",
              "");
          }

          if (!TransmissionAttempts_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "TransmissionAttempts",
              "");
          }
        }

        VotingMachineStatus* VotingMachineStatus::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class VotingMachineStatus (*this, f, c);
        }

        VotingMachineStatus::
        ~VotingMachineStatus ()
        {
        }

        bool
        operator== (const VotingMachineStatus& x, const VotingMachineStatus& y)
        {
          if (!(x.getDevicesStatus () == y.getDevicesStatus ()))
            return false;

          if (!(x.getVMFlags () == y.getVMFlags ()))
            return false;

          if (!(x.getFactoryDiagnoseCompleted () == y.getFactoryDiagnoseCompleted ()))
            return false;

          if (!(x.getTransmissionAttempts () == y.getTransmissionAttempts ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingMachineStatus& x, const VotingMachineStatus& y)
        {
          return !(x == y);
        }

        // DevicesStatus
        //

        DevicesStatus::
        DevicesStatus ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          DeviceStatus_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        DevicesStatus::
        DevicesStatus (const DevicesStatus& x,
                       ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (x, f, c),
          DeviceStatus_ (x.DeviceStatus_, f, this)
        {
        }

        DevicesStatus::
        DevicesStatus (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (e, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base, c),
          DeviceStatus_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void DevicesStatus::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // DeviceStatus
            //
            if (n.name () == "DeviceStatus" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
            {
              ::std::auto_ptr< DeviceStatusType > r (
                DeviceStatusTraits::create (i, f, this));

              this->DeviceStatus_.push_back (r);
              continue;
            }

            break;
          }
        }

        DevicesStatus* DevicesStatus::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class DevicesStatus (*this, f, c);
        }

        DevicesStatus::
        ~DevicesStatus ()
        {
        }

        bool
        operator== (const DevicesStatus& x, const DevicesStatus& y)
        {
          if (!(x.getDeviceStatus () == y.getDeviceStatus ()))
            return false;

          return true;
        }

        bool
        operator!= (const DevicesStatus& x, const DevicesStatus& y)
        {
          return !(x == y);
        }

        // VMFlags
        //

        VMFlags::
        VMFlags (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (e, f, c)
        {
          _xsd_VMFlags_convert ();
        }

        VMFlags::
        VMFlags (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (a, f, c)
        {
          _xsd_VMFlags_convert ();
        }

        VMFlags::
        VMFlags (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                 ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (s, e, f, c)
        {
          _xsd_VMFlags_convert ();
        }

        VMFlags* VMFlags::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class VMFlags (*this, f, c);
        }

        VMFlags::Value VMFlags::
        _xsd_VMFlags_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VMFlags_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VMFlags_indexes_,
                            _xsd_VMFlags_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_VMFlags_indexes_ + 4 || _xsd_VMFlags_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VMFlags::
        _xsd_VMFlags_literals_[4] =
        {
          "MachineSubst",
          "FlashSubst",
          "TTS",
          "None"
        };

        const VMFlags::Value VMFlags::
        _xsd_VMFlags_indexes_[4] =
        {
          ::Smartmatic::SAES::Voting::Status::VMFlags::VOTING_MACHINE_STATUS_FLASHSUBST,
          ::Smartmatic::SAES::Voting::Status::VMFlags::VOTING_MACHINE_STATUS_MACHINESUBST,
          ::Smartmatic::SAES::Voting::Status::VMFlags::VOTING_MACHINE_STATUS_NONE,
          ::Smartmatic::SAES::Voting::Status::VMFlags::VOTING_MACHINE_STATUS_TTS
        };

        // DeviceStatus
        //

        DeviceStatus::
        DeviceStatus ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          VMType_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMDateTime_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMStatus_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          DiagnoseDescription_ (::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        DeviceStatus::
        DeviceStatus (const VMTypeType& VMType,
                      const VMDateTimeType& VMDateTime,
                      const VMStatusType& VMStatus,
                      const DiagnoseDescriptionType& DiagnoseDescription)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (),
          VMType_ (VMType, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMDateTime_ (VMDateTime, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          VMStatus_ (VMStatus, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this),
          DiagnoseDescription_ (DiagnoseDescription, ::Smartmatic::SAES::Voting::VMStatusTypes::Flags (), this)
        {
        }

        DeviceStatus::
        DeviceStatus (const DeviceStatus& x,
                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (x, f, c),
          VMType_ (x.VMType_, f, this),
          VMDateTime_ (x.VMDateTime_, f, this),
          VMStatus_ (x.VMStatus_, f, this),
          DiagnoseDescription_ (x.DiagnoseDescription_, f, this)
        {
        }

        DeviceStatus::
        DeviceStatus (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::Type (e, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base, c),
          VMType_ (f, this),
          VMDateTime_ (f, this),
          VMStatus_ (f, this),
          DiagnoseDescription_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void DeviceStatus::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "VMType" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VMTypeType > r (
                VMTypeTraits::create (i, f, this));

              this->VMType_.set (r);
              continue;
            }

            if (n.name () == "VMDateTime" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VMDateTimeType > r (
                VMDateTimeTraits::create (i, f, this));

              this->VMDateTime_.set (r);
              continue;
            }

            if (n.name () == "VMStatus" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VMStatusType > r (
                VMStatusTraits::create (i, f, this));

              this->VMStatus_.set (r);
              continue;
            }

            if (n.name () == "DiagnoseDescription" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< DiagnoseDescriptionType > r (
                DiagnoseDescriptionTraits::create (i, f, this));

              this->DiagnoseDescription_.set (r);
              continue;
            }
          }

          if (!VMType_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VMType",
              "");
          }

          if (!VMDateTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VMDateTime",
              "");
          }

          if (!VMStatus_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VMStatus",
              "");
          }

          if (!DiagnoseDescription_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "DiagnoseDescription",
              "");
          }
        }

        DeviceStatus* DeviceStatus::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class DeviceStatus (*this, f, c);
        }

        DeviceStatus::
        ~DeviceStatus ()
        {
        }

        bool
        operator== (const DeviceStatus& x, const DeviceStatus& y)
        {
          if (!(x.getVMType () == y.getVMType ()))
            return false;

          if (!(x.getVMDateTime () == y.getVMDateTime ()))
            return false;

          if (!(x.getVMStatus () == y.getVMStatus ()))
            return false;

          if (!(x.getDiagnoseDescription () == y.getDiagnoseDescription ()))
            return false;

          return true;
        }

        bool
        operator!= (const DeviceStatus& x, const DeviceStatus& y)
        {
          return !(x == y);
        }

        // VMType
        //

        VMType::
        VMType (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (e, f, c)
        {
          _xsd_VMType_convert ();
        }

        VMType::
        VMType (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (a, f, c)
        {
          _xsd_VMType_convert ();
        }

        VMType::
        VMType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (s, e, f, c)
        {
          _xsd_VMType_convert ();
        }

        VMType* VMType::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class VMType (*this, f, c);
        }

        VMType::Value VMType::
        _xsd_VMType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VMType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VMType_indexes_,
                            _xsd_VMType_indexes_ + 10,
                            *this,
                            c));

          if (i == _xsd_VMType_indexes_ + 10 || _xsd_VMType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VMType::
        _xsd_VMType_literals_[10] =
        {
          "Ballot",
          "Barcode",
          "Printer",
          "AlarmBox",
          "SmartCard",
          "TouchScreenCalibration",
          "ScreenContrast",
          "Flash",
          "Able",
          "DateTime"
        };

        const VMType::Value VMType::
        _xsd_VMType_indexes_[10] =
        {
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_ABLE,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_ALARMBOX,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_BALLOT,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_BARCODE,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_DATETIME,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_FLASH,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_PRINTER,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_SCREENCONTRAST,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_SMARTCARD,
          ::Smartmatic::SAES::Voting::Status::VMType::VOTING_MACHINE_STATUS_TOUCHSCREENCALIBRATION
        };

        // VMDateTime
        //

        VMDateTime::
        VMDateTime ()
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String ()
        {
        }

        VMDateTime::
        VMDateTime (const char* _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_String_base)
        {
        }

        VMDateTime::
        VMDateTime (const ::std::string& _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_String_base)
        {
        }

        VMDateTime::
        VMDateTime (const ::Smartmatic::SAES::Voting::VMStatusTypes::String& _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (_xsd_String_base)
        {
        }

        VMDateTime::
        VMDateTime (const VMDateTime& x,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (x, f, c)
        {
        }

        VMDateTime::
        VMDateTime (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (e, f, c)
        {
        }

        VMDateTime::
        VMDateTime (const ::xercesc::DOMAttr& a,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (a, f, c)
        {
        }

        VMDateTime::
        VMDateTime (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                    ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (s, e, f, c)
        {
        }

        VMDateTime* VMDateTime::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class VMDateTime (*this, f, c);
        }

        VMDateTime::
        ~VMDateTime ()
        {
        }

        // VMStatus
        //

        VMStatus::
        VMStatus (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (e, f, c)
        {
          _xsd_VMStatus_convert ();
        }

        VMStatus::
        VMStatus (const ::xercesc::DOMAttr& a,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (a, f, c)
        {
          _xsd_VMStatus_convert ();
        }

        VMStatus::
        VMStatus (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VMStatusTypes::String (s, e, f, c)
        {
          _xsd_VMStatus_convert ();
        }

        VMStatus* VMStatus::
        _clone (::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                ::Smartmatic::SAES::Voting::VMStatusTypes::Container* c) const
        {
          return new class VMStatus (*this, f, c);
        }

        VMStatus::Value VMStatus::
        _xsd_VMStatus_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VMStatus_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VMStatus_indexes_,
                            _xsd_VMStatus_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_VMStatus_indexes_ + 3 || _xsd_VMStatus_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VMStatus::
        _xsd_VMStatus_literals_[3] =
        {
          "NotDiagnosed",
          "Ok",
          "Error"
        };

        const VMStatus::Value VMStatus::
        _xsd_VMStatus_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::Status::VMStatus::VOTING_MACHINE_STATUS_ERROR,
          ::Smartmatic::SAES::Voting::Status::VMStatus::VOTING_MACHINE_STATUS_NOTDIAGNOSED,
          ::Smartmatic::SAES::Voting::Status::VMStatus::VOTING_MACHINE_STATUS_OK
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
            ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
              d, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
              ::Smartmatic::SAES::Voting::Status::parseVotingMachineStatus (
                c, f | ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingMachineStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingMachineStatus",
            "http://www.smartmatic.com/Saes/Voting/Status");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus >
        parseVotingMachineStatus (::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::VMStatusTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::VMStatusTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "VotingMachineStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Status::VotingMachineStatus, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingMachineStatus",
            "http://www.smartmatic.com/Saes/Voting/Status");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Status
      {
        void
        serializeVotingMachineStatus (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingMachineStatus (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VMStatusTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingMachineStatus (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingMachineStatus (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingMachineStatus (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingMachineStatus (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingMachineStatus (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingMachineStatus" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Status")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "VotingMachineStatus",
              "http://www.smartmatic.com/Saes/Voting/Status");
          }
        }

        ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVotingMachineStatus (const ::Smartmatic::SAES::Voting::Status::VotingMachineStatus& s,
                                      const ::Smartmatic::SAES::Voting::VMStatusTypes::NamespaceInfomap& m,
                                      ::Smartmatic::SAES::Voting::VMStatusTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VMStatusTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "VotingMachineStatus",
              "http://www.smartmatic.com/Saes/Voting/Status",
              m, f));

          ::Smartmatic::SAES::Voting::Status::serializeVotingMachineStatus (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingMachineStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::Type& > (i);

          // DevicesStatus
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DevicesStatus",
                "http://www.smartmatic.com/Saes/Voting/Status",
                e));

            s << i.getDevicesStatus ();
          }

          // VMFlags
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VMFlags",
                e));

            a << i.getVMFlags ();
          }

          // FactoryDiagnoseCompleted
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "FactoryDiagnoseCompleted",
                e));

            a << i.getFactoryDiagnoseCompleted ();
          }

          // TransmissionAttempts
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "TransmissionAttempts",
                e));

            a << i.getTransmissionAttempts ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const DevicesStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::Type& > (i);

          // DeviceStatus
          //
          for (DevicesStatus::DeviceStatusConstIterator
               b (i.getDeviceStatus ().begin ()), n (i.getDeviceStatus ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DeviceStatus",
                "http://www.smartmatic.com/Saes/Voting/Status",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VMFlags& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VMFlags& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VMStatusTypes::ListStream& l,
                    const VMFlags& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const DeviceStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::Type& > (i);

          // VMType
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VMType",
                e));

            a << i.getVMType ();
          }

          // VMDateTime
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VMDateTime",
                e));

            a << i.getVMDateTime ();
          }

          // VMStatus
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VMStatus",
                e));

            a << i.getVMStatus ();
          }

          // DiagnoseDescription
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "DiagnoseDescription",
                e));

            a << i.getDiagnoseDescription ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VMType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VMType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VMStatusTypes::ListStream& l,
                    const VMType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const VMDateTime& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VMDateTime& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VMStatusTypes::ListStream& l,
                    const VMDateTime& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const VMStatus& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VMStatus& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VMStatusTypes::ListStream& l,
                    const VMStatus& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VMStatusTypes::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

