// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from generated-images-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_GENERATED_IMAGES_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_GENERATED_IMAGES_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace Screen
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__SCREEN
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__SCREEN
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        class ContestImage;
        class BasicImage;
        class GeneratedImages;
        class Confirmation_custom_attribute;
        class PartySelectionDialogs;
        class LanguageScreen;
        class SuperNullScreen;
        class BallotSelectionDialogs;
        class Confirmation_dialog;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/Screen
       * schema namespace.
       */
      namespace Screen
      {
        /**
         * @brief Class corresponding to the %ContestImage schema type.
         *
         * @nosubgrouping
         */
        class ContestImage: public ::Smartmatic::SAES::Voting::Screen::Type
        {
          public:
          /**
           * @name CustomAttributeDialog
           *
           * @brief Accessor and modifier functions for the %CustomAttributeDialog
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage CustomAttributeDialogType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CustomAttributeDialogType > CustomAttributeDialogOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CustomAttributeDialogType, char > CustomAttributeDialogTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CustomAttributeDialogOptional&
          getCustomAttributeDialog () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CustomAttributeDialogOptional&
          getCustomAttributeDialog ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCustomAttributeDialog (const CustomAttributeDialogType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setCustomAttributeDialog (const CustomAttributeDialogOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCustomAttributeDialog (::std::auto_ptr< CustomAttributeDialogType > p);

          //@}

          /**
           * @name confirmation-custom-attribute
           *
           * @brief Accessor and modifier functions for the %confirmation-custom-attribute
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::Confirmation_custom_attribute Confirmation_custom_attributeType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Confirmation_custom_attributeType > Confirmation_custom_attributeSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Confirmation_custom_attributeSequence::iterator Confirmation_custom_attributeIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Confirmation_custom_attributeSequence::const_iterator Confirmation_custom_attributeConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Confirmation_custom_attributeType, char > Confirmation_custom_attributeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Confirmation_custom_attributeSequence&
          getConfirmation_custom_attribute () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Confirmation_custom_attributeSequence&
          getConfirmation_custom_attribute ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setConfirmation_custom_attribute (const Confirmation_custom_attributeSequence& s);

          //@}

          /**
           * @name PartySelectionDialogs
           *
           * @brief Accessor and modifier functions for the %PartySelectionDialogs
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::PartySelectionDialogs PartySelectionDialogsType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< PartySelectionDialogsType > PartySelectionDialogsSequence;

          /**
           * @brief Element iterator type.
           */
          typedef PartySelectionDialogsSequence::iterator PartySelectionDialogsIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef PartySelectionDialogsSequence::const_iterator PartySelectionDialogsConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PartySelectionDialogsType, char > PartySelectionDialogsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const PartySelectionDialogsSequence&
          getPartySelectionDialogs () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          PartySelectionDialogsSequence&
          getPartySelectionDialogs ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setPartySelectionDialogs (const PartySelectionDialogsSequence& s);

          //@}

          /**
           * @name custom-attribute-name
           *
           * @brief Accessor and modifier functions for the %custom-attribute-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Custom_attribute_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_nameType, char > Custom_attribute_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_attribute_nameType&
          getCustom_attribute_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_attribute_nameType&
          getCustom_attribute_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_attribute_name (const Custom_attribute_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_attribute_name (::std::auto_ptr< Custom_attribute_nameType > p);

          //@}

          /**
           * @name custom-attribute-code
           *
           * @brief Accessor and modifier functions for the %custom-attribute-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Custom_attribute_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_codeType, char > Custom_attribute_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_attribute_codeType&
          getCustom_attribute_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_attribute_codeType&
          getCustom_attribute_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_attribute_code (const Custom_attribute_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_attribute_code (::std::auto_ptr< Custom_attribute_codeType > p);

          //@}

          /**
           * @name custom-attribute-description-key
           *
           * @brief Accessor and modifier functions for the %custom-attribute-description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Custom_attribute_description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_description_keyType, char > Custom_attribute_description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_attribute_description_keyType&
          getCustom_attribute_description_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_attribute_description_keyType&
          getCustom_attribute_description_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_attribute_description_key (const Custom_attribute_description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_attribute_description_key (::std::auto_ptr< Custom_attribute_description_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ContestImage ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ContestImage (const Custom_attribute_nameType&,
                        const Custom_attribute_codeType&,
                        const Custom_attribute_description_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ContestImage (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                        ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ContestImage (const ContestImage& x,
                        ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                        ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ContestImage*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ContestImage ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          CustomAttributeDialogOptional CustomAttributeDialog_;
          Confirmation_custom_attributeSequence confirmation_custom_attribute_;
          PartySelectionDialogsSequence PartySelectionDialogs_;
          ::xsd::cxx::tree::one< Custom_attribute_nameType > custom_attribute_name_;
          ::xsd::cxx::tree::one< Custom_attribute_codeType > custom_attribute_code_;
          ::xsd::cxx::tree::one< Custom_attribute_description_keyType > custom_attribute_description_key_;

          //@endcond
        };

        bool
        operator== (const ContestImage&, const ContestImage&);

        bool
        operator!= (const ContestImage&, const ContestImage&);


        /**
         * @brief Class corresponding to the %BasicImage schema type.
         *
         * @nosubgrouping
         */
        class BasicImage: public ::Smartmatic::SAES::Voting::Screen::Type
        {
          public:
          /**
           * @name file-name
           *
           * @brief Accessor and modifier functions for the %file-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String File_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< File_nameType, char > File_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const File_nameType&
          getFile_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          File_nameType&
          getFile_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setFile_name (const File_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFile_name (::std::auto_ptr< File_nameType > p);

          //@}

          /**
           * @name language-code
           *
           * @brief Accessor and modifier functions for the %language-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Language_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Language_codeType, char > Language_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Language_codeType&
          getLanguage_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Language_codeType&
          getLanguage_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setLanguage_code (const Language_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLanguage_code (::std::auto_ptr< Language_codeType > p);

          //@}

          /**
           * @name country-code
           *
           * @brief Accessor and modifier functions for the %country-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Country_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Country_codeType, char > Country_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Country_codeType&
          getCountry_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Country_codeType&
          getCountry_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCountry_code (const Country_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCountry_code (::std::auto_ptr< Country_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BasicImage ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BasicImage (const File_nameType&,
                      const Language_codeType&,
                      const Country_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BasicImage (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                      ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BasicImage (const BasicImage& x,
                      ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                      ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BasicImage*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BasicImage ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          ::xsd::cxx::tree::one< File_nameType > file_name_;
          ::xsd::cxx::tree::one< Language_codeType > language_code_;
          ::xsd::cxx::tree::one< Country_codeType > country_code_;

          //@endcond
        };

        bool
        operator== (const BasicImage&, const BasicImage&);

        bool
        operator!= (const BasicImage&, const BasicImage&);


        /**
         * @brief Class corresponding to the %GeneratedImages schema type.
         *
         * @nosubgrouping
         */
        class GeneratedImages: public ::Smartmatic::SAES::Voting::Screen::Type
        {
          public:
          /**
           * @name WelcomeScreen
           *
           * @brief Accessor and modifier functions for the %WelcomeScreen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage WelcomeScreenType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WelcomeScreenType, char > WelcomeScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const WelcomeScreenType&
          getWelcomeScreen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          WelcomeScreenType&
          getWelcomeScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setWelcomeScreen (const WelcomeScreenType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setWelcomeScreen (::std::auto_ptr< WelcomeScreenType > p);

          //@}

          /**
           * @name LanguageScreen
           *
           * @brief Accessor and modifier functions for the %LanguageScreen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::LanguageScreen LanguageScreenType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguageScreenType, char > LanguageScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LanguageScreenType&
          getLanguageScreen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LanguageScreenType&
          getLanguageScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLanguageScreen (const LanguageScreenType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLanguageScreen (::std::auto_ptr< LanguageScreenType > p);

          //@}

          /**
           * @name SuperNullScreen
           *
           * @brief Accessor and modifier functions for the %SuperNullScreen
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::SuperNullScreen SuperNullScreenType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SuperNullScreenType > SuperNullScreenOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SuperNullScreenType, char > SuperNullScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SuperNullScreenOptional&
          getSuperNullScreen () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SuperNullScreenOptional&
          getSuperNullScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuperNullScreen (const SuperNullScreenType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setSuperNullScreen (const SuperNullScreenOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSuperNullScreen (::std::auto_ptr< SuperNullScreenType > p);

          //@}

          /**
           * @name NullScreen
           *
           * @brief Accessor and modifier functions for the %NullScreen
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage NullScreenType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NullScreenType > NullScreenOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NullScreenType, char > NullScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NullScreenOptional&
          getNullScreen () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NullScreenOptional&
          getNullScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setNullScreen (const NullScreenType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setNullScreen (const NullScreenOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setNullScreen (::std::auto_ptr< NullScreenType > p);

          //@}

          /**
           * @name ContestScreen
           *
           * @brief Accessor and modifier functions for the %ContestScreen
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::ContestImage ContestScreenType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ContestScreenType > ContestScreenSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ContestScreenSequence::iterator ContestScreenIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ContestScreenSequence::const_iterator ContestScreenConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ContestScreenType, char > ContestScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ContestScreenSequence&
          getContestScreen () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ContestScreenSequence&
          getContestScreen ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContestScreen (const ContestScreenSequence& s);

          //@}

          /**
           * @name PrintScreen
           *
           * @brief Accessor and modifier functions for the %PrintScreen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage PrintScreenType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrintScreenType, char > PrintScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PrintScreenType&
          getPrintScreen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PrintScreenType&
          getPrintScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPrintScreen (const PrintScreenType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPrintScreen (::std::auto_ptr< PrintScreenType > p);

          //@}

          /**
           * @name FoldVoteScreen
           *
           * @brief Accessor and modifier functions for the %FoldVoteScreen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage FoldVoteScreenType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FoldVoteScreenType, char > FoldVoteScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FoldVoteScreenType&
          getFoldVoteScreen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FoldVoteScreenType&
          getFoldVoteScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setFoldVoteScreen (const FoldVoteScreenType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFoldVoteScreen (::std::auto_ptr< FoldVoteScreenType > p);

          //@}

          /**
           * @name SmartCardScreen
           *
           * @brief Accessor and modifier functions for the %SmartCardScreen
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage SmartCardScreenType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SmartCardScreenType, char > SmartCardScreenTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SmartCardScreenType&
          getSmartCardScreen () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SmartCardScreenType&
          getSmartCardScreen ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSmartCardScreen (const SmartCardScreenType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSmartCardScreen (::std::auto_ptr< SmartCardScreenType > p);

          //@}

          /**
           * @name voting-center
           *
           * @brief Accessor and modifier functions for the %voting-center
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Voting_centerType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_centerType, char > Voting_centerTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Voting_centerType&
          getVoting_center () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Voting_centerType&
          getVoting_center ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVoting_center (const Voting_centerType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_center (::std::auto_ptr< Voting_centerType > p);

          //@}

          /**
           * @name election-name
           *
           * @brief Accessor and modifier functions for the %election-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Election_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Election_nameType, char > Election_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Election_nameType&
          getElection_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Election_nameType&
          getElection_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setElection_name (const Election_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElection_name (::std::auto_ptr< Election_nameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          GeneratedImages ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          GeneratedImages (const WelcomeScreenType&,
                           const LanguageScreenType&,
                           const PrintScreenType&,
                           const FoldVoteScreenType&,
                           const SmartCardScreenType&,
                           const Voting_centerType&,
                           const Election_nameType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          GeneratedImages (::std::auto_ptr< WelcomeScreenType >&,
                           ::std::auto_ptr< LanguageScreenType >&,
                           ::std::auto_ptr< PrintScreenType >&,
                           ::std::auto_ptr< FoldVoteScreenType >&,
                           ::std::auto_ptr< SmartCardScreenType >&,
                           const Voting_centerType&,
                           const Election_nameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GeneratedImages (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                           ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GeneratedImages (const GeneratedImages& x,
                           ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                           ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual GeneratedImages*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~GeneratedImages ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          ::xsd::cxx::tree::one< WelcomeScreenType > WelcomeScreen_;
          ::xsd::cxx::tree::one< LanguageScreenType > LanguageScreen_;
          SuperNullScreenOptional SuperNullScreen_;
          NullScreenOptional NullScreen_;
          ContestScreenSequence ContestScreen_;
          ::xsd::cxx::tree::one< PrintScreenType > PrintScreen_;
          ::xsd::cxx::tree::one< FoldVoteScreenType > FoldVoteScreen_;
          ::xsd::cxx::tree::one< SmartCardScreenType > SmartCardScreen_;
          ::xsd::cxx::tree::one< Voting_centerType > voting_center_;
          ::xsd::cxx::tree::one< Election_nameType > election_name_;

          //@endcond
        };

        bool
        operator== (const GeneratedImages&, const GeneratedImages&);

        bool
        operator!= (const GeneratedImages&, const GeneratedImages&);


        /**
         * @brief Class corresponding to the %confirmation-custom-attribute schema type.
         *
         * @nosubgrouping
         */
        class Confirmation_custom_attribute: public ::Smartmatic::SAES::Voting::Screen::BasicImage
        {
          public:
          /**
           * @name custom-attribute-code
           *
           * @brief Accessor and modifier functions for the %custom-attribute-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Custom_attribute_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_codeType, char > Custom_attribute_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_attribute_codeType&
          getCustom_attribute_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_attribute_codeType&
          getCustom_attribute_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_attribute_code (const Custom_attribute_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_attribute_code (::std::auto_ptr< Custom_attribute_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Confirmation_custom_attribute ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Confirmation_custom_attribute (const File_nameType&,
                                         const Language_codeType&,
                                         const Country_codeType&,
                                         const Custom_attribute_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Confirmation_custom_attribute (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                         ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Confirmation_custom_attribute (const Confirmation_custom_attribute& x,
                                         ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                         ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Confirmation_custom_attribute*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Confirmation_custom_attribute ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          ::xsd::cxx::tree::one< Custom_attribute_codeType > custom_attribute_code_;

          //@endcond
        };

        bool
        operator== (const Confirmation_custom_attribute&, const Confirmation_custom_attribute&);

        bool
        operator!= (const Confirmation_custom_attribute&, const Confirmation_custom_attribute&);


        /**
         * @brief Class corresponding to the %PartySelectionDialogs schema type.
         *
         * @nosubgrouping
         */
        class PartySelectionDialogs: public ::Smartmatic::SAES::Voting::Screen::BasicImage
        {
          public:
          /**
           * @name BallotSelectionDialogs
           *
           * @brief Accessor and modifier functions for the %BallotSelectionDialogs
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BallotSelectionDialogs BallotSelectionDialogsType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< BallotSelectionDialogsType > BallotSelectionDialogsSequence;

          /**
           * @brief Element iterator type.
           */
          typedef BallotSelectionDialogsSequence::iterator BallotSelectionDialogsIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef BallotSelectionDialogsSequence::const_iterator BallotSelectionDialogsConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BallotSelectionDialogsType, char > BallotSelectionDialogsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const BallotSelectionDialogsSequence&
          getBallotSelectionDialogs () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          BallotSelectionDialogsSequence&
          getBallotSelectionDialogs ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallotSelectionDialogs (const BallotSelectionDialogsSequence& s);

          //@}

          /**
           * @name contest-code
           *
           * @brief Accessor and modifier functions for the %contest-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Contest_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_codeType, char > Contest_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_codeType&
          getContest_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_codeType&
          getContest_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_code (const Contest_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_code (::std::auto_ptr< Contest_codeType > p);

          //@}

          /**
           * @name contest-custom-code
           *
           * @brief Accessor and modifier functions for the %contest-custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Contest_custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_custom_codeType, char > Contest_custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_custom_codeType&
          getContest_custom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_custom_codeType&
          getContest_custom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_custom_code (const Contest_custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_custom_code (::std::auto_ptr< Contest_custom_codeType > p);

          //@}

          /**
           * @name contest-title-key
           *
           * @brief Accessor and modifier functions for the %contest-title-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Contest_title_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_title_keyType, char > Contest_title_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_title_keyType&
          getContest_title_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_title_keyType&
          getContest_title_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_title_key (const Contest_title_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_title_key (::std::auto_ptr< Contest_title_keyType > p);

          //@}

          /**
           * @name contest-abstract-key
           *
           * @brief Accessor and modifier functions for the %contest-abstract-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Contest_abstract_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_abstract_keyType, char > Contest_abstract_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_abstract_keyType&
          getContest_abstract_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_abstract_keyType&
          getContest_abstract_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_abstract_key (const Contest_abstract_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_abstract_key (::std::auto_ptr< Contest_abstract_keyType > p);

          //@}

          /**
           * @name contest-help-key
           *
           * @brief Accessor and modifier functions for the %contest-help-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Contest_help_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_help_keyType, char > Contest_help_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_help_keyType&
          getContest_help_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_help_keyType&
          getContest_help_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_help_key (const Contest_help_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_help_key (::std::auto_ptr< Contest_help_keyType > p);

          //@}

          /**
           * @name district-custom-code
           *
           * @brief Accessor and modifier functions for the %district-custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String District_custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< District_custom_codeType, char > District_custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const District_custom_codeType&
          getDistrict_custom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          District_custom_codeType&
          getDistrict_custom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDistrict_custom_code (const District_custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDistrict_custom_code (::std::auto_ptr< District_custom_codeType > p);

          //@}

          /**
           * @name district-description-key
           *
           * @brief Accessor and modifier functions for the %district-description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String District_description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< District_description_keyType, char > District_description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const District_description_keyType&
          getDistrict_description_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          District_description_keyType&
          getDistrict_description_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDistrict_description_key (const District_description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDistrict_description_key (::std::auto_ptr< District_description_keyType > p);

          //@}

          /**
           * @name district-name-key
           *
           * @brief Accessor and modifier functions for the %district-name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String District_name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< District_name_keyType, char > District_name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const District_name_keyType&
          getDistrict_name_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          District_name_keyType&
          getDistrict_name_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDistrict_name_key (const District_name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDistrict_name_key (::std::auto_ptr< District_name_keyType > p);

          //@}

          /**
           * @name custom-attribute-value
           *
           * @brief Accessor and modifier functions for the %custom-attribute-value
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Custom_attribute_valueType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_valueType, char > Custom_attribute_valueTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_attribute_valueType&
          getCustom_attribute_value () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_attribute_valueType&
          getCustom_attribute_value ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_attribute_value (const Custom_attribute_valueType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_attribute_value (::std::auto_ptr< Custom_attribute_valueType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PartySelectionDialogs ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PartySelectionDialogs (const File_nameType&,
                                 const Language_codeType&,
                                 const Country_codeType&,
                                 const Contest_codeType&,
                                 const Contest_custom_codeType&,
                                 const Contest_title_keyType&,
                                 const Contest_abstract_keyType&,
                                 const Contest_help_keyType&,
                                 const District_custom_codeType&,
                                 const District_description_keyType&,
                                 const District_name_keyType&,
                                 const Custom_attribute_valueType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PartySelectionDialogs (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PartySelectionDialogs (const PartySelectionDialogs& x,
                                 ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PartySelectionDialogs*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PartySelectionDialogs ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          BallotSelectionDialogsSequence BallotSelectionDialogs_;
          ::xsd::cxx::tree::one< Contest_codeType > contest_code_;
          ::xsd::cxx::tree::one< Contest_custom_codeType > contest_custom_code_;
          ::xsd::cxx::tree::one< Contest_title_keyType > contest_title_key_;
          ::xsd::cxx::tree::one< Contest_abstract_keyType > contest_abstract_key_;
          ::xsd::cxx::tree::one< Contest_help_keyType > contest_help_key_;
          ::xsd::cxx::tree::one< District_custom_codeType > district_custom_code_;
          ::xsd::cxx::tree::one< District_description_keyType > district_description_key_;
          ::xsd::cxx::tree::one< District_name_keyType > district_name_key_;
          ::xsd::cxx::tree::one< Custom_attribute_valueType > custom_attribute_value_;

          //@endcond
        };

        bool
        operator== (const PartySelectionDialogs&, const PartySelectionDialogs&);

        bool
        operator!= (const PartySelectionDialogs&, const PartySelectionDialogs&);


        /**
         * @brief Class corresponding to the %LanguageScreen schema type.
         *
         * @nosubgrouping
         */
        class LanguageScreen: public ::Smartmatic::SAES::Voting::Screen::BasicImage
        {
          public:
          /**
           * @name confirmation-dialog
           *
           * @brief Accessor and modifier functions for the %confirmation-dialog
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::Confirmation_dialog Confirmation_dialogType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Confirmation_dialogType > Confirmation_dialogSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Confirmation_dialogSequence::iterator Confirmation_dialogIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Confirmation_dialogSequence::const_iterator Confirmation_dialogConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Confirmation_dialogType, char > Confirmation_dialogTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Confirmation_dialogSequence&
          getConfirmation_dialog () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Confirmation_dialogSequence&
          getConfirmation_dialog ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setConfirmation_dialog (const Confirmation_dialogSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          LanguageScreen ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          LanguageScreen (const File_nameType&,
                          const Language_codeType&,
                          const Country_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          LanguageScreen (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                          ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          LanguageScreen (const LanguageScreen& x,
                          ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                          ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual LanguageScreen*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~LanguageScreen ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          Confirmation_dialogSequence confirmation_dialog_;

          //@endcond
        };

        bool
        operator== (const LanguageScreen&, const LanguageScreen&);

        bool
        operator!= (const LanguageScreen&, const LanguageScreen&);


        /**
         * @brief Class corresponding to the %SuperNullScreen schema type.
         *
         * @nosubgrouping
         */
        class SuperNullScreen: public ::Smartmatic::SAES::Voting::Screen::Type
        {
          public:
          /**
           * @name super-null-dialog
           *
           * @brief Accessor and modifier functions for the %super-null-dialog
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage Super_null_dialogType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Super_null_dialogType, char > Super_null_dialogTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Super_null_dialogType&
          getSuper_null_dialog () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Super_null_dialogType&
          getSuper_null_dialog ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuper_null_dialog (const Super_null_dialogType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSuper_null_dialog (::std::auto_ptr< Super_null_dialogType > p);

          //@}

          /**
           * @name confirmation-dialog
           *
           * @brief Accessor and modifier functions for the %confirmation-dialog
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::BasicImage Confirmation_dialogType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Confirmation_dialogType, char > Confirmation_dialogTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Confirmation_dialogType&
          getConfirmation_dialog () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Confirmation_dialogType&
          getConfirmation_dialog ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setConfirmation_dialog (const Confirmation_dialogType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setConfirmation_dialog (::std::auto_ptr< Confirmation_dialogType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SuperNullScreen ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SuperNullScreen (const Super_null_dialogType&,
                           const Confirmation_dialogType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SuperNullScreen (::std::auto_ptr< Super_null_dialogType >&,
                           ::std::auto_ptr< Confirmation_dialogType >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SuperNullScreen (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                           ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SuperNullScreen (const SuperNullScreen& x,
                           ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                           ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SuperNullScreen*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SuperNullScreen ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          ::xsd::cxx::tree::one< Super_null_dialogType > super_null_dialog_;
          ::xsd::cxx::tree::one< Confirmation_dialogType > confirmation_dialog_;

          //@endcond
        };

        bool
        operator== (const SuperNullScreen&, const SuperNullScreen&);

        bool
        operator!= (const SuperNullScreen&, const SuperNullScreen&);


        /**
         * @brief Class corresponding to the %BallotSelectionDialogs schema type.
         *
         * @nosubgrouping
         */
        class BallotSelectionDialogs: public ::Smartmatic::SAES::Voting::Screen::BasicImage
        {
          public:
          /**
           * @name party-name
           *
           * @brief Accessor and modifier functions for the %party-name
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Party_nameType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Party_nameType > Party_nameOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Party_nameType, char > Party_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Party_nameOptional&
          getParty_name () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Party_nameOptional&
          getParty_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParty_name (const Party_nameType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setParty_name (const Party_nameOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setParty_name (::std::auto_ptr< Party_nameType > p);

          //@}

          /**
           * @name party-abbreviation
           *
           * @brief Accessor and modifier functions for the %party-abbreviation
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Party_abbreviationType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Party_abbreviationType > Party_abbreviationOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Party_abbreviationType, char > Party_abbreviationTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Party_abbreviationOptional&
          getParty_abbreviation () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Party_abbreviationOptional&
          getParty_abbreviation ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParty_abbreviation (const Party_abbreviationType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setParty_abbreviation (const Party_abbreviationOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setParty_abbreviation (::std::auto_ptr< Party_abbreviationType > p);

          //@}

          /**
           * @name party-code
           *
           * @brief Accessor and modifier functions for the %party-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Party_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Party_codeType, char > Party_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Party_codeType&
          getParty_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Party_codeType&
          getParty_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParty_code (const Party_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setParty_code (::std::auto_ptr< Party_codeType > p);

          //@}

          /**
           * @name party-custom-code
           *
           * @brief Accessor and modifier functions for the %party-custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String Party_custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Party_custom_codeType, char > Party_custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Party_custom_codeType&
          getParty_custom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Party_custom_codeType&
          getParty_custom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParty_custom_code (const Party_custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setParty_custom_code (::std::auto_ptr< Party_custom_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BallotSelectionDialogs ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BallotSelectionDialogs (const File_nameType&,
                                  const Language_codeType&,
                                  const Country_codeType&,
                                  const Party_codeType&,
                                  const Party_custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BallotSelectionDialogs (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BallotSelectionDialogs (const BallotSelectionDialogs& x,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BallotSelectionDialogs*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BallotSelectionDialogs ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          Party_nameOptional party_name_;
          Party_abbreviationOptional party_abbreviation_;
          ::xsd::cxx::tree::one< Party_codeType > party_code_;
          ::xsd::cxx::tree::one< Party_custom_codeType > party_custom_code_;

          //@endcond
        };

        bool
        operator== (const BallotSelectionDialogs&, const BallotSelectionDialogs&);

        bool
        operator!= (const BallotSelectionDialogs&, const BallotSelectionDialogs&);


        /**
         * @brief Class corresponding to the %confirmation-dialog schema type.
         *
         * @nosubgrouping
         */
        class Confirmation_dialog: public ::Smartmatic::SAES::Voting::Screen::BasicImage
        {
          public:
          /**
           * @name language
           *
           * @brief Accessor and modifier functions for the %language
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Screen::String LanguageType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguageType, char > LanguageTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const LanguageType&
          getLanguage () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          LanguageType&
          getLanguage ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setLanguage (const LanguageType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLanguage (::std::auto_ptr< LanguageType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Confirmation_dialog ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Confirmation_dialog (const File_nameType&,
                               const Language_codeType&,
                               const Country_codeType&,
                               const LanguageType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Confirmation_dialog (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                               ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Confirmation_dialog (const Confirmation_dialog& x,
                               ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                               ::Smartmatic::SAES::Voting::Screen::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Confirmation_dialog*
          _clone (::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                  ::Smartmatic::SAES::Voting::Screen::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Confirmation_dialog ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::Screen::Flags);

          protected:
          ::xsd::cxx::tree::one< LanguageType > language_;

          //@endcond
        };

        bool
        operator== (const Confirmation_dialog&, const Confirmation_dialog&);

        bool
        operator!= (const Confirmation_dialog&, const Confirmation_dialog&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        /**
         * @name Parsing functions for the %GeneratedImages document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& uri,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& uri,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& id,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& id,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& is,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& is,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::SAES::Voting::Screen::Flags f = 0,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p = ::Smartmatic::SAES::Voting::Screen::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        /**
         * @name Serialization functions for the %GeneratedImages document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeGeneratedImages (::std::ostream& os,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeGeneratedImages (::std::ostream& os,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeGeneratedImages (::std::ostream& os,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  ::Smartmatic::SAES::Voting::Screen::ErrorHandler& eh,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeGeneratedImages (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeGeneratedImages (const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& x, 
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap (),
                                  ::Smartmatic::SAES::Voting::Screen::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const ContestImage&);

        void
        operator<< (::xercesc::DOMElement&, const BasicImage&);

        void
        operator<< (::xercesc::DOMElement&, const GeneratedImages&);

        void
        operator<< (::xercesc::DOMElement&, const Confirmation_custom_attribute&);

        void
        operator<< (::xercesc::DOMElement&, const PartySelectionDialogs&);

        void
        operator<< (::xercesc::DOMElement&, const LanguageScreen&);

        void
        operator<< (::xercesc::DOMElement&, const SuperNullScreen&);

        void
        operator<< (::xercesc::DOMElement&, const BallotSelectionDialogs&);

        void
        operator<< (::xercesc::DOMElement&, const Confirmation_dialog&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_GENERATED_IMAGES_SCHEMA_HXX
