// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "generated-images-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        // ContestImage
        // 

        const ContestImage::CustomAttributeDialogOptional& ContestImage::
        getCustomAttributeDialog () const
        {
          return this->CustomAttributeDialog_;
        }

        ContestImage::CustomAttributeDialogOptional& ContestImage::
        getCustomAttributeDialog ()
        {
          return this->CustomAttributeDialog_;
        }

        void ContestImage::
        setCustomAttributeDialog (const CustomAttributeDialogType& x)
        {
          this->CustomAttributeDialog_.set (x);
        }

        void ContestImage::
        setCustomAttributeDialog (const CustomAttributeDialogOptional& x)
        {
          this->CustomAttributeDialog_ = x;
        }

        void ContestImage::
        setCustomAttributeDialog (::std::auto_ptr< CustomAttributeDialogType > x)
        {
          this->CustomAttributeDialog_.set (x);
        }

        const ContestImage::Confirmation_custom_attributeSequence& ContestImage::
        getConfirmation_custom_attribute () const
        {
          return this->confirmation_custom_attribute_;
        }

        ContestImage::Confirmation_custom_attributeSequence& ContestImage::
        getConfirmation_custom_attribute ()
        {
          return this->confirmation_custom_attribute_;
        }

        void ContestImage::
        setConfirmation_custom_attribute (const Confirmation_custom_attributeSequence& s)
        {
          this->confirmation_custom_attribute_ = s;
        }

        const ContestImage::PartySelectionDialogsSequence& ContestImage::
        getPartySelectionDialogs () const
        {
          return this->PartySelectionDialogs_;
        }

        ContestImage::PartySelectionDialogsSequence& ContestImage::
        getPartySelectionDialogs ()
        {
          return this->PartySelectionDialogs_;
        }

        void ContestImage::
        setPartySelectionDialogs (const PartySelectionDialogsSequence& s)
        {
          this->PartySelectionDialogs_ = s;
        }

        const ContestImage::Custom_attribute_nameType& ContestImage::
        getCustom_attribute_name () const
        {
          return this->custom_attribute_name_.get ();
        }

        ContestImage::Custom_attribute_nameType& ContestImage::
        getCustom_attribute_name ()
        {
          return this->custom_attribute_name_.get ();
        }

        void ContestImage::
        setCustom_attribute_name (const Custom_attribute_nameType& x)
        {
          this->custom_attribute_name_.set (x);
        }

        void ContestImage::
        setCustom_attribute_name (::std::auto_ptr< Custom_attribute_nameType > x)
        {
          this->custom_attribute_name_.set (x);
        }

        const ContestImage::Custom_attribute_codeType& ContestImage::
        getCustom_attribute_code () const
        {
          return this->custom_attribute_code_.get ();
        }

        ContestImage::Custom_attribute_codeType& ContestImage::
        getCustom_attribute_code ()
        {
          return this->custom_attribute_code_.get ();
        }

        void ContestImage::
        setCustom_attribute_code (const Custom_attribute_codeType& x)
        {
          this->custom_attribute_code_.set (x);
        }

        void ContestImage::
        setCustom_attribute_code (::std::auto_ptr< Custom_attribute_codeType > x)
        {
          this->custom_attribute_code_.set (x);
        }

        const ContestImage::Custom_attribute_description_keyType& ContestImage::
        getCustom_attribute_description_key () const
        {
          return this->custom_attribute_description_key_.get ();
        }

        ContestImage::Custom_attribute_description_keyType& ContestImage::
        getCustom_attribute_description_key ()
        {
          return this->custom_attribute_description_key_.get ();
        }

        void ContestImage::
        setCustom_attribute_description_key (const Custom_attribute_description_keyType& x)
        {
          this->custom_attribute_description_key_.set (x);
        }

        void ContestImage::
        setCustom_attribute_description_key (::std::auto_ptr< Custom_attribute_description_keyType > x)
        {
          this->custom_attribute_description_key_.set (x);
        }


        // BasicImage
        // 

        const BasicImage::File_nameType& BasicImage::
        getFile_name () const
        {
          return this->file_name_.get ();
        }

        BasicImage::File_nameType& BasicImage::
        getFile_name ()
        {
          return this->file_name_.get ();
        }

        void BasicImage::
        setFile_name (const File_nameType& x)
        {
          this->file_name_.set (x);
        }

        void BasicImage::
        setFile_name (::std::auto_ptr< File_nameType > x)
        {
          this->file_name_.set (x);
        }

        const BasicImage::Language_codeType& BasicImage::
        getLanguage_code () const
        {
          return this->language_code_.get ();
        }

        BasicImage::Language_codeType& BasicImage::
        getLanguage_code ()
        {
          return this->language_code_.get ();
        }

        void BasicImage::
        setLanguage_code (const Language_codeType& x)
        {
          this->language_code_.set (x);
        }

        void BasicImage::
        setLanguage_code (::std::auto_ptr< Language_codeType > x)
        {
          this->language_code_.set (x);
        }

        const BasicImage::Country_codeType& BasicImage::
        getCountry_code () const
        {
          return this->country_code_.get ();
        }

        BasicImage::Country_codeType& BasicImage::
        getCountry_code ()
        {
          return this->country_code_.get ();
        }

        void BasicImage::
        setCountry_code (const Country_codeType& x)
        {
          this->country_code_.set (x);
        }

        void BasicImage::
        setCountry_code (::std::auto_ptr< Country_codeType > x)
        {
          this->country_code_.set (x);
        }


        // GeneratedImages
        // 

        const GeneratedImages::WelcomeScreenType& GeneratedImages::
        getWelcomeScreen () const
        {
          return this->WelcomeScreen_.get ();
        }

        GeneratedImages::WelcomeScreenType& GeneratedImages::
        getWelcomeScreen ()
        {
          return this->WelcomeScreen_.get ();
        }

        void GeneratedImages::
        setWelcomeScreen (const WelcomeScreenType& x)
        {
          this->WelcomeScreen_.set (x);
        }

        void GeneratedImages::
        setWelcomeScreen (::std::auto_ptr< WelcomeScreenType > x)
        {
          this->WelcomeScreen_.set (x);
        }

        const GeneratedImages::LanguageScreenType& GeneratedImages::
        getLanguageScreen () const
        {
          return this->LanguageScreen_.get ();
        }

        GeneratedImages::LanguageScreenType& GeneratedImages::
        getLanguageScreen ()
        {
          return this->LanguageScreen_.get ();
        }

        void GeneratedImages::
        setLanguageScreen (const LanguageScreenType& x)
        {
          this->LanguageScreen_.set (x);
        }

        void GeneratedImages::
        setLanguageScreen (::std::auto_ptr< LanguageScreenType > x)
        {
          this->LanguageScreen_.set (x);
        }

        const GeneratedImages::SuperNullScreenOptional& GeneratedImages::
        getSuperNullScreen () const
        {
          return this->SuperNullScreen_;
        }

        GeneratedImages::SuperNullScreenOptional& GeneratedImages::
        getSuperNullScreen ()
        {
          return this->SuperNullScreen_;
        }

        void GeneratedImages::
        setSuperNullScreen (const SuperNullScreenType& x)
        {
          this->SuperNullScreen_.set (x);
        }

        void GeneratedImages::
        setSuperNullScreen (const SuperNullScreenOptional& x)
        {
          this->SuperNullScreen_ = x;
        }

        void GeneratedImages::
        setSuperNullScreen (::std::auto_ptr< SuperNullScreenType > x)
        {
          this->SuperNullScreen_.set (x);
        }

        const GeneratedImages::NullScreenOptional& GeneratedImages::
        getNullScreen () const
        {
          return this->NullScreen_;
        }

        GeneratedImages::NullScreenOptional& GeneratedImages::
        getNullScreen ()
        {
          return this->NullScreen_;
        }

        void GeneratedImages::
        setNullScreen (const NullScreenType& x)
        {
          this->NullScreen_.set (x);
        }

        void GeneratedImages::
        setNullScreen (const NullScreenOptional& x)
        {
          this->NullScreen_ = x;
        }

        void GeneratedImages::
        setNullScreen (::std::auto_ptr< NullScreenType > x)
        {
          this->NullScreen_.set (x);
        }

        const GeneratedImages::ContestScreenSequence& GeneratedImages::
        getContestScreen () const
        {
          return this->ContestScreen_;
        }

        GeneratedImages::ContestScreenSequence& GeneratedImages::
        getContestScreen ()
        {
          return this->ContestScreen_;
        }

        void GeneratedImages::
        setContestScreen (const ContestScreenSequence& s)
        {
          this->ContestScreen_ = s;
        }

        const GeneratedImages::PrintScreenType& GeneratedImages::
        getPrintScreen () const
        {
          return this->PrintScreen_.get ();
        }

        GeneratedImages::PrintScreenType& GeneratedImages::
        getPrintScreen ()
        {
          return this->PrintScreen_.get ();
        }

        void GeneratedImages::
        setPrintScreen (const PrintScreenType& x)
        {
          this->PrintScreen_.set (x);
        }

        void GeneratedImages::
        setPrintScreen (::std::auto_ptr< PrintScreenType > x)
        {
          this->PrintScreen_.set (x);
        }

        const GeneratedImages::FoldVoteScreenType& GeneratedImages::
        getFoldVoteScreen () const
        {
          return this->FoldVoteScreen_.get ();
        }

        GeneratedImages::FoldVoteScreenType& GeneratedImages::
        getFoldVoteScreen ()
        {
          return this->FoldVoteScreen_.get ();
        }

        void GeneratedImages::
        setFoldVoteScreen (const FoldVoteScreenType& x)
        {
          this->FoldVoteScreen_.set (x);
        }

        void GeneratedImages::
        setFoldVoteScreen (::std::auto_ptr< FoldVoteScreenType > x)
        {
          this->FoldVoteScreen_.set (x);
        }

        const GeneratedImages::SmartCardScreenType& GeneratedImages::
        getSmartCardScreen () const
        {
          return this->SmartCardScreen_.get ();
        }

        GeneratedImages::SmartCardScreenType& GeneratedImages::
        getSmartCardScreen ()
        {
          return this->SmartCardScreen_.get ();
        }

        void GeneratedImages::
        setSmartCardScreen (const SmartCardScreenType& x)
        {
          this->SmartCardScreen_.set (x);
        }

        void GeneratedImages::
        setSmartCardScreen (::std::auto_ptr< SmartCardScreenType > x)
        {
          this->SmartCardScreen_.set (x);
        }

        const GeneratedImages::Voting_centerType& GeneratedImages::
        getVoting_center () const
        {
          return this->voting_center_.get ();
        }

        GeneratedImages::Voting_centerType& GeneratedImages::
        getVoting_center ()
        {
          return this->voting_center_.get ();
        }

        void GeneratedImages::
        setVoting_center (const Voting_centerType& x)
        {
          this->voting_center_.set (x);
        }

        void GeneratedImages::
        setVoting_center (::std::auto_ptr< Voting_centerType > x)
        {
          this->voting_center_.set (x);
        }

        const GeneratedImages::Election_nameType& GeneratedImages::
        getElection_name () const
        {
          return this->election_name_.get ();
        }

        GeneratedImages::Election_nameType& GeneratedImages::
        getElection_name ()
        {
          return this->election_name_.get ();
        }

        void GeneratedImages::
        setElection_name (const Election_nameType& x)
        {
          this->election_name_.set (x);
        }

        void GeneratedImages::
        setElection_name (::std::auto_ptr< Election_nameType > x)
        {
          this->election_name_.set (x);
        }


        // Confirmation_custom_attribute
        // 

        const Confirmation_custom_attribute::Custom_attribute_codeType& Confirmation_custom_attribute::
        getCustom_attribute_code () const
        {
          return this->custom_attribute_code_.get ();
        }

        Confirmation_custom_attribute::Custom_attribute_codeType& Confirmation_custom_attribute::
        getCustom_attribute_code ()
        {
          return this->custom_attribute_code_.get ();
        }

        void Confirmation_custom_attribute::
        setCustom_attribute_code (const Custom_attribute_codeType& x)
        {
          this->custom_attribute_code_.set (x);
        }

        void Confirmation_custom_attribute::
        setCustom_attribute_code (::std::auto_ptr< Custom_attribute_codeType > x)
        {
          this->custom_attribute_code_.set (x);
        }


        // PartySelectionDialogs
        // 

        const PartySelectionDialogs::BallotSelectionDialogsSequence& PartySelectionDialogs::
        getBallotSelectionDialogs () const
        {
          return this->BallotSelectionDialogs_;
        }

        PartySelectionDialogs::BallotSelectionDialogsSequence& PartySelectionDialogs::
        getBallotSelectionDialogs ()
        {
          return this->BallotSelectionDialogs_;
        }

        void PartySelectionDialogs::
        setBallotSelectionDialogs (const BallotSelectionDialogsSequence& s)
        {
          this->BallotSelectionDialogs_ = s;
        }

        const PartySelectionDialogs::Contest_codeType& PartySelectionDialogs::
        getContest_code () const
        {
          return this->contest_code_.get ();
        }

        PartySelectionDialogs::Contest_codeType& PartySelectionDialogs::
        getContest_code ()
        {
          return this->contest_code_.get ();
        }

        void PartySelectionDialogs::
        setContest_code (const Contest_codeType& x)
        {
          this->contest_code_.set (x);
        }

        void PartySelectionDialogs::
        setContest_code (::std::auto_ptr< Contest_codeType > x)
        {
          this->contest_code_.set (x);
        }

        const PartySelectionDialogs::Contest_custom_codeType& PartySelectionDialogs::
        getContest_custom_code () const
        {
          return this->contest_custom_code_.get ();
        }

        PartySelectionDialogs::Contest_custom_codeType& PartySelectionDialogs::
        getContest_custom_code ()
        {
          return this->contest_custom_code_.get ();
        }

        void PartySelectionDialogs::
        setContest_custom_code (const Contest_custom_codeType& x)
        {
          this->contest_custom_code_.set (x);
        }

        void PartySelectionDialogs::
        setContest_custom_code (::std::auto_ptr< Contest_custom_codeType > x)
        {
          this->contest_custom_code_.set (x);
        }

        const PartySelectionDialogs::Contest_title_keyType& PartySelectionDialogs::
        getContest_title_key () const
        {
          return this->contest_title_key_.get ();
        }

        PartySelectionDialogs::Contest_title_keyType& PartySelectionDialogs::
        getContest_title_key ()
        {
          return this->contest_title_key_.get ();
        }

        void PartySelectionDialogs::
        setContest_title_key (const Contest_title_keyType& x)
        {
          this->contest_title_key_.set (x);
        }

        void PartySelectionDialogs::
        setContest_title_key (::std::auto_ptr< Contest_title_keyType > x)
        {
          this->contest_title_key_.set (x);
        }

        const PartySelectionDialogs::Contest_abstract_keyType& PartySelectionDialogs::
        getContest_abstract_key () const
        {
          return this->contest_abstract_key_.get ();
        }

        PartySelectionDialogs::Contest_abstract_keyType& PartySelectionDialogs::
        getContest_abstract_key ()
        {
          return this->contest_abstract_key_.get ();
        }

        void PartySelectionDialogs::
        setContest_abstract_key (const Contest_abstract_keyType& x)
        {
          this->contest_abstract_key_.set (x);
        }

        void PartySelectionDialogs::
        setContest_abstract_key (::std::auto_ptr< Contest_abstract_keyType > x)
        {
          this->contest_abstract_key_.set (x);
        }

        const PartySelectionDialogs::Contest_help_keyType& PartySelectionDialogs::
        getContest_help_key () const
        {
          return this->contest_help_key_.get ();
        }

        PartySelectionDialogs::Contest_help_keyType& PartySelectionDialogs::
        getContest_help_key ()
        {
          return this->contest_help_key_.get ();
        }

        void PartySelectionDialogs::
        setContest_help_key (const Contest_help_keyType& x)
        {
          this->contest_help_key_.set (x);
        }

        void PartySelectionDialogs::
        setContest_help_key (::std::auto_ptr< Contest_help_keyType > x)
        {
          this->contest_help_key_.set (x);
        }

        const PartySelectionDialogs::District_custom_codeType& PartySelectionDialogs::
        getDistrict_custom_code () const
        {
          return this->district_custom_code_.get ();
        }

        PartySelectionDialogs::District_custom_codeType& PartySelectionDialogs::
        getDistrict_custom_code ()
        {
          return this->district_custom_code_.get ();
        }

        void PartySelectionDialogs::
        setDistrict_custom_code (const District_custom_codeType& x)
        {
          this->district_custom_code_.set (x);
        }

        void PartySelectionDialogs::
        setDistrict_custom_code (::std::auto_ptr< District_custom_codeType > x)
        {
          this->district_custom_code_.set (x);
        }

        const PartySelectionDialogs::District_description_keyType& PartySelectionDialogs::
        getDistrict_description_key () const
        {
          return this->district_description_key_.get ();
        }

        PartySelectionDialogs::District_description_keyType& PartySelectionDialogs::
        getDistrict_description_key ()
        {
          return this->district_description_key_.get ();
        }

        void PartySelectionDialogs::
        setDistrict_description_key (const District_description_keyType& x)
        {
          this->district_description_key_.set (x);
        }

        void PartySelectionDialogs::
        setDistrict_description_key (::std::auto_ptr< District_description_keyType > x)
        {
          this->district_description_key_.set (x);
        }

        const PartySelectionDialogs::District_name_keyType& PartySelectionDialogs::
        getDistrict_name_key () const
        {
          return this->district_name_key_.get ();
        }

        PartySelectionDialogs::District_name_keyType& PartySelectionDialogs::
        getDistrict_name_key ()
        {
          return this->district_name_key_.get ();
        }

        void PartySelectionDialogs::
        setDistrict_name_key (const District_name_keyType& x)
        {
          this->district_name_key_.set (x);
        }

        void PartySelectionDialogs::
        setDistrict_name_key (::std::auto_ptr< District_name_keyType > x)
        {
          this->district_name_key_.set (x);
        }

        const PartySelectionDialogs::Custom_attribute_valueType& PartySelectionDialogs::
        getCustom_attribute_value () const
        {
          return this->custom_attribute_value_.get ();
        }

        PartySelectionDialogs::Custom_attribute_valueType& PartySelectionDialogs::
        getCustom_attribute_value ()
        {
          return this->custom_attribute_value_.get ();
        }

        void PartySelectionDialogs::
        setCustom_attribute_value (const Custom_attribute_valueType& x)
        {
          this->custom_attribute_value_.set (x);
        }

        void PartySelectionDialogs::
        setCustom_attribute_value (::std::auto_ptr< Custom_attribute_valueType > x)
        {
          this->custom_attribute_value_.set (x);
        }


        // LanguageScreen
        // 

        const LanguageScreen::Confirmation_dialogSequence& LanguageScreen::
        getConfirmation_dialog () const
        {
          return this->confirmation_dialog_;
        }

        LanguageScreen::Confirmation_dialogSequence& LanguageScreen::
        getConfirmation_dialog ()
        {
          return this->confirmation_dialog_;
        }

        void LanguageScreen::
        setConfirmation_dialog (const Confirmation_dialogSequence& s)
        {
          this->confirmation_dialog_ = s;
        }


        // SuperNullScreen
        // 

        const SuperNullScreen::Super_null_dialogType& SuperNullScreen::
        getSuper_null_dialog () const
        {
          return this->super_null_dialog_.get ();
        }

        SuperNullScreen::Super_null_dialogType& SuperNullScreen::
        getSuper_null_dialog ()
        {
          return this->super_null_dialog_.get ();
        }

        void SuperNullScreen::
        setSuper_null_dialog (const Super_null_dialogType& x)
        {
          this->super_null_dialog_.set (x);
        }

        void SuperNullScreen::
        setSuper_null_dialog (::std::auto_ptr< Super_null_dialogType > x)
        {
          this->super_null_dialog_.set (x);
        }

        const SuperNullScreen::Confirmation_dialogType& SuperNullScreen::
        getConfirmation_dialog () const
        {
          return this->confirmation_dialog_.get ();
        }

        SuperNullScreen::Confirmation_dialogType& SuperNullScreen::
        getConfirmation_dialog ()
        {
          return this->confirmation_dialog_.get ();
        }

        void SuperNullScreen::
        setConfirmation_dialog (const Confirmation_dialogType& x)
        {
          this->confirmation_dialog_.set (x);
        }

        void SuperNullScreen::
        setConfirmation_dialog (::std::auto_ptr< Confirmation_dialogType > x)
        {
          this->confirmation_dialog_.set (x);
        }


        // BallotSelectionDialogs
        // 

        const BallotSelectionDialogs::Party_nameOptional& BallotSelectionDialogs::
        getParty_name () const
        {
          return this->party_name_;
        }

        BallotSelectionDialogs::Party_nameOptional& BallotSelectionDialogs::
        getParty_name ()
        {
          return this->party_name_;
        }

        void BallotSelectionDialogs::
        setParty_name (const Party_nameType& x)
        {
          this->party_name_.set (x);
        }

        void BallotSelectionDialogs::
        setParty_name (const Party_nameOptional& x)
        {
          this->party_name_ = x;
        }

        void BallotSelectionDialogs::
        setParty_name (::std::auto_ptr< Party_nameType > x)
        {
          this->party_name_.set (x);
        }

        const BallotSelectionDialogs::Party_abbreviationOptional& BallotSelectionDialogs::
        getParty_abbreviation () const
        {
          return this->party_abbreviation_;
        }

        BallotSelectionDialogs::Party_abbreviationOptional& BallotSelectionDialogs::
        getParty_abbreviation ()
        {
          return this->party_abbreviation_;
        }

        void BallotSelectionDialogs::
        setParty_abbreviation (const Party_abbreviationType& x)
        {
          this->party_abbreviation_.set (x);
        }

        void BallotSelectionDialogs::
        setParty_abbreviation (const Party_abbreviationOptional& x)
        {
          this->party_abbreviation_ = x;
        }

        void BallotSelectionDialogs::
        setParty_abbreviation (::std::auto_ptr< Party_abbreviationType > x)
        {
          this->party_abbreviation_.set (x);
        }

        const BallotSelectionDialogs::Party_codeType& BallotSelectionDialogs::
        getParty_code () const
        {
          return this->party_code_.get ();
        }

        BallotSelectionDialogs::Party_codeType& BallotSelectionDialogs::
        getParty_code ()
        {
          return this->party_code_.get ();
        }

        void BallotSelectionDialogs::
        setParty_code (const Party_codeType& x)
        {
          this->party_code_.set (x);
        }

        void BallotSelectionDialogs::
        setParty_code (::std::auto_ptr< Party_codeType > x)
        {
          this->party_code_.set (x);
        }

        const BallotSelectionDialogs::Party_custom_codeType& BallotSelectionDialogs::
        getParty_custom_code () const
        {
          return this->party_custom_code_.get ();
        }

        BallotSelectionDialogs::Party_custom_codeType& BallotSelectionDialogs::
        getParty_custom_code ()
        {
          return this->party_custom_code_.get ();
        }

        void BallotSelectionDialogs::
        setParty_custom_code (const Party_custom_codeType& x)
        {
          this->party_custom_code_.set (x);
        }

        void BallotSelectionDialogs::
        setParty_custom_code (::std::auto_ptr< Party_custom_codeType > x)
        {
          this->party_custom_code_.set (x);
        }


        // Confirmation_dialog
        // 

        const Confirmation_dialog::LanguageType& Confirmation_dialog::
        getLanguage () const
        {
          return this->language_.get ();
        }

        Confirmation_dialog::LanguageType& Confirmation_dialog::
        getLanguage ()
        {
          return this->language_.get ();
        }

        void Confirmation_dialog::
        setLanguage (const LanguageType& x)
        {
          this->language_.set (x);
        }

        void Confirmation_dialog::
        setLanguage (::std::auto_ptr< LanguageType > x)
        {
          this->language_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        // ContestImage
        //

        ContestImage::
        ContestImage ()
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          CustomAttributeDialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          confirmation_custom_attribute_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          PartySelectionDialogs_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_name_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_description_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        ContestImage::
        ContestImage (const Custom_attribute_nameType& custom_attribute_name,
                      const Custom_attribute_codeType& custom_attribute_code,
                      const Custom_attribute_description_keyType& custom_attribute_description_key)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          CustomAttributeDialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          confirmation_custom_attribute_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          PartySelectionDialogs_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_name_ (custom_attribute_name, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_code_ (custom_attribute_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_description_key_ (custom_attribute_description_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        ContestImage::
        ContestImage (const ContestImage& x,
                      ::Smartmatic::SAES::Voting::Screen::Flags f,
                      ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (x, f, c),
          CustomAttributeDialog_ (x.CustomAttributeDialog_, f, this),
          confirmation_custom_attribute_ (x.confirmation_custom_attribute_, f, this),
          PartySelectionDialogs_ (x.PartySelectionDialogs_, f, this),
          custom_attribute_name_ (x.custom_attribute_name_, f, this),
          custom_attribute_code_ (x.custom_attribute_code_, f, this),
          custom_attribute_description_key_ (x.custom_attribute_description_key_, f, this)
        {
        }

        ContestImage::
        ContestImage (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::Screen::Flags f,
                      ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          CustomAttributeDialog_ (f, this),
          confirmation_custom_attribute_ (f, this),
          PartySelectionDialogs_ (f, this),
          custom_attribute_name_ (f, this),
          custom_attribute_code_ (f, this),
          custom_attribute_description_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void ContestImage::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CustomAttributeDialog
            //
            if (n.name () == "CustomAttributeDialog" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< CustomAttributeDialogType > r (
                CustomAttributeDialogTraits::create (i, f, this));

              if (!this->CustomAttributeDialog_)
              {
                this->CustomAttributeDialog_.set (r);
                continue;
              }
            }

            // confirmation-custom-attribute
            //
            if (n.name () == "confirmation-custom-attribute" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< Confirmation_custom_attributeType > r (
                Confirmation_custom_attributeTraits::create (i, f, this));

              this->confirmation_custom_attribute_.push_back (r);
              continue;
            }

            // PartySelectionDialogs
            //
            if (n.name () == "PartySelectionDialogs" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< PartySelectionDialogsType > r (
                PartySelectionDialogsTraits::create (i, f, this));

              this->PartySelectionDialogs_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-attribute-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_attribute_nameType > r (
                Custom_attribute_nameTraits::create (i, f, this));

              this->custom_attribute_name_.set (r);
              continue;
            }

            if (n.name () == "custom-attribute-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_attribute_codeType > r (
                Custom_attribute_codeTraits::create (i, f, this));

              this->custom_attribute_code_.set (r);
              continue;
            }

            if (n.name () == "custom-attribute-description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_attribute_description_keyType > r (
                Custom_attribute_description_keyTraits::create (i, f, this));

              this->custom_attribute_description_key_.set (r);
              continue;
            }
          }

          if (!custom_attribute_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-attribute-name",
              "");
          }

          if (!custom_attribute_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-attribute-code",
              "");
          }

          if (!custom_attribute_description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-attribute-description-key",
              "");
          }
        }

        ContestImage* ContestImage::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class ContestImage (*this, f, c);
        }

        ContestImage::
        ~ContestImage ()
        {
        }

        bool
        operator== (const ContestImage& x, const ContestImage& y)
        {
          if (!(x.getCustomAttributeDialog () == y.getCustomAttributeDialog ()))
            return false;

          if (!(x.getConfirmation_custom_attribute () == y.getConfirmation_custom_attribute ()))
            return false;

          if (!(x.getPartySelectionDialogs () == y.getPartySelectionDialogs ()))
            return false;

          if (!(x.getCustom_attribute_name () == y.getCustom_attribute_name ()))
            return false;

          if (!(x.getCustom_attribute_code () == y.getCustom_attribute_code ()))
            return false;

          if (!(x.getCustom_attribute_description_key () == y.getCustom_attribute_description_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const ContestImage& x, const ContestImage& y)
        {
          return !(x == y);
        }

        // BasicImage
        //

        BasicImage::
        BasicImage ()
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          file_name_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          language_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          country_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        BasicImage::
        BasicImage (const File_nameType& file_name,
                    const Language_codeType& language_code,
                    const Country_codeType& country_code)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          file_name_ (file_name, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          language_code_ (language_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          country_code_ (country_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        BasicImage::
        BasicImage (const BasicImage& x,
                    ::Smartmatic::SAES::Voting::Screen::Flags f,
                    ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (x, f, c),
          file_name_ (x.file_name_, f, this),
          language_code_ (x.language_code_, f, this),
          country_code_ (x.country_code_, f, this)
        {
        }

        BasicImage::
        BasicImage (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::Screen::Flags f,
                    ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          file_name_ (f, this),
          language_code_ (f, this),
          country_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void BasicImage::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< File_nameType > r (
                File_nameTraits::create (i, f, this));

              this->file_name_.set (r);
              continue;
            }

            if (n.name () == "language-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Language_codeType > r (
                Language_codeTraits::create (i, f, this));

              this->language_code_.set (r);
              continue;
            }

            if (n.name () == "country-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Country_codeType > r (
                Country_codeTraits::create (i, f, this));

              this->country_code_.set (r);
              continue;
            }
          }

          if (!file_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "file-name",
              "");
          }

          if (!language_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "language-code",
              "");
          }

          if (!country_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "country-code",
              "");
          }
        }

        BasicImage* BasicImage::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class BasicImage (*this, f, c);
        }

        BasicImage::
        ~BasicImage ()
        {
        }

        bool
        operator== (const BasicImage& x, const BasicImage& y)
        {
          if (!(x.getFile_name () == y.getFile_name ()))
            return false;

          if (!(x.getLanguage_code () == y.getLanguage_code ()))
            return false;

          if (!(x.getCountry_code () == y.getCountry_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const BasicImage& x, const BasicImage& y)
        {
          return !(x == y);
        }

        // GeneratedImages
        //

        GeneratedImages::
        GeneratedImages ()
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          WelcomeScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          LanguageScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SuperNullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          NullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          ContestScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          PrintScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          FoldVoteScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SmartCardScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          voting_center_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          election_name_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        GeneratedImages::
        GeneratedImages (const WelcomeScreenType& WelcomeScreen,
                         const LanguageScreenType& LanguageScreen,
                         const PrintScreenType& PrintScreen,
                         const FoldVoteScreenType& FoldVoteScreen,
                         const SmartCardScreenType& SmartCardScreen,
                         const Voting_centerType& voting_center,
                         const Election_nameType& election_name)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          WelcomeScreen_ (WelcomeScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          LanguageScreen_ (LanguageScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SuperNullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          NullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          ContestScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          PrintScreen_ (PrintScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          FoldVoteScreen_ (FoldVoteScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SmartCardScreen_ (SmartCardScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          voting_center_ (voting_center, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          election_name_ (election_name, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        GeneratedImages::
        GeneratedImages (::std::auto_ptr< WelcomeScreenType >& WelcomeScreen,
                         ::std::auto_ptr< LanguageScreenType >& LanguageScreen,
                         ::std::auto_ptr< PrintScreenType >& PrintScreen,
                         ::std::auto_ptr< FoldVoteScreenType >& FoldVoteScreen,
                         ::std::auto_ptr< SmartCardScreenType >& SmartCardScreen,
                         const Voting_centerType& voting_center,
                         const Election_nameType& election_name)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          WelcomeScreen_ (WelcomeScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          LanguageScreen_ (LanguageScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SuperNullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          NullScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          ContestScreen_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          PrintScreen_ (PrintScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          FoldVoteScreen_ (FoldVoteScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          SmartCardScreen_ (SmartCardScreen, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          voting_center_ (voting_center, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          election_name_ (election_name, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        GeneratedImages::
        GeneratedImages (const GeneratedImages& x,
                         ::Smartmatic::SAES::Voting::Screen::Flags f,
                         ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (x, f, c),
          WelcomeScreen_ (x.WelcomeScreen_, f, this),
          LanguageScreen_ (x.LanguageScreen_, f, this),
          SuperNullScreen_ (x.SuperNullScreen_, f, this),
          NullScreen_ (x.NullScreen_, f, this),
          ContestScreen_ (x.ContestScreen_, f, this),
          PrintScreen_ (x.PrintScreen_, f, this),
          FoldVoteScreen_ (x.FoldVoteScreen_, f, this),
          SmartCardScreen_ (x.SmartCardScreen_, f, this),
          voting_center_ (x.voting_center_, f, this),
          election_name_ (x.election_name_, f, this)
        {
        }

        GeneratedImages::
        GeneratedImages (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::Screen::Flags f,
                         ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          WelcomeScreen_ (f, this),
          LanguageScreen_ (f, this),
          SuperNullScreen_ (f, this),
          NullScreen_ (f, this),
          ContestScreen_ (f, this),
          PrintScreen_ (f, this),
          FoldVoteScreen_ (f, this),
          SmartCardScreen_ (f, this),
          voting_center_ (f, this),
          election_name_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void GeneratedImages::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // WelcomeScreen
            //
            if (n.name () == "WelcomeScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< WelcomeScreenType > r (
                WelcomeScreenTraits::create (i, f, this));

              if (!WelcomeScreen_.present ())
              {
                this->WelcomeScreen_.set (r);
                continue;
              }
            }

            // LanguageScreen
            //
            if (n.name () == "LanguageScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< LanguageScreenType > r (
                LanguageScreenTraits::create (i, f, this));

              if (!LanguageScreen_.present ())
              {
                this->LanguageScreen_.set (r);
                continue;
              }
            }

            // SuperNullScreen
            //
            if (n.name () == "SuperNullScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< SuperNullScreenType > r (
                SuperNullScreenTraits::create (i, f, this));

              if (!this->SuperNullScreen_)
              {
                this->SuperNullScreen_.set (r);
                continue;
              }
            }

            // NullScreen
            //
            if (n.name () == "NullScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< NullScreenType > r (
                NullScreenTraits::create (i, f, this));

              if (!this->NullScreen_)
              {
                this->NullScreen_.set (r);
                continue;
              }
            }

            // ContestScreen
            //
            if (n.name () == "ContestScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< ContestScreenType > r (
                ContestScreenTraits::create (i, f, this));

              this->ContestScreen_.push_back (r);
              continue;
            }

            // PrintScreen
            //
            if (n.name () == "PrintScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< PrintScreenType > r (
                PrintScreenTraits::create (i, f, this));

              if (!PrintScreen_.present ())
              {
                this->PrintScreen_.set (r);
                continue;
              }
            }

            // FoldVoteScreen
            //
            if (n.name () == "FoldVoteScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< FoldVoteScreenType > r (
                FoldVoteScreenTraits::create (i, f, this));

              if (!FoldVoteScreen_.present ())
              {
                this->FoldVoteScreen_.set (r);
                continue;
              }
            }

            // SmartCardScreen
            //
            if (n.name () == "SmartCardScreen" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< SmartCardScreenType > r (
                SmartCardScreenTraits::create (i, f, this));

              if (!SmartCardScreen_.present ())
              {
                this->SmartCardScreen_.set (r);
                continue;
              }
            }

            break;
          }

          if (!WelcomeScreen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "WelcomeScreen",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          if (!LanguageScreen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LanguageScreen",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          if (!PrintScreen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PrintScreen",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          if (!FoldVoteScreen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FoldVoteScreen",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          if (!SmartCardScreen_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SmartCardScreen",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "voting-center" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_centerType > r (
                Voting_centerTraits::create (i, f, this));

              this->voting_center_.set (r);
              continue;
            }

            if (n.name () == "election-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Election_nameType > r (
                Election_nameTraits::create (i, f, this));

              this->election_name_.set (r);
              continue;
            }
          }

          if (!voting_center_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-center",
              "");
          }

          if (!election_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "election-name",
              "");
          }
        }

        GeneratedImages* GeneratedImages::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class GeneratedImages (*this, f, c);
        }

        GeneratedImages::
        ~GeneratedImages ()
        {
        }

        bool
        operator== (const GeneratedImages& x, const GeneratedImages& y)
        {
          if (!(x.getWelcomeScreen () == y.getWelcomeScreen ()))
            return false;

          if (!(x.getLanguageScreen () == y.getLanguageScreen ()))
            return false;

          if (!(x.getSuperNullScreen () == y.getSuperNullScreen ()))
            return false;

          if (!(x.getNullScreen () == y.getNullScreen ()))
            return false;

          if (!(x.getContestScreen () == y.getContestScreen ()))
            return false;

          if (!(x.getPrintScreen () == y.getPrintScreen ()))
            return false;

          if (!(x.getFoldVoteScreen () == y.getFoldVoteScreen ()))
            return false;

          if (!(x.getSmartCardScreen () == y.getSmartCardScreen ()))
            return false;

          if (!(x.getVoting_center () == y.getVoting_center ()))
            return false;

          if (!(x.getElection_name () == y.getElection_name ()))
            return false;

          return true;
        }

        bool
        operator!= (const GeneratedImages& x, const GeneratedImages& y)
        {
          return !(x == y);
        }

        // Confirmation_custom_attribute
        //

        Confirmation_custom_attribute::
        Confirmation_custom_attribute ()
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (),
          custom_attribute_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        Confirmation_custom_attribute::
        Confirmation_custom_attribute (const File_nameType& file_name,
                                       const Language_codeType& language_code,
                                       const Country_codeType& country_code,
                                       const Custom_attribute_codeType& custom_attribute_code)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (file_name,
                                                          language_code,
                                                          country_code),
          custom_attribute_code_ (custom_attribute_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        Confirmation_custom_attribute::
        Confirmation_custom_attribute (const Confirmation_custom_attribute& x,
                                       ::Smartmatic::SAES::Voting::Screen::Flags f,
                                       ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (x, f, c),
          custom_attribute_code_ (x.custom_attribute_code_, f, this)
        {
        }

        Confirmation_custom_attribute::
        Confirmation_custom_attribute (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::Voting::Screen::Flags f,
                                       ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          custom_attribute_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Confirmation_custom_attribute::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Screen::BasicImage::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-attribute-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_attribute_codeType > r (
                Custom_attribute_codeTraits::create (i, f, this));

              this->custom_attribute_code_.set (r);
              continue;
            }
          }

          if (!custom_attribute_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-attribute-code",
              "");
          }
        }

        Confirmation_custom_attribute* Confirmation_custom_attribute::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class Confirmation_custom_attribute (*this, f, c);
        }

        Confirmation_custom_attribute::
        ~Confirmation_custom_attribute ()
        {
        }

        bool
        operator== (const Confirmation_custom_attribute& x, const Confirmation_custom_attribute& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (y)))
            return false;

          if (!(x.getCustom_attribute_code () == y.getCustom_attribute_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Confirmation_custom_attribute& x, const Confirmation_custom_attribute& y)
        {
          return !(x == y);
        }

        // PartySelectionDialogs
        //

        PartySelectionDialogs::
        PartySelectionDialogs ()
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (),
          BallotSelectionDialogs_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_custom_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_title_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_abstract_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_help_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_custom_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_description_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_name_key_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_value_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        PartySelectionDialogs::
        PartySelectionDialogs (const File_nameType& file_name,
                               const Language_codeType& language_code,
                               const Country_codeType& country_code,
                               const Contest_codeType& contest_code,
                               const Contest_custom_codeType& contest_custom_code,
                               const Contest_title_keyType& contest_title_key,
                               const Contest_abstract_keyType& contest_abstract_key,
                               const Contest_help_keyType& contest_help_key,
                               const District_custom_codeType& district_custom_code,
                               const District_description_keyType& district_description_key,
                               const District_name_keyType& district_name_key,
                               const Custom_attribute_valueType& custom_attribute_value)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (file_name,
                                                          language_code,
                                                          country_code),
          BallotSelectionDialogs_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_code_ (contest_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_custom_code_ (contest_custom_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_title_key_ (contest_title_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_abstract_key_ (contest_abstract_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          contest_help_key_ (contest_help_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_custom_code_ (district_custom_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_description_key_ (district_description_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          district_name_key_ (district_name_key, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          custom_attribute_value_ (custom_attribute_value, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        PartySelectionDialogs::
        PartySelectionDialogs (const PartySelectionDialogs& x,
                               ::Smartmatic::SAES::Voting::Screen::Flags f,
                               ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (x, f, c),
          BallotSelectionDialogs_ (x.BallotSelectionDialogs_, f, this),
          contest_code_ (x.contest_code_, f, this),
          contest_custom_code_ (x.contest_custom_code_, f, this),
          contest_title_key_ (x.contest_title_key_, f, this),
          contest_abstract_key_ (x.contest_abstract_key_, f, this),
          contest_help_key_ (x.contest_help_key_, f, this),
          district_custom_code_ (x.district_custom_code_, f, this),
          district_description_key_ (x.district_description_key_, f, this),
          district_name_key_ (x.district_name_key_, f, this),
          custom_attribute_value_ (x.custom_attribute_value_, f, this)
        {
        }

        PartySelectionDialogs::
        PartySelectionDialogs (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::Screen::Flags f,
                               ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          BallotSelectionDialogs_ (f, this),
          contest_code_ (f, this),
          contest_custom_code_ (f, this),
          contest_title_key_ (f, this),
          contest_abstract_key_ (f, this),
          contest_help_key_ (f, this),
          district_custom_code_ (f, this),
          district_description_key_ (f, this),
          district_name_key_ (f, this),
          custom_attribute_value_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PartySelectionDialogs::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Screen::BasicImage::parse (p, f);

          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BallotSelectionDialogs
            //
            if (n.name () == "BallotSelectionDialogs" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< BallotSelectionDialogsType > r (
                BallotSelectionDialogsTraits::create (i, f, this));

              this->BallotSelectionDialogs_.push_back (r);
              continue;
            }

            break;
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "contest-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_codeType > r (
                Contest_codeTraits::create (i, f, this));

              this->contest_code_.set (r);
              continue;
            }

            if (n.name () == "contest-custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_custom_codeType > r (
                Contest_custom_codeTraits::create (i, f, this));

              this->contest_custom_code_.set (r);
              continue;
            }

            if (n.name () == "contest-title-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_title_keyType > r (
                Contest_title_keyTraits::create (i, f, this));

              this->contest_title_key_.set (r);
              continue;
            }

            if (n.name () == "contest-abstract-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_abstract_keyType > r (
                Contest_abstract_keyTraits::create (i, f, this));

              this->contest_abstract_key_.set (r);
              continue;
            }

            if (n.name () == "contest-help-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_help_keyType > r (
                Contest_help_keyTraits::create (i, f, this));

              this->contest_help_key_.set (r);
              continue;
            }

            if (n.name () == "district-custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< District_custom_codeType > r (
                District_custom_codeTraits::create (i, f, this));

              this->district_custom_code_.set (r);
              continue;
            }

            if (n.name () == "district-description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< District_description_keyType > r (
                District_description_keyTraits::create (i, f, this));

              this->district_description_key_.set (r);
              continue;
            }

            if (n.name () == "district-name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< District_name_keyType > r (
                District_name_keyTraits::create (i, f, this));

              this->district_name_key_.set (r);
              continue;
            }

            if (n.name () == "custom-attribute-value" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_attribute_valueType > r (
                Custom_attribute_valueTraits::create (i, f, this));

              this->custom_attribute_value_.set (r);
              continue;
            }
          }

          if (!contest_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-code",
              "");
          }

          if (!contest_custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-custom-code",
              "");
          }

          if (!contest_title_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-title-key",
              "");
          }

          if (!contest_abstract_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-abstract-key",
              "");
          }

          if (!contest_help_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-help-key",
              "");
          }

          if (!district_custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "district-custom-code",
              "");
          }

          if (!district_description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "district-description-key",
              "");
          }

          if (!district_name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "district-name-key",
              "");
          }

          if (!custom_attribute_value_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-attribute-value",
              "");
          }
        }

        PartySelectionDialogs* PartySelectionDialogs::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class PartySelectionDialogs (*this, f, c);
        }

        PartySelectionDialogs::
        ~PartySelectionDialogs ()
        {
        }

        bool
        operator== (const PartySelectionDialogs& x, const PartySelectionDialogs& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (y)))
            return false;

          if (!(x.getBallotSelectionDialogs () == y.getBallotSelectionDialogs ()))
            return false;

          if (!(x.getContest_code () == y.getContest_code ()))
            return false;

          if (!(x.getContest_custom_code () == y.getContest_custom_code ()))
            return false;

          if (!(x.getContest_title_key () == y.getContest_title_key ()))
            return false;

          if (!(x.getContest_abstract_key () == y.getContest_abstract_key ()))
            return false;

          if (!(x.getContest_help_key () == y.getContest_help_key ()))
            return false;

          if (!(x.getDistrict_custom_code () == y.getDistrict_custom_code ()))
            return false;

          if (!(x.getDistrict_description_key () == y.getDistrict_description_key ()))
            return false;

          if (!(x.getDistrict_name_key () == y.getDistrict_name_key ()))
            return false;

          if (!(x.getCustom_attribute_value () == y.getCustom_attribute_value ()))
            return false;

          return true;
        }

        bool
        operator!= (const PartySelectionDialogs& x, const PartySelectionDialogs& y)
        {
          return !(x == y);
        }

        // LanguageScreen
        //

        LanguageScreen::
        LanguageScreen ()
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (),
          confirmation_dialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        LanguageScreen::
        LanguageScreen (const File_nameType& file_name,
                        const Language_codeType& language_code,
                        const Country_codeType& country_code)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (file_name,
                                                          language_code,
                                                          country_code),
          confirmation_dialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        LanguageScreen::
        LanguageScreen (const LanguageScreen& x,
                        ::Smartmatic::SAES::Voting::Screen::Flags f,
                        ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (x, f, c),
          confirmation_dialog_ (x.confirmation_dialog_, f, this)
        {
        }

        LanguageScreen::
        LanguageScreen (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::Screen::Flags f,
                        ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          confirmation_dialog_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void LanguageScreen::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Screen::BasicImage::parse (p, f);

          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // confirmation-dialog
            //
            if (n.name () == "confirmation-dialog" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< Confirmation_dialogType > r (
                Confirmation_dialogTraits::create (i, f, this));

              this->confirmation_dialog_.push_back (r);
              continue;
            }

            break;
          }
        }

        LanguageScreen* LanguageScreen::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class LanguageScreen (*this, f, c);
        }

        LanguageScreen::
        ~LanguageScreen ()
        {
        }

        bool
        operator== (const LanguageScreen& x, const LanguageScreen& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (y)))
            return false;

          if (!(x.getConfirmation_dialog () == y.getConfirmation_dialog ()))
            return false;

          return true;
        }

        bool
        operator!= (const LanguageScreen& x, const LanguageScreen& y)
        {
          return !(x == y);
        }

        // SuperNullScreen
        //

        SuperNullScreen::
        SuperNullScreen ()
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          super_null_dialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          confirmation_dialog_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        SuperNullScreen::
        SuperNullScreen (const Super_null_dialogType& super_null_dialog,
                         const Confirmation_dialogType& confirmation_dialog)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          super_null_dialog_ (super_null_dialog, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          confirmation_dialog_ (confirmation_dialog, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        SuperNullScreen::
        SuperNullScreen (::std::auto_ptr< Super_null_dialogType >& super_null_dialog,
                         ::std::auto_ptr< Confirmation_dialogType >& confirmation_dialog)
        : ::Smartmatic::SAES::Voting::Screen::Type (),
          super_null_dialog_ (super_null_dialog, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          confirmation_dialog_ (confirmation_dialog, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        SuperNullScreen::
        SuperNullScreen (const SuperNullScreen& x,
                         ::Smartmatic::SAES::Voting::Screen::Flags f,
                         ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (x, f, c),
          super_null_dialog_ (x.super_null_dialog_, f, this),
          confirmation_dialog_ (x.confirmation_dialog_, f, this)
        {
        }

        SuperNullScreen::
        SuperNullScreen (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::Screen::Flags f,
                         ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::Type (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          super_null_dialog_ (f, this),
          confirmation_dialog_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SuperNullScreen::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // super-null-dialog
            //
            if (n.name () == "super-null-dialog" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< Super_null_dialogType > r (
                Super_null_dialogTraits::create (i, f, this));

              if (!super_null_dialog_.present ())
              {
                this->super_null_dialog_.set (r);
                continue;
              }
            }

            // confirmation-dialog
            //
            if (n.name () == "confirmation-dialog" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
            {
              ::std::auto_ptr< Confirmation_dialogType > r (
                Confirmation_dialogTraits::create (i, f, this));

              if (!confirmation_dialog_.present ())
              {
                this->confirmation_dialog_.set (r);
                continue;
              }
            }

            break;
          }

          if (!super_null_dialog_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "super-null-dialog",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }

          if (!confirmation_dialog_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "confirmation-dialog",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }
        }

        SuperNullScreen* SuperNullScreen::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class SuperNullScreen (*this, f, c);
        }

        SuperNullScreen::
        ~SuperNullScreen ()
        {
        }

        bool
        operator== (const SuperNullScreen& x, const SuperNullScreen& y)
        {
          if (!(x.getSuper_null_dialog () == y.getSuper_null_dialog ()))
            return false;

          if (!(x.getConfirmation_dialog () == y.getConfirmation_dialog ()))
            return false;

          return true;
        }

        bool
        operator!= (const SuperNullScreen& x, const SuperNullScreen& y)
        {
          return !(x == y);
        }

        // BallotSelectionDialogs
        //

        BallotSelectionDialogs::
        BallotSelectionDialogs ()
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (),
          party_name_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_abbreviation_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_custom_code_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        BallotSelectionDialogs::
        BallotSelectionDialogs (const File_nameType& file_name,
                                const Language_codeType& language_code,
                                const Country_codeType& country_code,
                                const Party_codeType& party_code,
                                const Party_custom_codeType& party_custom_code)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (file_name,
                                                          language_code,
                                                          country_code),
          party_name_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_abbreviation_ (::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_code_ (party_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this),
          party_custom_code_ (party_custom_code, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        BallotSelectionDialogs::
        BallotSelectionDialogs (const BallotSelectionDialogs& x,
                                ::Smartmatic::SAES::Voting::Screen::Flags f,
                                ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (x, f, c),
          party_name_ (x.party_name_, f, this),
          party_abbreviation_ (x.party_abbreviation_, f, this),
          party_code_ (x.party_code_, f, this),
          party_custom_code_ (x.party_custom_code_, f, this)
        {
        }

        BallotSelectionDialogs::
        BallotSelectionDialogs (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::Voting::Screen::Flags f,
                                ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          party_name_ (f, this),
          party_abbreviation_ (f, this),
          party_code_ (f, this),
          party_custom_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void BallotSelectionDialogs::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Screen::BasicImage::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "party-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Party_nameType > r (
                Party_nameTraits::create (i, f, this));

              this->party_name_.set (r);
              continue;
            }

            if (n.name () == "party-abbreviation" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Party_abbreviationType > r (
                Party_abbreviationTraits::create (i, f, this));

              this->party_abbreviation_.set (r);
              continue;
            }

            if (n.name () == "party-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Party_codeType > r (
                Party_codeTraits::create (i, f, this));

              this->party_code_.set (r);
              continue;
            }

            if (n.name () == "party-custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Party_custom_codeType > r (
                Party_custom_codeTraits::create (i, f, this));

              this->party_custom_code_.set (r);
              continue;
            }
          }

          if (!party_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "party-code",
              "");
          }

          if (!party_custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "party-custom-code",
              "");
          }
        }

        BallotSelectionDialogs* BallotSelectionDialogs::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class BallotSelectionDialogs (*this, f, c);
        }

        BallotSelectionDialogs::
        ~BallotSelectionDialogs ()
        {
        }

        bool
        operator== (const BallotSelectionDialogs& x, const BallotSelectionDialogs& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (y)))
            return false;

          if (!(x.getParty_name () == y.getParty_name ()))
            return false;

          if (!(x.getParty_abbreviation () == y.getParty_abbreviation ()))
            return false;

          if (!(x.getParty_code () == y.getParty_code ()))
            return false;

          if (!(x.getParty_custom_code () == y.getParty_custom_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const BallotSelectionDialogs& x, const BallotSelectionDialogs& y)
        {
          return !(x == y);
        }

        // Confirmation_dialog
        //

        Confirmation_dialog::
        Confirmation_dialog ()
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (),
          language_ (::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        Confirmation_dialog::
        Confirmation_dialog (const File_nameType& file_name,
                             const Language_codeType& language_code,
                             const Country_codeType& country_code,
                             const LanguageType& language)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (file_name,
                                                          language_code,
                                                          country_code),
          language_ (language, ::Smartmatic::SAES::Voting::Screen::Flags (), this)
        {
        }

        Confirmation_dialog::
        Confirmation_dialog (const Confirmation_dialog& x,
                             ::Smartmatic::SAES::Voting::Screen::Flags f,
                             ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (x, f, c),
          language_ (x.language_, f, this)
        {
        }

        Confirmation_dialog::
        Confirmation_dialog (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::Screen::Flags f,
                             ::Smartmatic::SAES::Voting::Screen::Container* c)
        : ::Smartmatic::SAES::Voting::Screen::BasicImage (e, f | ::Smartmatic::SAES::Voting::Screen::Flags::base, c),
          language_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Screen::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Confirmation_dialog::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          this->::Smartmatic::SAES::Voting::Screen::BasicImage::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "language" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< LanguageType > r (
                LanguageTraits::create (i, f, this));

              this->language_.set (r);
              continue;
            }
          }

          if (!language_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "language",
              "");
          }
        }

        Confirmation_dialog* Confirmation_dialog::
        _clone (::Smartmatic::SAES::Voting::Screen::Flags f,
                ::Smartmatic::SAES::Voting::Screen::Container* c) const
        {
          return new class Confirmation_dialog (*this, f, c);
        }

        Confirmation_dialog::
        ~Confirmation_dialog ()
        {
        }

        bool
        operator== (const Confirmation_dialog& x, const Confirmation_dialog& y)
        {
          if (!(static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (x) ==
                static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (y)))
            return false;

          if (!(x.getLanguage () == y.getLanguage ()))
            return false;

          return true;
        }

        bool
        operator!= (const Confirmation_dialog& x, const Confirmation_dialog& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& u,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& u,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
            ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
              d, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
              ::Smartmatic::SAES::Voting::Screen::parseGeneratedImages (
                c, f | ::Smartmatic::SAES::Voting::Screen::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "GeneratedImages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Screen::GeneratedImages, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GeneratedImages",
            "http://www.smartmatic.com/Saes/Voting/Screen");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages >
        parseGeneratedImages (::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::SAES::Voting::Screen::Flags f,
                              const ::Smartmatic::SAES::Voting::Screen::Properties&)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::Screen::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::Screen::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::Screen::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "GeneratedImages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Screen::GeneratedImages > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Screen::GeneratedImages, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GeneratedImages",
            "http://www.smartmatic.com/Saes/Voting/Screen");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Screen
      {
        void
        serializeGeneratedImages (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeGeneratedImages (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Screen::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeGeneratedImages (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  ::Smartmatic::SAES::Voting::Screen::ErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeGeneratedImages (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeGeneratedImages (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  ::Smartmatic::SAES::Voting::Screen::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "GeneratedImages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Screen")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "GeneratedImages",
              "http://www.smartmatic.com/Saes/Voting/Screen");
          }
        }

        ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeGeneratedImages (const ::Smartmatic::SAES::Voting::Screen::GeneratedImages& s,
                                  const ::Smartmatic::SAES::Voting::Screen::NamespaceInfomap& m,
                                  ::Smartmatic::SAES::Voting::Screen::Flags f)
        {
          ::Smartmatic::SAES::Voting::Screen::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "GeneratedImages",
              "http://www.smartmatic.com/Saes/Voting/Screen",
              m, f));

          ::Smartmatic::SAES::Voting::Screen::serializeGeneratedImages (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ContestImage& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::Type& > (i);

          // CustomAttributeDialog
          //
          if (i.getCustomAttributeDialog ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CustomAttributeDialog",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *i.getCustomAttributeDialog ();
          }

          // confirmation-custom-attribute
          //
          for (ContestImage::Confirmation_custom_attributeConstIterator
               b (i.getConfirmation_custom_attribute ().begin ()), n (i.getConfirmation_custom_attribute ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "confirmation-custom-attribute",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *b;
          }

          // PartySelectionDialogs
          //
          for (ContestImage::PartySelectionDialogsConstIterator
               b (i.getPartySelectionDialogs ().begin ()), n (i.getPartySelectionDialogs ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PartySelectionDialogs",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *b;
          }

          // custom-attribute-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-attribute-name",
                e));

            a << i.getCustom_attribute_name ();
          }

          // custom-attribute-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-attribute-code",
                e));

            a << i.getCustom_attribute_code ();
          }

          // custom-attribute-description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-attribute-description-key",
                e));

            a << i.getCustom_attribute_description_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BasicImage& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::Type& > (i);

          // file-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "file-name",
                e));

            a << i.getFile_name ();
          }

          // language-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "language-code",
                e));

            a << i.getLanguage_code ();
          }

          // country-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "country-code",
                e));

            a << i.getCountry_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const GeneratedImages& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::Type& > (i);

          // WelcomeScreen
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "WelcomeScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getWelcomeScreen ();
          }

          // LanguageScreen
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LanguageScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getLanguageScreen ();
          }

          // SuperNullScreen
          //
          if (i.getSuperNullScreen ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SuperNullScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *i.getSuperNullScreen ();
          }

          // NullScreen
          //
          if (i.getNullScreen ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NullScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *i.getNullScreen ();
          }

          // ContestScreen
          //
          for (GeneratedImages::ContestScreenConstIterator
               b (i.getContestScreen ().begin ()), n (i.getContestScreen ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ContestScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *b;
          }

          // PrintScreen
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PrintScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getPrintScreen ();
          }

          // FoldVoteScreen
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FoldVoteScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getFoldVoteScreen ();
          }

          // SmartCardScreen
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SmartCardScreen",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getSmartCardScreen ();
          }

          // voting-center
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-center",
                e));

            a << i.getVoting_center ();
          }

          // election-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "election-name",
                e));

            a << i.getElection_name ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Confirmation_custom_attribute& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (i);

          // custom-attribute-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-attribute-code",
                e));

            a << i.getCustom_attribute_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PartySelectionDialogs& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (i);

          // BallotSelectionDialogs
          //
          for (PartySelectionDialogs::BallotSelectionDialogsConstIterator
               b (i.getBallotSelectionDialogs ().begin ()), n (i.getBallotSelectionDialogs ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BallotSelectionDialogs",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *b;
          }

          // contest-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-code",
                e));

            a << i.getContest_code ();
          }

          // contest-custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-custom-code",
                e));

            a << i.getContest_custom_code ();
          }

          // contest-title-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-title-key",
                e));

            a << i.getContest_title_key ();
          }

          // contest-abstract-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-abstract-key",
                e));

            a << i.getContest_abstract_key ();
          }

          // contest-help-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-help-key",
                e));

            a << i.getContest_help_key ();
          }

          // district-custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "district-custom-code",
                e));

            a << i.getDistrict_custom_code ();
          }

          // district-description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "district-description-key",
                e));

            a << i.getDistrict_description_key ();
          }

          // district-name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "district-name-key",
                e));

            a << i.getDistrict_name_key ();
          }

          // custom-attribute-value
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-attribute-value",
                e));

            a << i.getCustom_attribute_value ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const LanguageScreen& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (i);

          // confirmation-dialog
          //
          for (LanguageScreen::Confirmation_dialogConstIterator
               b (i.getConfirmation_dialog ().begin ()), n (i.getConfirmation_dialog ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "confirmation-dialog",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SuperNullScreen& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::Type& > (i);

          // super-null-dialog
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "super-null-dialog",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getSuper_null_dialog ();
          }

          // confirmation-dialog
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "confirmation-dialog",
                "http://www.smartmatic.com/Saes/Voting/Screen",
                e));

            s << i.getConfirmation_dialog ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BallotSelectionDialogs& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (i);

          // party-name
          //
          if (i.getParty_name ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "party-name",
                e));

            a << *i.getParty_name ();
          }

          // party-abbreviation
          //
          if (i.getParty_abbreviation ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "party-abbreviation",
                e));

            a << *i.getParty_abbreviation ();
          }

          // party-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "party-code",
                e));

            a << i.getParty_code ();
          }

          // party-custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "party-custom-code",
                e));

            a << i.getParty_custom_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Confirmation_dialog& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Screen::BasicImage& > (i);

          // language
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "language",
                e));

            a << i.getLanguage ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

